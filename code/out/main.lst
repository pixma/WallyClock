                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.3.0 #8604 (May 11 2013) (Linux)
                              4 ; This file was generated Tue Dec  3 18:01:19 2013
                              5 ;--------------------------------------------------------
                              6 	.module main
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _bottomLeftCorner
                             13 	.globl _bottomRightCorner
                             14 	.globl _topRightCorner
                             15 	.globl _Line
                             16 	.globl _topLeftCorner
                             17 	.globl _upperLine
                             18 	.globl _largeLcdChar_Zero
                             19 	.globl _nameLogo
                             20 	.globl _welcomeScreenImage
                             21 	.globl _glcdSmallCharSystemFont
                             22 	.globl _glcdCharSystemFont
                             23 	.globl _glcdNumberSystemFont
                             24 	.globl _main
                             25 	.globl _showGLCDTime
                             26 	.globl _SCK
                             27 	.globl _SDA
                             28 	.globl _TF2
                             29 	.globl _EXF2
                             30 	.globl _RCLK
                             31 	.globl _TCLK
                             32 	.globl _EXEN2
                             33 	.globl _TR2
                             34 	.globl _C_T2
                             35 	.globl _CP_RL2
                             36 	.globl _T2CON_7
                             37 	.globl _T2CON_6
                             38 	.globl _T2CON_5
                             39 	.globl _T2CON_4
                             40 	.globl _T2CON_3
                             41 	.globl _T2CON_2
                             42 	.globl _T2CON_1
                             43 	.globl _T2CON_0
                             44 	.globl _PT2
                             45 	.globl _ET2
                             46 	.globl _CY
                             47 	.globl _AC
                             48 	.globl _F0
                             49 	.globl _RS1
                             50 	.globl _RS0
                             51 	.globl _OV
                             52 	.globl _F1
                             53 	.globl _P
                             54 	.globl _PS
                             55 	.globl _PT1
                             56 	.globl _PX1
                             57 	.globl _PT0
                             58 	.globl _PX0
                             59 	.globl _RD
                             60 	.globl _WR
                             61 	.globl _T1
                             62 	.globl _T0
                             63 	.globl _INT1
                             64 	.globl _INT0
                             65 	.globl _TXD
                             66 	.globl _RXD
                             67 	.globl _P3_7
                             68 	.globl _P3_6
                             69 	.globl _P3_5
                             70 	.globl _P3_4
                             71 	.globl _P3_3
                             72 	.globl _P3_2
                             73 	.globl _P3_1
                             74 	.globl _P3_0
                             75 	.globl _EA
                             76 	.globl _ES
                             77 	.globl _ET1
                             78 	.globl _EX1
                             79 	.globl _ET0
                             80 	.globl _EX0
                             81 	.globl _P2_7
                             82 	.globl _P2_6
                             83 	.globl _P2_5
                             84 	.globl _P2_4
                             85 	.globl _P2_3
                             86 	.globl _P2_2
                             87 	.globl _P2_1
                             88 	.globl _P2_0
                             89 	.globl _SM0
                             90 	.globl _SM1
                             91 	.globl _SM2
                             92 	.globl _REN
                             93 	.globl _TB8
                             94 	.globl _RB8
                             95 	.globl _TI
                             96 	.globl _RI
                             97 	.globl _P1_7
                             98 	.globl _P1_6
                             99 	.globl _P1_5
                            100 	.globl _P1_4
                            101 	.globl _P1_3
                            102 	.globl _P1_2
                            103 	.globl _P1_1
                            104 	.globl _P1_0
                            105 	.globl _TF1
                            106 	.globl _TR1
                            107 	.globl _TF0
                            108 	.globl _TR0
                            109 	.globl _IE1
                            110 	.globl _IT1
                            111 	.globl _IE0
                            112 	.globl _IT0
                            113 	.globl _P0_7
                            114 	.globl _P0_6
                            115 	.globl _P0_5
                            116 	.globl _P0_4
                            117 	.globl _P0_3
                            118 	.globl _P0_2
                            119 	.globl _P0_1
                            120 	.globl _P0_0
                            121 	.globl _SWDT
                            122 	.globl _WDT
                            123 	.globl _WDTS
                            124 	.globl _WDRE
                            125 	.globl _WDOUT
                            126 	.globl _PBO
                            127 	.globl _PPC
                            128 	.globl _EBO
                            129 	.globl _EC
                            130 	.globl _CCF0
                            131 	.globl _CCF1
                            132 	.globl _CCF2
                            133 	.globl _CCF3
                            134 	.globl _CCF4
                            135 	.globl _CR
                            136 	.globl _CF
                            137 	.globl _TH2
                            138 	.globl _TL2
                            139 	.globl _RCAP2H
                            140 	.globl _RCAP2L
                            141 	.globl _T2CON
                            142 	.globl _B
                            143 	.globl _ACC
                            144 	.globl _PSW
                            145 	.globl _IP
                            146 	.globl _P3
                            147 	.globl _IE
                            148 	.globl _P2
                            149 	.globl _SBUF
                            150 	.globl _SCON
                            151 	.globl _P1
                            152 	.globl _TH1
                            153 	.globl _TH0
                            154 	.globl _TL1
                            155 	.globl _TL0
                            156 	.globl _TMOD
                            157 	.globl _TCON
                            158 	.globl _PCON
                            159 	.globl _DPH
                            160 	.globl _DPL
                            161 	.globl _SP
                            162 	.globl _P0
                            163 	.globl _T2MOD
                            164 	.globl _WDTD
                            165 	.globl _WDTC
                            166 	.globl _SPDAT
                            167 	.globl _SPDR
                            168 	.globl _SPCFG
                            169 	.globl _SPSR
                            170 	.globl _SPCTL
                            171 	.globl _SPCR
                            172 	.globl _SADEN
                            173 	.globl _SADDR
                            174 	.globl _IP1H
                            175 	.globl _IP1
                            176 	.globl _IP0H
                            177 	.globl _IP0
                            178 	.globl _IEN1
                            179 	.globl _IEN0
                            180 	.globl _FCF
                            181 	.globl _FST
                            182 	.globl _CMOD
                            183 	.globl _CL
                            184 	.globl _CH
                            185 	.globl _CCON
                            186 	.globl _CCAPM4
                            187 	.globl _CCAPM3
                            188 	.globl _CCAPM2
                            189 	.globl _CCAPM1
                            190 	.globl _CCAPM0
                            191 	.globl _CCAP4L
                            192 	.globl _CCAP3L
                            193 	.globl _CCAP2L
                            194 	.globl _CCAP1L
                            195 	.globl _CCAP0L
                            196 	.globl _CCAP4H
                            197 	.globl _CCAP3H
                            198 	.globl _CCAP2H
                            199 	.globl _CCAP1H
                            200 	.globl _CCAP0H
                            201 	.globl _AUXR1
                            202 	.globl _AUXR
                            203 	.globl _nVar
                            204 	.globl _i
                            205 	.globl _ch_CharCatch
                            206 	.globl _Set_DS1307_RTC_Date_PARM_4
                            207 	.globl _Set_DS1307_RTC_Date_PARM_3
                            208 	.globl _Set_DS1307_RTC_Date_PARM_2
                            209 	.globl _Set_DS1307_RTC_Time_PARM_4
                            210 	.globl _Set_DS1307_RTC_Time_PARM_3
                            211 	.globl _Set_DS1307_RTC_Time_PARM_2
                            212 	.globl _Read_Bytes_From_DS1307_RTC_PARM_3
                            213 	.globl _Read_Bytes_From_DS1307_RTC_PARM_2
                            214 	.globl _Write_Bytes_To_DS1307_RTC_PARM_3
                            215 	.globl _Write_Bytes_To_DS1307_RTC_PARM_2
                            216 	.globl _Write_Byte_To_DS1307_RTC_PARM_2
                            217 	.globl _Temp
                            218 	.globl _pRTCArray
                            219 	.globl _borders_PARM_4
                            220 	.globl _borders_PARM_3
                            221 	.globl _borders_PARM_2
                            222 	.globl _setGLCDCursor_PARM_2
                            223 	.globl _commandGLCD_PARM_2
                            224 	.globl _delayms
                            225 	.globl _InitGLCDEnvironment
                            226 	.globl _commandGLCD
                            227 	.globl _DisplayGLCD
                            228 	.globl _writeGLCD
                            229 	.globl _chipSelectGLCD
                            230 	.globl _clearGLCD
                            231 	.globl _writeLine
                            232 	.globl _printDigit
                            233 	.globl _writeLetter
                            234 	.globl _printNumber
                            235 	.globl _setGLCDCursor
                            236 	.globl _splashImage
                            237 	.globl _borders
                            238 	.globl _beginScreen
                            239 	.globl ___delay_us
                            240 	.globl _InitI2C
                            241 	.globl _I2C_Start
                            242 	.globl _I2C_ReStart
                            243 	.globl _I2C_Stop
                            244 	.globl _I2C_Send_ACK
                            245 	.globl _I2C_Send_NACK
                            246 	.globl _I2C_Write_Byte
                            247 	.globl _I2C_Read_Byte
                            248 	.globl _delay
                            249 	.globl _Write_Byte_To_DS1307_RTC
                            250 	.globl _Read_Byte_From_DS1307_RTC
                            251 	.globl _Write_Bytes_To_DS1307_RTC
                            252 	.globl _Read_Bytes_From_DS1307_RTC
                            253 	.globl _Set_DS1307_RTC_Time
                            254 	.globl _Get_DS1307_RTC_Time
                            255 	.globl _Set_DS1307_RTC_Date
                            256 	.globl _Get_DS1307_RTC_Date
                            257 	.globl _getCharLen
                            258 ;--------------------------------------------------------
                            259 ; special function registers
                            260 ;--------------------------------------------------------
                            261 	.area RSEG    (ABS,DATA)
   0000                     262 	.org 0x0000
                     008E   263 _AUXR	=	0x008e
                     00A2   264 _AUXR1	=	0x00a2
                     00FA   265 _CCAP0H	=	0x00fa
                     00FB   266 _CCAP1H	=	0x00fb
                     00FC   267 _CCAP2H	=	0x00fc
                     00FD   268 _CCAP3H	=	0x00fd
                     00FE   269 _CCAP4H	=	0x00fe
                     00EA   270 _CCAP0L	=	0x00ea
                     00EB   271 _CCAP1L	=	0x00eb
                     00EC   272 _CCAP2L	=	0x00ec
                     00ED   273 _CCAP3L	=	0x00ed
                     00EE   274 _CCAP4L	=	0x00ee
                     00DA   275 _CCAPM0	=	0x00da
                     00DB   276 _CCAPM1	=	0x00db
                     00DC   277 _CCAPM2	=	0x00dc
                     00DD   278 _CCAPM3	=	0x00dd
                     00DE   279 _CCAPM4	=	0x00de
                     00D8   280 _CCON	=	0x00d8
                     00F9   281 _CH	=	0x00f9
                     00E9   282 _CL	=	0x00e9
                     00D9   283 _CMOD	=	0x00d9
                     00B6   284 _FST	=	0x00b6
                     00B1   285 _FCF	=	0x00b1
                     00A8   286 _IEN0	=	0x00a8
                     00E8   287 _IEN1	=	0x00e8
                     00B8   288 _IP0	=	0x00b8
                     00B7   289 _IP0H	=	0x00b7
                     00F8   290 _IP1	=	0x00f8
                     00F7   291 _IP1H	=	0x00f7
                     00A9   292 _SADDR	=	0x00a9
                     00B9   293 _SADEN	=	0x00b9
                     00D5   294 _SPCR	=	0x00d5
                     00D5   295 _SPCTL	=	0x00d5
                     00AA   296 _SPSR	=	0x00aa
                     00AA   297 _SPCFG	=	0x00aa
                     0086   298 _SPDR	=	0x0086
                     0086   299 _SPDAT	=	0x0086
                     00C0   300 _WDTC	=	0x00c0
                     0085   301 _WDTD	=	0x0085
                     00C9   302 _T2MOD	=	0x00c9
                     0080   303 _P0	=	0x0080
                     0081   304 _SP	=	0x0081
                     0082   305 _DPL	=	0x0082
                     0083   306 _DPH	=	0x0083
                     0087   307 _PCON	=	0x0087
                     0088   308 _TCON	=	0x0088
                     0089   309 _TMOD	=	0x0089
                     008A   310 _TL0	=	0x008a
                     008B   311 _TL1	=	0x008b
                     008C   312 _TH0	=	0x008c
                     008D   313 _TH1	=	0x008d
                     0090   314 _P1	=	0x0090
                     0098   315 _SCON	=	0x0098
                     0099   316 _SBUF	=	0x0099
                     00A0   317 _P2	=	0x00a0
                     00A8   318 _IE	=	0x00a8
                     00B0   319 _P3	=	0x00b0
                     00B8   320 _IP	=	0x00b8
                     00D0   321 _PSW	=	0x00d0
                     00E0   322 _ACC	=	0x00e0
                     00F0   323 _B	=	0x00f0
                     00C8   324 _T2CON	=	0x00c8
                     00CA   325 _RCAP2L	=	0x00ca
                     00CB   326 _RCAP2H	=	0x00cb
                     00CC   327 _TL2	=	0x00cc
                     00CD   328 _TH2	=	0x00cd
                            329 ;--------------------------------------------------------
                            330 ; special function bits
                            331 ;--------------------------------------------------------
                            332 	.area RSEG    (ABS,DATA)
   0000                     333 	.org 0x0000
                     00DF   334 _CF	=	0x00df
                     00DE   335 _CR	=	0x00de
                     00DC   336 _CCF4	=	0x00dc
                     00DB   337 _CCF3	=	0x00db
                     00DA   338 _CCF2	=	0x00da
                     00D9   339 _CCF1	=	0x00d9
                     00D8   340 _CCF0	=	0x00d8
                     00AE   341 _EC	=	0x00ae
                     00EB   342 _EBO	=	0x00eb
                     00BE   343 _PPC	=	0x00be
                     00FB   344 _PBO	=	0x00fb
                     00C4   345 _WDOUT	=	0x00c4
                     00C3   346 _WDRE	=	0x00c3
                     00C2   347 _WDTS	=	0x00c2
                     00C1   348 _WDT	=	0x00c1
                     00C0   349 _SWDT	=	0x00c0
                     0080   350 _P0_0	=	0x0080
                     0081   351 _P0_1	=	0x0081
                     0082   352 _P0_2	=	0x0082
                     0083   353 _P0_3	=	0x0083
                     0084   354 _P0_4	=	0x0084
                     0085   355 _P0_5	=	0x0085
                     0086   356 _P0_6	=	0x0086
                     0087   357 _P0_7	=	0x0087
                     0088   358 _IT0	=	0x0088
                     0089   359 _IE0	=	0x0089
                     008A   360 _IT1	=	0x008a
                     008B   361 _IE1	=	0x008b
                     008C   362 _TR0	=	0x008c
                     008D   363 _TF0	=	0x008d
                     008E   364 _TR1	=	0x008e
                     008F   365 _TF1	=	0x008f
                     0090   366 _P1_0	=	0x0090
                     0091   367 _P1_1	=	0x0091
                     0092   368 _P1_2	=	0x0092
                     0093   369 _P1_3	=	0x0093
                     0094   370 _P1_4	=	0x0094
                     0095   371 _P1_5	=	0x0095
                     0096   372 _P1_6	=	0x0096
                     0097   373 _P1_7	=	0x0097
                     0098   374 _RI	=	0x0098
                     0099   375 _TI	=	0x0099
                     009A   376 _RB8	=	0x009a
                     009B   377 _TB8	=	0x009b
                     009C   378 _REN	=	0x009c
                     009D   379 _SM2	=	0x009d
                     009E   380 _SM1	=	0x009e
                     009F   381 _SM0	=	0x009f
                     00A0   382 _P2_0	=	0x00a0
                     00A1   383 _P2_1	=	0x00a1
                     00A2   384 _P2_2	=	0x00a2
                     00A3   385 _P2_3	=	0x00a3
                     00A4   386 _P2_4	=	0x00a4
                     00A5   387 _P2_5	=	0x00a5
                     00A6   388 _P2_6	=	0x00a6
                     00A7   389 _P2_7	=	0x00a7
                     00A8   390 _EX0	=	0x00a8
                     00A9   391 _ET0	=	0x00a9
                     00AA   392 _EX1	=	0x00aa
                     00AB   393 _ET1	=	0x00ab
                     00AC   394 _ES	=	0x00ac
                     00AF   395 _EA	=	0x00af
                     00B0   396 _P3_0	=	0x00b0
                     00B1   397 _P3_1	=	0x00b1
                     00B2   398 _P3_2	=	0x00b2
                     00B3   399 _P3_3	=	0x00b3
                     00B4   400 _P3_4	=	0x00b4
                     00B5   401 _P3_5	=	0x00b5
                     00B6   402 _P3_6	=	0x00b6
                     00B7   403 _P3_7	=	0x00b7
                     00B0   404 _RXD	=	0x00b0
                     00B1   405 _TXD	=	0x00b1
                     00B2   406 _INT0	=	0x00b2
                     00B3   407 _INT1	=	0x00b3
                     00B4   408 _T0	=	0x00b4
                     00B5   409 _T1	=	0x00b5
                     00B6   410 _WR	=	0x00b6
                     00B7   411 _RD	=	0x00b7
                     00B8   412 _PX0	=	0x00b8
                     00B9   413 _PT0	=	0x00b9
                     00BA   414 _PX1	=	0x00ba
                     00BB   415 _PT1	=	0x00bb
                     00BC   416 _PS	=	0x00bc
                     00D0   417 _P	=	0x00d0
                     00D1   418 _F1	=	0x00d1
                     00D2   419 _OV	=	0x00d2
                     00D3   420 _RS0	=	0x00d3
                     00D4   421 _RS1	=	0x00d4
                     00D5   422 _F0	=	0x00d5
                     00D6   423 _AC	=	0x00d6
                     00D7   424 _CY	=	0x00d7
                     00AD   425 _ET2	=	0x00ad
                     00BD   426 _PT2	=	0x00bd
                     00C8   427 _T2CON_0	=	0x00c8
                     00C9   428 _T2CON_1	=	0x00c9
                     00CA   429 _T2CON_2	=	0x00ca
                     00CB   430 _T2CON_3	=	0x00cb
                     00CC   431 _T2CON_4	=	0x00cc
                     00CD   432 _T2CON_5	=	0x00cd
                     00CE   433 _T2CON_6	=	0x00ce
                     00CF   434 _T2CON_7	=	0x00cf
                     00C8   435 _CP_RL2	=	0x00c8
                     00C9   436 _C_T2	=	0x00c9
                     00CA   437 _TR2	=	0x00ca
                     00CB   438 _EXEN2	=	0x00cb
                     00CC   439 _TCLK	=	0x00cc
                     00CD   440 _RCLK	=	0x00cd
                     00CE   441 _EXF2	=	0x00ce
                     00CF   442 _TF2	=	0x00cf
                     0090   443 _SDA	=	0x0090
                     0091   444 _SCK	=	0x0091
                            445 ;--------------------------------------------------------
                            446 ; overlayable register banks
                            447 ;--------------------------------------------------------
                            448 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     449 	.ds 8
                            450 ;--------------------------------------------------------
                            451 ; internal ram data
                            452 ;--------------------------------------------------------
                            453 	.area DSEG    (DATA)
   0000                     454 _commandGLCD_PARM_2:
   0000                     455 	.ds 1
   0001                     456 _printNumber_lNumber_1_44:
   0001                     457 	.ds 4
   0005                     458 _printNumber_cChar_1_45:
   0005                     459 	.ds 1
   0006                     460 _printNumber_cInteger_1_45:
   0006                     461 	.ds 10
   0010                     462 _setGLCDCursor_PARM_2:
   0010                     463 	.ds 2
   0012                     464 _borders_PARM_2:
   0012                     465 	.ds 2
   0014                     466 _borders_PARM_3:
   0014                     467 	.ds 2
   0016                     468 _borders_PARM_4:
   0016                     469 	.ds 2
   0018                     470 _pRTCArray::
   0018                     471 	.ds 4
   001C                     472 _Temp::
   001C                     473 	.ds 1
   001D                     474 _Write_Byte_To_DS1307_RTC_PARM_2:
   001D                     475 	.ds 1
   001E                     476 _Write_Bytes_To_DS1307_RTC_PARM_2:
   001E                     477 	.ds 3
   0021                     478 _Write_Bytes_To_DS1307_RTC_PARM_3:
   0021                     479 	.ds 1
   0022                     480 _Read_Bytes_From_DS1307_RTC_PARM_2:
   0022                     481 	.ds 3
   0025                     482 _Read_Bytes_From_DS1307_RTC_PARM_3:
   0025                     483 	.ds 2
   0027                     484 _Read_Bytes_From_DS1307_RTC_i_1_123:
   0027                     485 	.ds 2
   0029                     486 _Set_DS1307_RTC_Time_PARM_2:
   0029                     487 	.ds 1
   002A                     488 _Set_DS1307_RTC_Time_PARM_3:
   002A                     489 	.ds 1
   002B                     490 _Set_DS1307_RTC_Time_PARM_4:
   002B                     491 	.ds 1
   002C                     492 _Set_DS1307_RTC_Date_PARM_2:
   002C                     493 	.ds 1
   002D                     494 _Set_DS1307_RTC_Date_PARM_3:
   002D                     495 	.ds 1
   002E                     496 _Set_DS1307_RTC_Date_PARM_4:
   002E                     497 	.ds 1
   002F                     498 _ch_CharCatch::
   002F                     499 	.ds 3
   0032                     500 _i::
   0032                     501 	.ds 2
   0034                     502 _nVar::
   0034                     503 	.ds 2
                            504 ;--------------------------------------------------------
                            505 ; overlayable items in internal ram 
                            506 ;--------------------------------------------------------
                            507 	.area	OSEG    (OVR,DATA)
                            508 	.area	OSEG    (OVR,DATA)
                            509 	.area	OSEG    (OVR,DATA)
                            510 	.area	OSEG    (OVR,DATA)
                            511 	.area	OSEG    (OVR,DATA)
                            512 ;--------------------------------------------------------
                            513 ; Stack segment in internal ram 
                            514 ;--------------------------------------------------------
                            515 	.area	SSEG	(DATA)
   0000                     516 __start__stack:
   0000                     517 	.ds	1
                            518 
                            519 ;--------------------------------------------------------
                            520 ; indirectly addressable internal ram data
                            521 ;--------------------------------------------------------
                            522 	.area ISEG    (DATA)
                            523 ;--------------------------------------------------------
                            524 ; absolute internal ram data
                            525 ;--------------------------------------------------------
                            526 	.area IABS    (ABS,DATA)
                            527 	.area IABS    (ABS,DATA)
                            528 ;--------------------------------------------------------
                            529 ; bit data
                            530 ;--------------------------------------------------------
                            531 	.area BSEG    (BIT)
   0000                     532 _Write_Byte_To_DS1307_RTC_sloc0_1_0:
   0000                     533 	.ds 1
   0001                     534 _Read_Byte_From_DS1307_RTC_sloc0_1_0:
   0001                     535 	.ds 1
   0002                     536 _Write_Bytes_To_DS1307_RTC_sloc0_1_0:
   0002                     537 	.ds 1
   0003                     538 _Read_Bytes_From_DS1307_RTC_sloc0_1_0:
   0003                     539 	.ds 1
                            540 ;--------------------------------------------------------
                            541 ; paged external ram data
                            542 ;--------------------------------------------------------
                            543 	.area PSEG    (PAG,XDATA)
                            544 ;--------------------------------------------------------
                            545 ; external ram data
                            546 ;--------------------------------------------------------
                            547 	.area XSEG    (XDATA)
                            548 ;--------------------------------------------------------
                            549 ; absolute external ram data
                            550 ;--------------------------------------------------------
                            551 	.area XABS    (ABS,XDATA)
                            552 ;--------------------------------------------------------
                            553 ; external initialized ram data
                            554 ;--------------------------------------------------------
                            555 	.area XISEG   (XDATA)
                            556 	.area HOME    (CODE)
                            557 	.area GSINIT0 (CODE)
                            558 	.area GSINIT1 (CODE)
                            559 	.area GSINIT2 (CODE)
                            560 	.area GSINIT3 (CODE)
                            561 	.area GSINIT4 (CODE)
                            562 	.area GSINIT5 (CODE)
                            563 	.area GSINIT  (CODE)
                            564 	.area GSFINAL (CODE)
                            565 	.area CSEG    (CODE)
                            566 ;--------------------------------------------------------
                            567 ; interrupt vector 
                            568 ;--------------------------------------------------------
                            569 	.area HOME    (CODE)
   0000                     570 __interrupt_vect:
   0000 02r00r00      [24]  571 	ljmp	__sdcc_gsinit_startup
                            572 ;--------------------------------------------------------
                            573 ; global & static initialisations
                            574 ;--------------------------------------------------------
                            575 	.area HOME    (CODE)
                            576 	.area GSINIT  (CODE)
                            577 	.area GSFINAL (CODE)
                            578 	.area GSINIT  (CODE)
                            579 	.globl __sdcc_gsinit_startup
                            580 	.globl __sdcc_program_startup
                            581 	.globl __start__stack
                            582 	.globl __mcs51_genXINIT
                            583 	.globl __mcs51_genXRAMCLEAR
                            584 	.globl __mcs51_genRAMCLEAR
                            585 	.area GSFINAL (CODE)
   0000 02r00r03      [24]  586 	ljmp	__sdcc_program_startup
                            587 ;--------------------------------------------------------
                            588 ; Home
                            589 ;--------------------------------------------------------
                            590 	.area HOME    (CODE)
                            591 	.area HOME    (CODE)
   0003                     592 __sdcc_program_startup:
   0003 02r0ArC4      [24]  593 	ljmp	_main
                            594 ;	return from main will return to caller
                            595 ;--------------------------------------------------------
                            596 ; code
                            597 ;--------------------------------------------------------
                            598 	.area CSEG    (CODE)
                            599 ;------------------------------------------------------------
                            600 ;Allocation info for local variables in function 'delayms'
                            601 ;------------------------------------------------------------
                            602 ;dl                        Allocated to registers 
                            603 ;iCnt                      Allocated to registers r4 r5 
                            604 ;------------------------------------------------------------
                            605 ;	src/libdelay.c:5: void delayms( int dl ){
                            606 ;	-----------------------------------------
                            607 ;	 function delayms
                            608 ;	-----------------------------------------
   0000                     609 _delayms:
                     0007   610 	ar7 = 0x07
                     0006   611 	ar6 = 0x06
                     0005   612 	ar5 = 0x05
                     0004   613 	ar4 = 0x04
                     0003   614 	ar3 = 0x03
                     0002   615 	ar2 = 0x02
                     0001   616 	ar1 = 0x01
                     0000   617 	ar0 = 0x00
   0000 AE 82         [24]  618 	mov	r6,dpl
   0002 AF 83         [24]  619 	mov	r7,dph
                            620 ;	src/libdelay.c:6: int iCnt=0;
   0004                     621 00107$:
                            622 ;	src/libdelay.c:7: for ( ; dl ; dl-- )
   0004 EE            [12]  623 	mov	a,r6
   0005 4F            [12]  624 	orl	a,r7
   0006 60 14         [24]  625 	jz	00109$
                            626 ;	src/libdelay.c:8: for( iCnt=0; iCnt<=100; iCnt++);
   0008 7C 65         [12]  627 	mov	r4,#0x65
   000A 7D 00         [12]  628 	mov	r5,#0x00
   000C                     629 00105$:
   000C 1C            [12]  630 	dec	r4
   000D BC FF 01      [24]  631 	cjne	r4,#0xFF,00126$
   0010 1D            [12]  632 	dec	r5
   0011                     633 00126$:
   0011 EC            [12]  634 	mov	a,r4
   0012 4D            [12]  635 	orl	a,r5
   0013 70 F7         [24]  636 	jnz	00105$
                            637 ;	src/libdelay.c:7: for ( ; dl ; dl-- )
   0015 1E            [12]  638 	dec	r6
   0016 BE FF 01      [24]  639 	cjne	r6,#0xFF,00128$
   0019 1F            [12]  640 	dec	r7
   001A                     641 00128$:
   001A 80 E8         [24]  642 	sjmp	00107$
   001C                     643 00109$:
   001C 22            [24]  644 	ret
                            645 ;------------------------------------------------------------
                            646 ;Allocation info for local variables in function 'InitGLCDEnvironment'
                            647 ;------------------------------------------------------------
                            648 ;	src/glcd.c:8: void InitGLCDEnvironment( void ){
                            649 ;	-----------------------------------------
                            650 ;	 function InitGLCDEnvironment
                            651 ;	-----------------------------------------
   001D                     652 _InitGLCDEnvironment:
                            653 ;	src/glcd.c:9: RST=0;
   001D C2 92         [12]  654 	clr	_P1_2
                            655 ;	src/glcd.c:10: RST=1;	//reset low then high.
   001F D2 92         [12]  656 	setb	_P1_2
                            657 ;	src/glcd.c:11: commandGLCD( 0x3e, BOTHCHIP );
   0021 75*00 03      [24]  658 	mov	_commandGLCD_PARM_2,#0x03
   0024 75 82 3E      [24]  659 	mov	dpl,#0x3E
   0027 12r00r4E      [24]  660 	lcall	_commandGLCD
                            661 ;	src/glcd.c:12: commandGLCD( 0x3f, BOTHCHIP );	//On the Display srystals.
   002A 75*00 03      [24]  662 	mov	_commandGLCD_PARM_2,#0x03
   002D 75 82 3F      [24]  663 	mov	dpl,#0x3F
   0030 12r00r4E      [24]  664 	lcall	_commandGLCD
                            665 ;	src/glcd.c:13: commandGLCD( 0xb8, BOTHCHIP ); //page 0 base address...
   0033 75*00 03      [24]  666 	mov	_commandGLCD_PARM_2,#0x03
   0036 75 82 B8      [24]  667 	mov	dpl,#0xB8
   0039 12r00r4E      [24]  668 	lcall	_commandGLCD
                            669 ;	src/glcd.c:14: commandGLCD( 0x40, BOTHCHIP );	//column base address.
   003C 75*00 03      [24]  670 	mov	_commandGLCD_PARM_2,#0x03
   003F 75 82 40      [24]  671 	mov	dpl,#0x40
   0042 12r00r4E      [24]  672 	lcall	_commandGLCD
                            673 ;	src/glcd.c:15: commandGLCD( 0xc0, BOTHCHIP );	//taking cursor to top left.
   0045 75*00 03      [24]  674 	mov	_commandGLCD_PARM_2,#0x03
   0048 75 82 C0      [24]  675 	mov	dpl,#0xC0
   004B 02r00r4E      [24]  676 	ljmp	_commandGLCD
                            677 ;------------------------------------------------------------
                            678 ;Allocation info for local variables in function 'commandGLCD'
                            679 ;------------------------------------------------------------
                            680 ;chip                      Allocated with name '_commandGLCD_PARM_2'
                            681 ;commandToGLCD             Allocated to registers r7 
                            682 ;------------------------------------------------------------
                            683 ;	src/glcd.c:17: void commandGLCD( unsigned char commandToGLCD, unsigned char chip){
                            684 ;	-----------------------------------------
                            685 ;	 function commandGLCD
                            686 ;	-----------------------------------------
   004E                     687 _commandGLCD:
   004E AF 82         [24]  688 	mov	r7,dpl
                            689 ;	src/glcd.c:18: chipSelectGLCD( chip );
   0050 85*00 82      [24]  690 	mov	dpl,_commandGLCD_PARM_2
   0053 C0 07         [24]  691 	push	ar7
   0055 12r00r71      [24]  692 	lcall	_chipSelectGLCD
   0058 D0 07         [24]  693 	pop	ar7
                            694 ;	src/glcd.c:19: RS=0;
   005A C2 97         [12]  695 	clr	_P1_7
                            696 ;	src/glcd.c:20: writeGLCD( commandToGLCD );
   005C 8F 82         [24]  697 	mov	dpl,r7
   005E 02r00r66      [24]  698 	ljmp	_writeGLCD
                            699 ;------------------------------------------------------------
                            700 ;Allocation info for local variables in function 'DisplayGLCD'
                            701 ;------------------------------------------------------------
                            702 ;cCharData                 Allocated to registers 
                            703 ;------------------------------------------------------------
                            704 ;	src/glcd.c:22: void DisplayGLCD( unsigned char cCharData){
                            705 ;	-----------------------------------------
                            706 ;	 function DisplayGLCD
                            707 ;	-----------------------------------------
   0061                     708 _DisplayGLCD:
                            709 ;	src/glcd.c:23: RS=1;
   0061 D2 97         [12]  710 	setb	_P1_7
                            711 ;	src/glcd.c:24: writeGLCD( cCharData );
   0063 02r00r66      [24]  712 	ljmp	_writeGLCD
                            713 ;------------------------------------------------------------
                            714 ;Allocation info for local variables in function 'writeGLCD'
                            715 ;------------------------------------------------------------
                            716 ;cCharValue                Allocated to registers r7 
                            717 ;------------------------------------------------------------
                            718 ;	src/glcd.c:26: void writeGLCD( unsigned char cCharValue){
                            719 ;	-----------------------------------------
                            720 ;	 function writeGLCD
                            721 ;	-----------------------------------------
   0066                     722 _writeGLCD:
   0066 AF 82         [24]  723 	mov	r7,dpl
                            724 ;	src/glcd.c:27: RW=0;
   0068 C2 96         [12]  725 	clr	_P1_6
                            726 ;	src/glcd.c:28: GLCDPORT= cCharValue;
   006A 8F A0         [24]  727 	mov	_P2,r7
                            728 ;	src/glcd.c:29: EN=1;
   006C D2 95         [12]  729 	setb	_P1_5
                            730 ;	src/glcd.c:30: EN=0;	
   006E C2 95         [12]  731 	clr	_P1_5
   0070 22            [24]  732 	ret
                            733 ;------------------------------------------------------------
                            734 ;Allocation info for local variables in function 'chipSelectGLCD'
                            735 ;------------------------------------------------------------
                            736 ;cChipSelection            Allocated to registers r7 
                            737 ;------------------------------------------------------------
                            738 ;	src/glcd.c:32: void chipSelectGLCD( unsigned char cChipSelection){
                            739 ;	-----------------------------------------
                            740 ;	 function chipSelectGLCD
                            741 ;	-----------------------------------------
   0071                     742 _chipSelectGLCD:
                            743 ;	src/glcd.c:33: switch( cChipSelection ){
   0071 E5 82         [12]  744 	mov	a,dpl
   0073 FF            [12]  745 	mov	r7,a
   0074 24 FC         [12]  746 	add	a,#0xff - 0x03
   0076 40 26         [24]  747 	jc	00106$
   0078 EF            [12]  748 	mov	a,r7
   0079 2F            [12]  749 	add	a,r7
   007A 2F            [12]  750 	add	a,r7
   007B 90r00r7F      [24]  751 	mov	dptr,#00112$
   007E 73            [24]  752 	jmp	@a+dptr
   007F                     753 00112$:
   007F 02r00r8B      [24]  754 	ljmp	00101$
   0082 02r00r90      [24]  755 	ljmp	00102$
   0085 02r00r95      [24]  756 	ljmp	00103$
   0088 02r00r9A      [24]  757 	ljmp	00104$
                            758 ;	src/glcd.c:34: case 0:
   008B                     759 00101$:
                            760 ;	src/glcd.c:35: CS1=0; CS2=0;
   008B C2 94         [12]  761 	clr	_P1_4
   008D C2 93         [12]  762 	clr	_P1_3
                            763 ;	src/glcd.c:36: break;
                            764 ;	src/glcd.c:37: case 1:
   008F 22            [24]  765 	ret
   0090                     766 00102$:
                            767 ;	src/glcd.c:38: CS1=1; CS2=0;
   0090 D2 94         [12]  768 	setb	_P1_4
   0092 C2 93         [12]  769 	clr	_P1_3
                            770 ;	src/glcd.c:39: break;
                            771 ;	src/glcd.c:40: case 2:
   0094 22            [24]  772 	ret
   0095                     773 00103$:
                            774 ;	src/glcd.c:41: CS1=0; CS2=1;
   0095 C2 94         [12]  775 	clr	_P1_4
   0097 D2 93         [12]  776 	setb	_P1_3
                            777 ;	src/glcd.c:42: break;
                            778 ;	src/glcd.c:43: case 3:
   0099 22            [24]  779 	ret
   009A                     780 00104$:
                            781 ;	src/glcd.c:44: CS1=1; CS2=1;
   009A D2 94         [12]  782 	setb	_P1_4
   009C D2 93         [12]  783 	setb	_P1_3
                            784 ;	src/glcd.c:46: }
   009E                     785 00106$:
   009E 22            [24]  786 	ret
                            787 ;------------------------------------------------------------
                            788 ;Allocation info for local variables in function 'clearGLCD'
                            789 ;------------------------------------------------------------
                            790 ;i                         Allocated to registers r6 r7 
                            791 ;j                         Allocated to registers r4 r5 
                            792 ;------------------------------------------------------------
                            793 ;	src/glcd.c:51: void clearGLCD( void ){
                            794 ;	-----------------------------------------
                            795 ;	 function clearGLCD
                            796 ;	-----------------------------------------
   009F                     797 _clearGLCD:
                            798 ;	src/glcd.c:53: for( i=PAGE0; i<=PAGE7; i++){
   009F 7E B8         [12]  799 	mov	r6,#0xB8
   00A1 7F 00         [12]  800 	mov	r7,#0x00
   00A3                     801 00105$:
                            802 ;	src/glcd.c:54: commandGLCD(i, BOTHCHIP);
   00A3 8E 82         [24]  803 	mov	dpl,r6
   00A5 75*00 03      [24]  804 	mov	_commandGLCD_PARM_2,#0x03
   00A8 C0 07         [24]  805 	push	ar7
   00AA C0 06         [24]  806 	push	ar6
   00AC 12r00r4E      [24]  807 	lcall	_commandGLCD
                            808 ;	src/glcd.c:55: commandGLCD( COLUMN_ADDRESS, BOTHCHIP );
   00AF 75*00 03      [24]  809 	mov	_commandGLCD_PARM_2,#0x03
   00B2 75 82 40      [24]  810 	mov	dpl,#0x40
   00B5 12r00r4E      [24]  811 	lcall	_commandGLCD
   00B8 D0 06         [24]  812 	pop	ar6
   00BA D0 07         [24]  813 	pop	ar7
                            814 ;	src/glcd.c:56: for( j=0;j<64; j++){
   00BC 7C 00         [12]  815 	mov	r4,#0x00
   00BE 7D 00         [12]  816 	mov	r5,#0x00
   00C0                     817 00103$:
                            818 ;	src/glcd.c:57: DisplayGLCD( 0x00 );
   00C0 75 82 00      [24]  819 	mov	dpl,#0x00
   00C3 C0 07         [24]  820 	push	ar7
   00C5 C0 06         [24]  821 	push	ar6
   00C7 C0 05         [24]  822 	push	ar5
   00C9 C0 04         [24]  823 	push	ar4
   00CB 12r00r61      [24]  824 	lcall	_DisplayGLCD
   00CE D0 04         [24]  825 	pop	ar4
   00D0 D0 05         [24]  826 	pop	ar5
   00D2 D0 06         [24]  827 	pop	ar6
   00D4 D0 07         [24]  828 	pop	ar7
                            829 ;	src/glcd.c:56: for( j=0;j<64; j++){
   00D6 0C            [12]  830 	inc	r4
   00D7 BC 00 01      [24]  831 	cjne	r4,#0x00,00120$
   00DA 0D            [12]  832 	inc	r5
   00DB                     833 00120$:
   00DB C3            [12]  834 	clr	c
   00DC EC            [12]  835 	mov	a,r4
   00DD 94 40         [12]  836 	subb	a,#0x40
   00DF ED            [12]  837 	mov	a,r5
   00E0 64 80         [12]  838 	xrl	a,#0x80
   00E2 94 80         [12]  839 	subb	a,#0x80
   00E4 40 DA         [24]  840 	jc	00103$
                            841 ;	src/glcd.c:53: for( i=PAGE0; i<=PAGE7; i++){
   00E6 0E            [12]  842 	inc	r6
   00E7 BE 00 01      [24]  843 	cjne	r6,#0x00,00122$
   00EA 0F            [12]  844 	inc	r7
   00EB                     845 00122$:
   00EB C3            [12]  846 	clr	c
   00EC 74 BF         [12]  847 	mov	a,#0xBF
   00EE 9E            [12]  848 	subb	a,r6
   00EF E4            [12]  849 	clr	a
   00F0 64 80         [12]  850 	xrl	a,#0x80
   00F2 8F F0         [24]  851 	mov	b,r7
   00F4 63 F0 80      [24]  852 	xrl	b,#0x80
   00F7 95 F0         [12]  853 	subb	a,b
   00F9 50 A8         [24]  854 	jnc	00105$
   00FB 22            [24]  855 	ret
                            856 ;------------------------------------------------------------
                            857 ;Allocation info for local variables in function 'writeLine'
                            858 ;------------------------------------------------------------
                            859 ;cStr                      Allocated to registers 
                            860 ;------------------------------------------------------------
                            861 ;	src/glcd.c:62: void writeLine( unsigned char *cStr){
                            862 ;	-----------------------------------------
                            863 ;	 function writeLine
                            864 ;	-----------------------------------------
   00FC                     865 _writeLine:
   00FC AD 82         [24]  866 	mov	r5,dpl
   00FE AE 83         [24]  867 	mov	r6,dph
   0100 AF F0         [24]  868 	mov	r7,b
                            869 ;	src/glcd.c:63: while( *cStr )
   0102                     870 00101$:
   0102 8D 82         [24]  871 	mov	dpl,r5
   0104 8E 83         [24]  872 	mov	dph,r6
   0106 8F F0         [24]  873 	mov	b,r7
   0108 12r00r00      [24]  874 	lcall	__gptrget
   010B FC            [12]  875 	mov	r4,a
   010C 60 18         [24]  876 	jz	00103$
                            877 ;	src/glcd.c:65: writeLetter( *cStr++ );		
   010E 8C 82         [24]  878 	mov	dpl,r4
   0110 0D            [12]  879 	inc	r5
   0111 BD 00 01      [24]  880 	cjne	r5,#0x00,00114$
   0114 0E            [12]  881 	inc	r6
   0115                     882 00114$:
   0115 C0 07         [24]  883 	push	ar7
   0117 C0 06         [24]  884 	push	ar6
   0119 C0 05         [24]  885 	push	ar5
   011B 12r01r59      [24]  886 	lcall	_writeLetter
   011E D0 05         [24]  887 	pop	ar5
   0120 D0 06         [24]  888 	pop	ar6
   0122 D0 07         [24]  889 	pop	ar7
   0124 80 DC         [24]  890 	sjmp	00101$
   0126                     891 00103$:
                            892 ;	src/glcd.c:67: return;
   0126 22            [24]  893 	ret
                            894 ;------------------------------------------------------------
                            895 ;Allocation info for local variables in function 'printDigit'
                            896 ;------------------------------------------------------------
                            897 ;nInteger                  Allocated to registers r7 
                            898 ;ci                        Allocated to registers r5 
                            899 ;------------------------------------------------------------
                            900 ;	src/glcd.c:70: void printDigit( unsigned char nInteger){
                            901 ;	-----------------------------------------
                            902 ;	 function printDigit
                            903 ;	-----------------------------------------
   0127                     904 _printDigit:
                            905 ;	src/glcd.c:72: for( ci=0; ci<4 ; ci++){
   0127 E5 82         [12]  906 	mov	a,dpl
   0129 75 F0 04      [24]  907 	mov	b,#0x04
   012C A4            [48]  908 	mul	ab
   012D 24r00         [12]  909 	add	a,#_glcdNumberSystemFont
   012F FE            [12]  910 	mov	r6,a
   0130 74s00         [12]  911 	mov	a,#(_glcdNumberSystemFont >> 8)
   0132 35 F0         [12]  912 	addc	a,b
   0134 FF            [12]  913 	mov	r7,a
   0135 7D 00         [12]  914 	mov	r5,#0x00
   0137                     915 00102$:
                            916 ;	src/glcd.c:73: DisplayGLCD( glcdNumberSystemFont[nInteger][ci] );
   0137 ED            [12]  917 	mov	a,r5
   0138 2E            [12]  918 	add	a,r6
   0139 F5 82         [12]  919 	mov	dpl,a
   013B E4            [12]  920 	clr	a
   013C 3F            [12]  921 	addc	a,r7
   013D F5 83         [12]  922 	mov	dph,a
   013F E4            [12]  923 	clr	a
   0140 93            [24]  924 	movc	a,@a+dptr
   0141 F5 82         [12]  925 	mov	dpl,a
   0143 C0 07         [24]  926 	push	ar7
   0145 C0 06         [24]  927 	push	ar6
   0147 C0 05         [24]  928 	push	ar5
   0149 12r00r61      [24]  929 	lcall	_DisplayGLCD
   014C D0 05         [24]  930 	pop	ar5
   014E D0 06         [24]  931 	pop	ar6
   0150 D0 07         [24]  932 	pop	ar7
                            933 ;	src/glcd.c:72: for( ci=0; ci<4 ; ci++){
   0152 0D            [12]  934 	inc	r5
   0153 BD 04 00      [24]  935 	cjne	r5,#0x04,00110$
   0156                     936 00110$:
   0156 40 DF         [24]  937 	jc	00102$
   0158 22            [24]  938 	ret
                            939 ;------------------------------------------------------------
                            940 ;Allocation info for local variables in function 'writeLetter'
                            941 ;------------------------------------------------------------
                            942 ;cLetter                   Allocated to registers r7 
                            943 ;i                         Allocated to registers r6 
                            944 ;------------------------------------------------------------
                            945 ;	src/glcd.c:77: void writeLetter( char cLetter){
                            946 ;	-----------------------------------------
                            947 ;	 function writeLetter
                            948 ;	-----------------------------------------
   0159                     949 _writeLetter:
   0159 AF 82         [24]  950 	mov	r7,dpl
                            951 ;	src/glcd.c:80: if( cLetter >='A' && cLetter <='Z'){	//for capital case letters
   015B C3            [12]  952 	clr	c
   015C EF            [12]  953 	mov	a,r7
   015D 64 80         [12]  954 	xrl	a,#0x80
   015F 94 C1         [12]  955 	subb	a,#0xc1
   0161 40 56         [24]  956 	jc	00113$
   0163 74 DA         [12]  957 	mov	a,#(0x5A ^ 0x80)
   0165 8F F0         [24]  958 	mov	b,r7
   0167 63 F0 80      [24]  959 	xrl	b,#0x80
   016A 95 F0         [12]  960 	subb	a,b
   016C 40 4B         [24]  961 	jc	00113$
                            962 ;	src/glcd.c:81: for(i=0;i<7;i++)
   016E 7E 00         [12]  963 	mov	r6,#0x00
   0170                     964 00116$:
                            965 ;	src/glcd.c:82: DisplayGLCD( glcdCharSystemFont[(int)cLetter - 'A'][i]);
   0170 EF            [12]  966 	mov	a,r7
   0171 FC            [12]  967 	mov	r4,a
   0172 33            [12]  968 	rlc	a
   0173 95 E0         [12]  969 	subb	a,acc
   0175 FD            [12]  970 	mov	r5,a
   0176 EC            [12]  971 	mov	a,r4
   0177 24 BF         [12]  972 	add	a,#0xBF
   0179 C2 D5         [12]  973 	clr	F0
   017B 75 F0 07      [24]  974 	mov	b,#0x07
   017E 30 E7 04      [24]  975 	jnb	acc.7,00168$
   0181 B2 D5         [12]  976 	cpl	F0
   0183 F4            [12]  977 	cpl	a
   0184 04            [12]  978 	inc	a
   0185                     979 00168$:
   0185 A4            [48]  980 	mul	ab
   0186 30 D5 0A      [24]  981 	jnb	F0,00169$
   0189 F4            [12]  982 	cpl	a
   018A 24 01         [12]  983 	add	a,#0x01
   018C C5 F0         [12]  984 	xch	a,b
   018E F4            [12]  985 	cpl	a
   018F 34 00         [12]  986 	addc	a,#0x00
   0191 C5 F0         [12]  987 	xch	a,b
   0193                     988 00169$:
   0193 24r28         [12]  989 	add	a,#_glcdCharSystemFont
   0195 FC            [12]  990 	mov	r4,a
   0196 74s00         [12]  991 	mov	a,#(_glcdCharSystemFont >> 8)
   0198 35 F0         [12]  992 	addc	a,b
   019A FD            [12]  993 	mov	r5,a
   019B EE            [12]  994 	mov	a,r6
   019C 2C            [12]  995 	add	a,r4
   019D F5 82         [12]  996 	mov	dpl,a
   019F E4            [12]  997 	clr	a
   01A0 3D            [12]  998 	addc	a,r5
   01A1 F5 83         [12]  999 	mov	dph,a
   01A3 E4            [12] 1000 	clr	a
   01A4 93            [24] 1001 	movc	a,@a+dptr
   01A5 F5 82         [12] 1002 	mov	dpl,a
   01A7 C0 07         [24] 1003 	push	ar7
   01A9 C0 06         [24] 1004 	push	ar6
   01AB 12r00r61      [24] 1005 	lcall	_DisplayGLCD
   01AE D0 06         [24] 1006 	pop	ar6
   01B0 D0 07         [24] 1007 	pop	ar7
                           1008 ;	src/glcd.c:81: for(i=0;i<7;i++)
   01B2 0E            [12] 1009 	inc	r6
   01B3 BE 07 00      [24] 1010 	cjne	r6,#0x07,00170$
   01B6                    1011 00170$:
   01B6 40 B8         [24] 1012 	jc	00116$
   01B8 22            [24] 1013 	ret
   01B9                    1014 00113$:
                           1015 ;	src/glcd.c:84: else if( cLetter>=97 && cLetter<=122)
   01B9 C3            [12] 1016 	clr	c
   01BA EF            [12] 1017 	mov	a,r7
   01BB 64 80         [12] 1018 	xrl	a,#0x80
   01BD 94 E1         [12] 1019 	subb	a,#0xe1
   01BF 40 56         [24] 1020 	jc	00109$
   01C1 74 FA         [12] 1021 	mov	a,#(0x7A ^ 0x80)
   01C3 8F F0         [24] 1022 	mov	b,r7
   01C5 63 F0 80      [24] 1023 	xrl	b,#0x80
   01C8 95 F0         [12] 1024 	subb	a,b
   01CA 40 4B         [24] 1025 	jc	00109$
                           1026 ;	src/glcd.c:86: for(i=0;i<7;i++)
   01CC 7E 00         [12] 1027 	mov	r6,#0x00
   01CE                    1028 00118$:
                           1029 ;	src/glcd.c:87: DisplayGLCD( glcdSmallCharSystemFont[(int)cLetter - 'a'][i]);
   01CE EF            [12] 1030 	mov	a,r7
   01CF FC            [12] 1031 	mov	r4,a
   01D0 33            [12] 1032 	rlc	a
   01D1 95 E0         [12] 1033 	subb	a,acc
   01D3 FD            [12] 1034 	mov	r5,a
   01D4 EC            [12] 1035 	mov	a,r4
   01D5 24 9F         [12] 1036 	add	a,#0x9F
   01D7 C2 D5         [12] 1037 	clr	F0
   01D9 75 F0 07      [24] 1038 	mov	b,#0x07
   01DC 30 E7 04      [24] 1039 	jnb	acc.7,00174$
   01DF B2 D5         [12] 1040 	cpl	F0
   01E1 F4            [12] 1041 	cpl	a
   01E2 04            [12] 1042 	inc	a
   01E3                    1043 00174$:
   01E3 A4            [48] 1044 	mul	ab
   01E4 30 D5 0A      [24] 1045 	jnb	F0,00175$
   01E7 F4            [12] 1046 	cpl	a
   01E8 24 01         [12] 1047 	add	a,#0x01
   01EA C5 F0         [12] 1048 	xch	a,b
   01EC F4            [12] 1049 	cpl	a
   01ED 34 00         [12] 1050 	addc	a,#0x00
   01EF C5 F0         [12] 1051 	xch	a,b
   01F1                    1052 00175$:
   01F1 24rDE         [12] 1053 	add	a,#_glcdSmallCharSystemFont
   01F3 FC            [12] 1054 	mov	r4,a
   01F4 74s00         [12] 1055 	mov	a,#(_glcdSmallCharSystemFont >> 8)
   01F6 35 F0         [12] 1056 	addc	a,b
   01F8 FD            [12] 1057 	mov	r5,a
   01F9 EE            [12] 1058 	mov	a,r6
   01FA 2C            [12] 1059 	add	a,r4
   01FB F5 82         [12] 1060 	mov	dpl,a
   01FD E4            [12] 1061 	clr	a
   01FE 3D            [12] 1062 	addc	a,r5
   01FF F5 83         [12] 1063 	mov	dph,a
   0201 E4            [12] 1064 	clr	a
   0202 93            [24] 1065 	movc	a,@a+dptr
   0203 F5 82         [12] 1066 	mov	dpl,a
   0205 C0 07         [24] 1067 	push	ar7
   0207 C0 06         [24] 1068 	push	ar6
   0209 12r00r61      [24] 1069 	lcall	_DisplayGLCD
   020C D0 06         [24] 1070 	pop	ar6
   020E D0 07         [24] 1071 	pop	ar7
                           1072 ;	src/glcd.c:86: for(i=0;i<7;i++)
   0210 0E            [12] 1073 	inc	r6
   0211 BE 07 00      [24] 1074 	cjne	r6,#0x07,00176$
   0214                    1075 00176$:
   0214 40 B8         [24] 1076 	jc	00118$
   0216 22            [24] 1077 	ret
   0217                    1078 00109$:
                           1079 ;	src/glcd.c:89: else if( cLetter == ' ' ){
   0217 BF 20 13      [24] 1080 	cjne	r7,#0x20,00137$
                           1081 ;	src/glcd.c:90: for(i=0;i<7;i++)
   021A 7F 00         [12] 1082 	mov	r7,#0x00
   021C                    1083 00120$:
                           1084 ;	src/glcd.c:91: DisplayGLCD( 0x00 );
   021C 75 82 00      [24] 1085 	mov	dpl,#0x00
   021F C0 07         [24] 1086 	push	ar7
   0221 12r00r61      [24] 1087 	lcall	_DisplayGLCD
   0224 D0 07         [24] 1088 	pop	ar7
                           1089 ;	src/glcd.c:90: for(i=0;i<7;i++)
   0226 0F            [12] 1090 	inc	r7
   0227 BF 07 00      [24] 1091 	cjne	r7,#0x07,00180$
   022A                    1092 00180$:
   022A 40 F0         [24] 1093 	jc	00120$
                           1094 ;	src/glcd.c:94: for( i = 0; i < 7; i ++ ){
   022C 22            [24] 1095 	ret
   022D                    1096 00137$:
   022D 7F 00         [12] 1097 	mov	r7,#0x00
   022F                    1098 00122$:
                           1099 ;	src/glcd.c:95: DisplayGLCD( glcdSmallCharSystemFont[26][i] );	// printing ':' in '--" format. need to check that.
   022F EF            [12] 1100 	mov	a,r7
   0230 90r01r94      [24] 1101 	mov	dptr,#(_glcdSmallCharSystemFont + 0x00b6)
   0233 93            [24] 1102 	movc	a,@a+dptr
   0234 F5 82         [12] 1103 	mov	dpl,a
   0236 C0 07         [24] 1104 	push	ar7
   0238 12r00r61      [24] 1105 	lcall	_DisplayGLCD
   023B D0 07         [24] 1106 	pop	ar7
                           1107 ;	src/glcd.c:94: for( i = 0; i < 7; i ++ ){
   023D 0F            [12] 1108 	inc	r7
   023E BF 07 00      [24] 1109 	cjne	r7,#0x07,00182$
   0241                    1110 00182$:
   0241 40 EC         [24] 1111 	jc	00122$
   0243 22            [24] 1112 	ret
                           1113 ;------------------------------------------------------------
                           1114 ;Allocation info for local variables in function 'printNumber'
                           1115 ;------------------------------------------------------------
                           1116 ;lNumber                   Allocated with name '_printNumber_lNumber_1_44'
                           1117 ;cChar                     Allocated with name '_printNumber_cChar_1_45'
                           1118 ;cInteger                  Allocated with name '_printNumber_cInteger_1_45'
                           1119 ;------------------------------------------------------------
                           1120 ;	src/glcd.c:100: void printNumber( long lNumber){
                           1121 ;	-----------------------------------------
                           1122 ;	 function printNumber
                           1123 ;	-----------------------------------------
   0244                    1124 _printNumber:
   0244 85 82*01      [24] 1125 	mov	_printNumber_lNumber_1_44,dpl
   0247 85 83*02      [24] 1126 	mov	(_printNumber_lNumber_1_44 + 1),dph
   024A 85 F0*03      [24] 1127 	mov	(_printNumber_lNumber_1_44 + 2),b
   024D F5*04         [12] 1128 	mov	(_printNumber_lNumber_1_44 + 3),a
                           1129 ;	src/glcd.c:102: char cInteger[10] = { 0 };
   024F 75*06 00      [24] 1130 	mov	_printNumber_cInteger_1_45,#0x00
   0252 75*07 00      [24] 1131 	mov	(_printNumber_cInteger_1_45 + 0x0001),#0x00
   0255 75*08 00      [24] 1132 	mov	(_printNumber_cInteger_1_45 + 0x0002),#0x00
   0258 75*09 00      [24] 1133 	mov	(_printNumber_cInteger_1_45 + 0x0003),#0x00
   025B 75*0A 00      [24] 1134 	mov	(_printNumber_cInteger_1_45 + 0x0004),#0x00
   025E 75*0B 00      [24] 1135 	mov	(_printNumber_cInteger_1_45 + 0x0005),#0x00
   0261 75*0C 00      [24] 1136 	mov	(_printNumber_cInteger_1_45 + 0x0006),#0x00
                           1137 ;	src/glcd.c:104: if( lNumber == 0)
   0264 E4            [12] 1138 	clr	a
   0265 F5*0D         [12] 1139 	mov	(_printNumber_cInteger_1_45 + 0x0007),a
   0267 F5*0E         [12] 1140 	mov	(_printNumber_cInteger_1_45 + 0x0008),a
   0269 F5*0F         [12] 1141 	mov	(_printNumber_cInteger_1_45 + 0x0009),a
   026B E5*01         [12] 1142 	mov	a,_printNumber_lNumber_1_44
   026D 45*02         [12] 1143 	orl	a,(_printNumber_lNumber_1_44 + 1)
   026F 45*03         [12] 1144 	orl	a,(_printNumber_lNumber_1_44 + 2)
   0271 45*04         [12] 1145 	orl	a,(_printNumber_lNumber_1_44 + 3)
                           1146 ;	src/glcd.c:106: printDigit( 0 );
   0273 70 05         [24] 1147 	jnz	00115$
   0275 F5 82         [12] 1148 	mov	dpl,a
                           1149 ;	src/glcd.c:107: return;
   0277 02r01r27      [24] 1150 	ljmp	_printDigit
                           1151 ;	src/glcd.c:111: while( lNumber > 0){
   027A                    1152 00115$:
   027A 75*05 00      [24] 1153 	mov	_printNumber_cChar_1_45,#0x00
   027D                    1154 00101$:
   027D C3            [12] 1155 	clr	c
   027E E4            [12] 1156 	clr	a
   027F 95*01         [12] 1157 	subb	a,_printNumber_lNumber_1_44
   0281 E4            [12] 1158 	clr	a
   0282 95*02         [12] 1159 	subb	a,(_printNumber_lNumber_1_44 + 1)
   0284 E4            [12] 1160 	clr	a
   0285 95*03         [12] 1161 	subb	a,(_printNumber_lNumber_1_44 + 2)
   0287 E4            [12] 1162 	clr	a
   0288 64 80         [12] 1163 	xrl	a,#0x80
   028A 85*04 F0      [24] 1164 	mov	b,(_printNumber_lNumber_1_44 + 3)
   028D 63 F0 80      [24] 1165 	xrl	b,#0x80
   0290 95 F0         [12] 1166 	subb	a,b
   0292 50 4D         [24] 1167 	jnc	00103$
                           1168 ;	src/glcd.c:112: cInteger[cChar++]=( lNumber%10) ;
   0294 AA*05         [24] 1169 	mov	r2,_printNumber_cChar_1_45
   0296 05*05         [12] 1170 	inc	_printNumber_cChar_1_45
   0298 EA            [12] 1171 	mov	a,r2
   0299 24r06         [12] 1172 	add	a,#_printNumber_cInteger_1_45
   029B F9            [12] 1173 	mov	r1,a
   029C 75*00 0A      [24] 1174 	mov	__modslong_PARM_2,#0x0A
   029F E4            [12] 1175 	clr	a
   02A0 F5*01         [12] 1176 	mov	(__modslong_PARM_2 + 1),a
   02A2 F5*02         [12] 1177 	mov	(__modslong_PARM_2 + 2),a
   02A4 F5*03         [12] 1178 	mov	(__modslong_PARM_2 + 3),a
   02A6 85*01 82      [24] 1179 	mov	dpl,_printNumber_lNumber_1_44
   02A9 85*02 83      [24] 1180 	mov	dph,(_printNumber_lNumber_1_44 + 1)
   02AC 85*03 F0      [24] 1181 	mov	b,(_printNumber_lNumber_1_44 + 2)
   02AF E5*04         [12] 1182 	mov	a,(_printNumber_lNumber_1_44 + 3)
   02B1 C0 01         [24] 1183 	push	ar1
   02B3 12r00r00      [24] 1184 	lcall	__modslong
   02B6 AA 82         [24] 1185 	mov	r2,dpl
   02B8 D0 01         [24] 1186 	pop	ar1
   02BA A7 02         [24] 1187 	mov	@r1,ar2
                           1188 ;	src/glcd.c:113: lNumber /= 10;
   02BC 75*00 0A      [24] 1189 	mov	__divslong_PARM_2,#0x0A
   02BF E4            [12] 1190 	clr	a
   02C0 F5*01         [12] 1191 	mov	(__divslong_PARM_2 + 1),a
   02C2 F5*02         [12] 1192 	mov	(__divslong_PARM_2 + 2),a
   02C4 F5*03         [12] 1193 	mov	(__divslong_PARM_2 + 3),a
   02C6 85*01 82      [24] 1194 	mov	dpl,_printNumber_lNumber_1_44
   02C9 85*02 83      [24] 1195 	mov	dph,(_printNumber_lNumber_1_44 + 1)
   02CC 85*03 F0      [24] 1196 	mov	b,(_printNumber_lNumber_1_44 + 2)
   02CF E5*04         [12] 1197 	mov	a,(_printNumber_lNumber_1_44 + 3)
   02D1 12r00r00      [24] 1198 	lcall	__divslong
   02D4 85 82*01      [24] 1199 	mov	_printNumber_lNumber_1_44,dpl
   02D7 85 83*02      [24] 1200 	mov	(_printNumber_lNumber_1_44 + 1),dph
   02DA 85 F0*03      [24] 1201 	mov	(_printNumber_lNumber_1_44 + 2),b
   02DD F5*04         [12] 1202 	mov	(_printNumber_lNumber_1_44 + 3),a
   02DF 80 9C         [24] 1203 	sjmp	00101$
   02E1                    1204 00103$:
                           1205 ;	src/glcd.c:115: for( --cChar; cChar>= 0 ; cChar--){
   02E1 E5*05         [12] 1206 	mov	a,_printNumber_cChar_1_45
   02E3 14            [12] 1207 	dec	a
   02E4 FF            [12] 1208 	mov	r7,a
   02E5                    1209 00109$:
   02E5 EF            [12] 1210 	mov	a,r7
   02E6 20 E7 20      [24] 1211 	jb	acc.7,00111$
                           1212 ;	src/glcd.c:116: DisplayGLCD( 0x00 );
   02E9 75 82 00      [24] 1213 	mov	dpl,#0x00
   02EC C0 07         [24] 1214 	push	ar7
   02EE 12r00r61      [24] 1215 	lcall	_DisplayGLCD
   02F1 D0 07         [24] 1216 	pop	ar7
                           1217 ;	src/glcd.c:117: printDigit( cInteger[cChar] );			
   02F3 EF            [12] 1218 	mov	a,r7
   02F4 24r06         [12] 1219 	add	a,#_printNumber_cInteger_1_45
   02F6 F9            [12] 1220 	mov	r1,a
   02F7 87 82         [24] 1221 	mov	dpl,@r1
   02F9 C0 07         [24] 1222 	push	ar7
   02FB 12r01r27      [24] 1223 	lcall	_printDigit
                           1224 ;	src/glcd.c:118: DisplayGLCD( 0x00 );
   02FE 75 82 00      [24] 1225 	mov	dpl,#0x00
   0301 12r00r61      [24] 1226 	lcall	_DisplayGLCD
   0304 D0 07         [24] 1227 	pop	ar7
                           1228 ;	src/glcd.c:115: for( --cChar; cChar>= 0 ; cChar--){
   0306 1F            [12] 1229 	dec	r7
   0307 80 DC         [24] 1230 	sjmp	00109$
   0309                    1231 00111$:
   0309 22            [24] 1232 	ret
                           1233 ;------------------------------------------------------------
                           1234 ;Allocation info for local variables in function 'setGLCDCursor'
                           1235 ;------------------------------------------------------------
                           1236 ;y                         Allocated with name '_setGLCDCursor_PARM_2'
                           1237 ;x                         Allocated to registers r6 r7 
                           1238 ;------------------------------------------------------------
                           1239 ;	src/glcd.c:124: void setGLCDCursor( int x, int y)
                           1240 ;	-----------------------------------------
                           1241 ;	 function setGLCDCursor
                           1242 ;	-----------------------------------------
   030A                    1243 _setGLCDCursor:
   030A AE 82         [24] 1244 	mov	r6,dpl
                           1245 ;	src/glcd.c:126: if( x>=0 && x<=63 ){
   030C E5 83         [12] 1246 	mov	a,dph
   030E FF            [12] 1247 	mov	r7,a
   030F 20 E7 38      [24] 1248 	jb	acc.7,00105$
   0312 C3            [12] 1249 	clr	c
   0313 74 3F         [12] 1250 	mov	a,#0x3F
   0315 9E            [12] 1251 	subb	a,r6
   0316 E4            [12] 1252 	clr	a
   0317 64 80         [12] 1253 	xrl	a,#0x80
   0319 8F F0         [24] 1254 	mov	b,r7
   031B 63 F0 80      [24] 1255 	xrl	b,#0x80
   031E 95 F0         [12] 1256 	subb	a,b
   0320 40 28         [24] 1257 	jc	00105$
                           1258 ;	src/glcd.c:127: chipSelectGLCD( 1 );
   0322 75 82 01      [24] 1259 	mov	dpl,#0x01
   0325 C0 07         [24] 1260 	push	ar7
   0327 C0 06         [24] 1261 	push	ar6
   0329 12r00r71      [24] 1262 	lcall	_chipSelectGLCD
                           1263 ;	src/glcd.c:128: commandGLCD( PAGE0+ y, 1 ); //page n base address...
   032C AD*10         [24] 1264 	mov	r5,_setGLCDCursor_PARM_2
   032E 74 B8         [12] 1265 	mov	a,#0xB8
   0330 2D            [12] 1266 	add	a,r5
   0331 F5 82         [12] 1267 	mov	dpl,a
   0333 75*00 01      [24] 1268 	mov	_commandGLCD_PARM_2,#0x01
   0336 12r00r4E      [24] 1269 	lcall	_commandGLCD
   0339 D0 06         [24] 1270 	pop	ar6
   033B D0 07         [24] 1271 	pop	ar7
                           1272 ;	src/glcd.c:129: commandGLCD( COLUMN_ADDRESS + x, 1 );	//column base address.
   033D 8E 05         [24] 1273 	mov	ar5,r6
   033F 74 40         [12] 1274 	mov	a,#0x40
   0341 2D            [12] 1275 	add	a,r5
   0342 F5 82         [12] 1276 	mov	dpl,a
   0344 75*00 01      [24] 1277 	mov	_commandGLCD_PARM_2,#0x01
   0347 02r00r4E      [24] 1278 	ljmp	_commandGLCD
   034A                    1279 00105$:
                           1280 ;	src/glcd.c:131: else if ( x>63 && x <128 ){
   034A C3            [12] 1281 	clr	c
   034B 74 3F         [12] 1282 	mov	a,#0x3F
   034D 9E            [12] 1283 	subb	a,r6
   034E E4            [12] 1284 	clr	a
   034F 64 80         [12] 1285 	xrl	a,#0x80
   0351 8F F0         [24] 1286 	mov	b,r7
   0353 63 F0 80      [24] 1287 	xrl	b,#0x80
   0356 95 F0         [12] 1288 	subb	a,b
   0358 50 30         [24] 1289 	jnc	00108$
   035A C3            [12] 1290 	clr	c
   035B EE            [12] 1291 	mov	a,r6
   035C 94 80         [12] 1292 	subb	a,#0x80
   035E EF            [12] 1293 	mov	a,r7
   035F 64 80         [12] 1294 	xrl	a,#0x80
   0361 94 80         [12] 1295 	subb	a,#0x80
   0363 50 25         [24] 1296 	jnc	00108$
                           1297 ;	src/glcd.c:132: chipSelectGLCD( 2 );
   0365 75 82 02      [24] 1298 	mov	dpl,#0x02
   0368 C0 07         [24] 1299 	push	ar7
   036A C0 06         [24] 1300 	push	ar6
   036C 12r00r71      [24] 1301 	lcall	_chipSelectGLCD
                           1302 ;	src/glcd.c:133: commandGLCD( PAGE0+ y, 2 ); //page n base address...
   036F AD*10         [24] 1303 	mov	r5,_setGLCDCursor_PARM_2
   0371 74 B8         [12] 1304 	mov	a,#0xB8
   0373 2D            [12] 1305 	add	a,r5
   0374 F5 82         [12] 1306 	mov	dpl,a
   0376 75*00 02      [24] 1307 	mov	_commandGLCD_PARM_2,#0x02
   0379 12r00r4E      [24] 1308 	lcall	_commandGLCD
   037C D0 06         [24] 1309 	pop	ar6
   037E D0 07         [24] 1310 	pop	ar7
                           1311 ;	src/glcd.c:134: commandGLCD( COLUMN_ADDRESS + (x - 63), 2 );	//column base address.
   0380 EE            [12] 1312 	mov	a,r6
   0381 04            [12] 1313 	inc	a
   0382 F5 82         [12] 1314 	mov	dpl,a
   0384 75*00 02      [24] 1315 	mov	_commandGLCD_PARM_2,#0x02
   0387 02r00r4E      [24] 1316 	ljmp	_commandGLCD
   038A                    1317 00108$:
   038A 22            [24] 1318 	ret
                           1319 ;------------------------------------------------------------
                           1320 ;Allocation info for local variables in function 'splashImage'
                           1321 ;------------------------------------------------------------
                           1322 ;i                         Allocated to registers r4 
                           1323 ;pg                        Allocated to registers r5 
                           1324 ;j                         Allocated to registers r6 r7 
                           1325 ;------------------------------------------------------------
                           1326 ;	src/glcd.c:139: void splashImage( ){
                           1327 ;	-----------------------------------------
                           1328 ;	 function splashImage
                           1329 ;	-----------------------------------------
   038B                    1330 _splashImage:
                           1331 ;	src/glcd.c:141: int j=0;
   038B 7E 00         [12] 1332 	mov	r6,#0x00
   038D 7F 00         [12] 1333 	mov	r7,#0x00
                           1334 ;	src/glcd.c:142: chipSelectGLCD( 1 );
   038F 75 82 01      [24] 1335 	mov	dpl,#0x01
   0392 C0 07         [24] 1336 	push	ar7
   0394 C0 06         [24] 1337 	push	ar6
   0396 12r00r71      [24] 1338 	lcall	_chipSelectGLCD
                           1339 ;	src/glcd.c:143: setGLCDCursor( 0, 0 );
   0399 E4            [12] 1340 	clr	a
   039A F5*10         [12] 1341 	mov	_setGLCDCursor_PARM_2,a
   039C F5*11         [12] 1342 	mov	(_setGLCDCursor_PARM_2 + 1),a
   039E F5 82         [12] 1343 	mov	dpl,a
   03A0 F5 83         [12] 1344 	mov	dph,a
   03A2 12r03r0A      [24] 1345 	lcall	_setGLCDCursor
   03A5 D0 06         [24] 1346 	pop	ar6
   03A7 D0 07         [24] 1347 	pop	ar7
                           1348 ;	src/glcd.c:144: for(pg=0;pg<2;pg++)
   03A9 7D 00         [12] 1349 	mov	r5,#0x00
                           1350 ;	src/glcd.c:146: for(i=0;i<128;i++)
   03AB                    1351 00120$:
   03AB 7C 00         [12] 1352 	mov	r4,#0x00
   03AD 8E 02         [24] 1353 	mov	ar2,r6
   03AF 8F 03         [24] 1354 	mov	ar3,r7
   03B1                    1355 00109$:
                           1356 ;	src/glcd.c:149: DisplayGLCD(welcomeScreenImage[j]);	
   03B1 EA            [12] 1357 	mov	a,r2
   03B2 24r9B         [12] 1358 	add	a,#_welcomeScreenImage
   03B4 F5 82         [12] 1359 	mov	dpl,a
   03B6 EB            [12] 1360 	mov	a,r3
   03B7 34s01         [12] 1361 	addc	a,#(_welcomeScreenImage >> 8)
   03B9 F5 83         [12] 1362 	mov	dph,a
   03BB E4            [12] 1363 	clr	a
   03BC 93            [24] 1364 	movc	a,@a+dptr
   03BD F5 82         [12] 1365 	mov	dpl,a
   03BF C0 05         [24] 1366 	push	ar5
   03C1 C0 04         [24] 1367 	push	ar4
   03C3 C0 03         [24] 1368 	push	ar3
   03C5 C0 02         [24] 1369 	push	ar2
   03C7 12r00r61      [24] 1370 	lcall	_DisplayGLCD
   03CA D0 02         [24] 1371 	pop	ar2
   03CC D0 03         [24] 1372 	pop	ar3
   03CE D0 04         [24] 1373 	pop	ar4
   03D0 D0 05         [24] 1374 	pop	ar5
                           1375 ;	src/glcd.c:150: j++;
   03D2 0A            [12] 1376 	inc	r2
   03D3 BA 00 01      [24] 1377 	cjne	r2,#0x00,00150$
   03D6 0B            [12] 1378 	inc	r3
   03D7                    1379 00150$:
                           1380 ;	src/glcd.c:151: if( i >= 63 ){
   03D7 BC 3F 00      [24] 1381 	cjne	r4,#0x3F,00151$
   03DA                    1382 00151$:
   03DA 40 20         [24] 1383 	jc	00110$
                           1384 ;	src/glcd.c:153: setGLCDCursor( i, pg );
   03DC 8C 00         [24] 1385 	mov	ar0,r4
   03DE 79 00         [12] 1386 	mov	r1,#0x00
   03E0 8D*10         [24] 1387 	mov	_setGLCDCursor_PARM_2,r5
   03E2 75*11 00      [24] 1388 	mov	(_setGLCDCursor_PARM_2 + 1),#0x00
   03E5 88 82         [24] 1389 	mov	dpl,r0
   03E7 89 83         [24] 1390 	mov	dph,r1
   03E9 C0 05         [24] 1391 	push	ar5
   03EB C0 04         [24] 1392 	push	ar4
   03ED C0 03         [24] 1393 	push	ar3
   03EF C0 02         [24] 1394 	push	ar2
   03F1 12r03r0A      [24] 1395 	lcall	_setGLCDCursor
   03F4 D0 02         [24] 1396 	pop	ar2
   03F6 D0 03         [24] 1397 	pop	ar3
   03F8 D0 04         [24] 1398 	pop	ar4
   03FA D0 05         [24] 1399 	pop	ar5
   03FC                    1400 00110$:
                           1401 ;	src/glcd.c:146: for(i=0;i<128;i++)
   03FC 0C            [12] 1402 	inc	r4
   03FD BC 80 00      [24] 1403 	cjne	r4,#0x80,00153$
   0400                    1404 00153$:
   0400 40 AF         [24] 1405 	jc	00109$
                           1406 ;	src/glcd.c:156: chipSelectGLCD ( 1 );
   0402 8A 06         [24] 1407 	mov	ar6,r2
   0404 8B 07         [24] 1408 	mov	ar7,r3
   0406 75 82 01      [24] 1409 	mov	dpl,#0x01
   0409 C0 07         [24] 1410 	push	ar7
   040B C0 06         [24] 1411 	push	ar6
   040D C0 05         [24] 1412 	push	ar5
   040F 12r00r71      [24] 1413 	lcall	_chipSelectGLCD
   0412 D0 05         [24] 1414 	pop	ar5
                           1415 ;	src/glcd.c:157: setGLCDCursor( 0, pg + 1 );		
   0414 8D 03         [24] 1416 	mov	ar3,r5
   0416 7C 00         [12] 1417 	mov	r4,#0x00
   0418 74 01         [12] 1418 	mov	a,#0x01
   041A 2B            [12] 1419 	add	a,r3
   041B F5*10         [12] 1420 	mov	_setGLCDCursor_PARM_2,a
   041D E4            [12] 1421 	clr	a
   041E 3C            [12] 1422 	addc	a,r4
   041F F5*11         [12] 1423 	mov	(_setGLCDCursor_PARM_2 + 1),a
   0421 90 00 00      [24] 1424 	mov	dptr,#0x0000
   0424 C0 05         [24] 1425 	push	ar5
   0426 12r03r0A      [24] 1426 	lcall	_setGLCDCursor
   0429 D0 05         [24] 1427 	pop	ar5
   042B D0 06         [24] 1428 	pop	ar6
   042D D0 07         [24] 1429 	pop	ar7
                           1430 ;	src/glcd.c:144: for(pg=0;pg<2;pg++)
   042F 0D            [12] 1431 	inc	r5
   0430 BD 02 00      [24] 1432 	cjne	r5,#0x02,00155$
   0433                    1433 00155$:
   0433 50 03         [24] 1434 	jnc	00156$
   0435 02r03rAB      [24] 1435 	ljmp	00120$
   0438                    1436 00156$:
                           1437 ;	src/glcd.c:161: chipSelectGLCD( 1 );
   0438 75 82 01      [24] 1438 	mov	dpl,#0x01
   043B 12r00r71      [24] 1439 	lcall	_chipSelectGLCD
                           1440 ;	src/glcd.c:162: setGLCDCursor( 0, 4);
   043E 75*10 04      [24] 1441 	mov	_setGLCDCursor_PARM_2,#0x04
   0441 75*11 00      [24] 1442 	mov	(_setGLCDCursor_PARM_2 + 1),#0x00
   0444 90 00 00      [24] 1443 	mov	dptr,#0x0000
   0447 12r03r0A      [24] 1444 	lcall	_setGLCDCursor
                           1445 ;	src/glcd.c:164: j = 0;
   044A 7E 00         [12] 1446 	mov	r6,#0x00
   044C 7F 00         [12] 1447 	mov	r7,#0x00
                           1448 ;	src/glcd.c:165: for(pg=4;pg<7;pg++)
   044E 7D 04         [12] 1449 	mov	r5,#0x04
                           1450 ;	src/glcd.c:167: for(i=0;i<128;i++)
   0450                    1451 00125$:
   0450 7C 00         [12] 1452 	mov	r4,#0x00
   0452 8E 02         [24] 1453 	mov	ar2,r6
   0454 8F 03         [24] 1454 	mov	ar3,r7
   0456                    1455 00113$:
                           1456 ;	src/glcd.c:170: DisplayGLCD(nameLogo[j]);	
   0456 EA            [12] 1457 	mov	a,r2
   0457 24r8C         [12] 1458 	add	a,#_nameLogo
   0459 F5 82         [12] 1459 	mov	dpl,a
   045B EB            [12] 1460 	mov	a,r3
   045C 34s03         [12] 1461 	addc	a,#(_nameLogo >> 8)
   045E F5 83         [12] 1462 	mov	dph,a
   0460 E4            [12] 1463 	clr	a
   0461 93            [24] 1464 	movc	a,@a+dptr
   0462 F5 82         [12] 1465 	mov	dpl,a
   0464 C0 05         [24] 1466 	push	ar5
   0466 C0 04         [24] 1467 	push	ar4
   0468 C0 03         [24] 1468 	push	ar3
   046A C0 02         [24] 1469 	push	ar2
   046C 12r00r61      [24] 1470 	lcall	_DisplayGLCD
   046F D0 02         [24] 1471 	pop	ar2
   0471 D0 03         [24] 1472 	pop	ar3
   0473 D0 04         [24] 1473 	pop	ar4
   0475 D0 05         [24] 1474 	pop	ar5
                           1475 ;	src/glcd.c:171: j++;
   0477 0A            [12] 1476 	inc	r2
   0478 BA 00 01      [24] 1477 	cjne	r2,#0x00,00157$
   047B 0B            [12] 1478 	inc	r3
   047C                    1479 00157$:
                           1480 ;	src/glcd.c:172: if( i >= 63 ){
   047C BC 3F 00      [24] 1481 	cjne	r4,#0x3F,00158$
   047F                    1482 00158$:
   047F 40 20         [24] 1483 	jc	00114$
                           1484 ;	src/glcd.c:174: setGLCDCursor( i, pg );
   0481 8C 00         [24] 1485 	mov	ar0,r4
   0483 79 00         [12] 1486 	mov	r1,#0x00
   0485 8D*10         [24] 1487 	mov	_setGLCDCursor_PARM_2,r5
   0487 75*11 00      [24] 1488 	mov	(_setGLCDCursor_PARM_2 + 1),#0x00
   048A 88 82         [24] 1489 	mov	dpl,r0
   048C 89 83         [24] 1490 	mov	dph,r1
   048E C0 05         [24] 1491 	push	ar5
   0490 C0 04         [24] 1492 	push	ar4
   0492 C0 03         [24] 1493 	push	ar3
   0494 C0 02         [24] 1494 	push	ar2
   0496 12r03r0A      [24] 1495 	lcall	_setGLCDCursor
   0499 D0 02         [24] 1496 	pop	ar2
   049B D0 03         [24] 1497 	pop	ar3
   049D D0 04         [24] 1498 	pop	ar4
   049F D0 05         [24] 1499 	pop	ar5
   04A1                    1500 00114$:
                           1501 ;	src/glcd.c:167: for(i=0;i<128;i++)
   04A1 0C            [12] 1502 	inc	r4
   04A2 BC 80 00      [24] 1503 	cjne	r4,#0x80,00160$
   04A5                    1504 00160$:
   04A5 40 AF         [24] 1505 	jc	00113$
                           1506 ;	src/glcd.c:177: chipSelectGLCD ( 1 );
   04A7 8A 06         [24] 1507 	mov	ar6,r2
   04A9 8B 07         [24] 1508 	mov	ar7,r3
   04AB 75 82 01      [24] 1509 	mov	dpl,#0x01
   04AE C0 07         [24] 1510 	push	ar7
   04B0 C0 06         [24] 1511 	push	ar6
   04B2 C0 05         [24] 1512 	push	ar5
   04B4 12r00r71      [24] 1513 	lcall	_chipSelectGLCD
   04B7 D0 05         [24] 1514 	pop	ar5
                           1515 ;	src/glcd.c:178: setGLCDCursor( 0, pg + 1 );		
   04B9 8D 03         [24] 1516 	mov	ar3,r5
   04BB 7C 00         [12] 1517 	mov	r4,#0x00
   04BD 74 01         [12] 1518 	mov	a,#0x01
   04BF 2B            [12] 1519 	add	a,r3
   04C0 F5*10         [12] 1520 	mov	_setGLCDCursor_PARM_2,a
   04C2 E4            [12] 1521 	clr	a
   04C3 3C            [12] 1522 	addc	a,r4
   04C4 F5*11         [12] 1523 	mov	(_setGLCDCursor_PARM_2 + 1),a
   04C6 90 00 00      [24] 1524 	mov	dptr,#0x0000
   04C9 C0 05         [24] 1525 	push	ar5
   04CB 12r03r0A      [24] 1526 	lcall	_setGLCDCursor
   04CE D0 05         [24] 1527 	pop	ar5
   04D0 D0 06         [24] 1528 	pop	ar6
   04D2 D0 07         [24] 1529 	pop	ar7
                           1530 ;	src/glcd.c:165: for(pg=4;pg<7;pg++)
   04D4 0D            [12] 1531 	inc	r5
   04D5 BD 07 00      [24] 1532 	cjne	r5,#0x07,00162$
   04D8                    1533 00162$:
   04D8 50 03         [24] 1534 	jnc	00163$
   04DA 02r04r50      [24] 1535 	ljmp	00125$
   04DD                    1536 00163$:
   04DD 22            [24] 1537 	ret
                           1538 ;------------------------------------------------------------
                           1539 ;Allocation info for local variables in function 'borders'
                           1540 ;------------------------------------------------------------
                           1541 ;x                         Allocated with name '_borders_PARM_2'
                           1542 ;y                         Allocated with name '_borders_PARM_3'
                           1543 ;len                       Allocated with name '_borders_PARM_4'
                           1544 ;ch                        Allocated to registers r7 
                           1545 ;i                         Allocated to registers r7 
                           1546 ;bolType                   Allocated to registers r6 
                           1547 ;------------------------------------------------------------
                           1548 ;	src/glcd.c:182: void borders (char ch, int x, int y, int len){
                           1549 ;	-----------------------------------------
                           1550 ;	 function borders
                           1551 ;	-----------------------------------------
   04DE                    1552 _borders:
   04DE AF 82         [24] 1553 	mov	r7,dpl
                           1554 ;	src/glcd.c:184: unsigned char i, bolType = 0;
   04E0 7E 00         [12] 1555 	mov	r6,#0x00
                           1556 ;	src/glcd.c:185: switch ( ch ){
   04E2 BF 31 6D      [24] 1557 	cjne	r7,#0x31,00111$
                           1558 ;	src/glcd.c:188: chipSelectGLCD( 1 );
   04E5 75 82 01      [24] 1559 	mov	dpl,#0x01
   04E8 C0 06         [24] 1560 	push	ar6
   04EA 12r00r71      [24] 1561 	lcall	_chipSelectGLCD
                           1562 ;	src/glcd.c:189: setGLCDCursor( x, y );
   04ED 85*14*10      [24] 1563 	mov	_setGLCDCursor_PARM_2,_borders_PARM_3
   04F0 85*15*11      [24] 1564 	mov	(_setGLCDCursor_PARM_2 + 1),(_borders_PARM_3 + 1)
   04F3 85*12 82      [24] 1565 	mov	dpl,_borders_PARM_2
   04F6 85*13 83      [24] 1566 	mov	dph,(_borders_PARM_2 + 1)
   04F9 12r03r0A      [24] 1567 	lcall	_setGLCDCursor
   04FC D0 06         [24] 1568 	pop	ar6
                           1569 ;	src/glcd.c:190: for( i=0 ; i <  len ; i ++ ){
   04FE 7F 00         [12] 1570 	mov	r7,#0x00
   0500                    1571 00109$:
   0500 8F 04         [24] 1572 	mov	ar4,r7
   0502 7D 00         [12] 1573 	mov	r5,#0x00
   0504 C3            [12] 1574 	clr	c
   0505 EC            [12] 1575 	mov	a,r4
   0506 95*16         [12] 1576 	subb	a,_borders_PARM_4
   0508 ED            [12] 1577 	mov	a,r5
   0509 64 80         [12] 1578 	xrl	a,#0x80
   050B 85*17 F0      [24] 1579 	mov	b,(_borders_PARM_4 + 1)
   050E 63 F0 80      [24] 1580 	xrl	b,#0x80
   0511 95 F0         [12] 1581 	subb	a,b
   0513 50 3D         [24] 1582 	jnc	00111$
                           1583 ;	src/glcd.c:191: if ( i >= 63 ){
   0515 BF 3F 00      [24] 1584 	cjne	r7,#0x3F,00132$
   0518                    1585 00132$:
   0518 40 23         [24] 1586 	jc	00105$
                           1587 ;	src/glcd.c:192: chipSelectGLCD( 2 );
   051A 75 82 02      [24] 1588 	mov	dpl,#0x02
   051D C0 07         [24] 1589 	push	ar7
   051F C0 06         [24] 1590 	push	ar6
   0521 12r00r71      [24] 1591 	lcall	_chipSelectGLCD
   0524 D0 06         [24] 1592 	pop	ar6
   0526 D0 07         [24] 1593 	pop	ar7
                           1594 ;	src/glcd.c:193: if( bolType == 0 ){
   0528 EE            [12] 1595 	mov	a,r6
   0529 70 12         [24] 1596 	jnz	00105$
                           1597 ;	src/glcd.c:194: setGLCDCursor( 64, y );
   052B 85*14*10      [24] 1598 	mov	_setGLCDCursor_PARM_2,_borders_PARM_3
   052E 85*15*11      [24] 1599 	mov	(_setGLCDCursor_PARM_2 + 1),(_borders_PARM_3 + 1)
   0531 90 00 40      [24] 1600 	mov	dptr,#0x0040
   0534 C0 07         [24] 1601 	push	ar7
   0536 12r03r0A      [24] 1602 	lcall	_setGLCDCursor
   0539 D0 07         [24] 1603 	pop	ar7
                           1604 ;	src/glcd.c:195: bolType = 1;
   053B 7E 01         [12] 1605 	mov	r6,#0x01
   053D                    1606 00105$:
                           1607 ;	src/glcd.c:199: DisplayGLCD( upperLine[0] );					
   053D 90r06r7E      [24] 1608 	mov	dptr,#_upperLine
   0540 E4            [12] 1609 	clr	a
   0541 93            [24] 1610 	movc	a,@a+dptr
   0542 F5 82         [12] 1611 	mov	dpl,a
   0544 C0 07         [24] 1612 	push	ar7
   0546 C0 06         [24] 1613 	push	ar6
   0548 12r00r61      [24] 1614 	lcall	_DisplayGLCD
   054B D0 06         [24] 1615 	pop	ar6
   054D D0 07         [24] 1616 	pop	ar7
                           1617 ;	src/glcd.c:190: for( i=0 ; i <  len ; i ++ ){
   054F 0F            [12] 1618 	inc	r7
                           1619 ;	src/glcd.c:202: }
   0550 80 AE         [24] 1620 	sjmp	00109$
   0552                    1621 00111$:
   0552 22            [24] 1622 	ret
                           1623 ;------------------------------------------------------------
                           1624 ;Allocation info for local variables in function 'showGLCDTime'
                           1625 ;------------------------------------------------------------
                           1626 ;i                         Allocated to registers r5 
                           1627 ;col                       Allocated to registers r6 r7 
                           1628 ;------------------------------------------------------------
                           1629 ;	src/glcd.c:220: void showGLCDTime( ){
                           1630 ;	-----------------------------------------
                           1631 ;	 function showGLCDTime
                           1632 ;	-----------------------------------------
   0553                    1633 _showGLCDTime:
                           1634 ;	src/glcd.c:224: chipSelectGLCD( 1 );
   0553 75 82 01      [24] 1635 	mov	dpl,#0x01
   0556 12r00r71      [24] 1636 	lcall	_chipSelectGLCD
                           1637 ;	src/glcd.c:225: setGLCDCursor( 0, 0);
   0559 E4            [12] 1638 	clr	a
   055A F5*10         [12] 1639 	mov	_setGLCDCursor_PARM_2,a
   055C F5*11         [12] 1640 	mov	(_setGLCDCursor_PARM_2 + 1),a
   055E F5 82         [12] 1641 	mov	dpl,a
   0560 F5 83         [12] 1642 	mov	dph,a
   0562 12r03r0A      [24] 1643 	lcall	_setGLCDCursor
                           1644 ;	src/glcd.c:226: for( i = 0; i <=128 ; i ++){
   0565 7E 00         [12] 1645 	mov	r6,#0x00
   0567 7F 00         [12] 1646 	mov	r7,#0x00
   0569 7D 00         [12] 1647 	mov	r5,#0x00
   056B                    1648 00107$:
                           1649 ;	src/glcd.c:227: DisplayGLCD(largeLcdChar_Zero[i]);
   056B ED            [12] 1650 	mov	a,r5
   056C 90r05rFD      [24] 1651 	mov	dptr,#_largeLcdChar_Zero
   056F 93            [24] 1652 	movc	a,@a+dptr
   0570 F5 82         [12] 1653 	mov	dpl,a
   0572 C0 07         [24] 1654 	push	ar7
   0574 C0 06         [24] 1655 	push	ar6
   0576 C0 05         [24] 1656 	push	ar5
   0578 12r00r61      [24] 1657 	lcall	_DisplayGLCD
   057B D0 05         [24] 1658 	pop	ar5
   057D D0 06         [24] 1659 	pop	ar6
   057F D0 07         [24] 1660 	pop	ar7
                           1661 ;	src/glcd.c:228: if( i % 26 == 0){
   0581 75 F0 1A      [24] 1662 	mov	b,#0x1A
   0584 ED            [12] 1663 	mov	a,r5
   0585 84            [48] 1664 	div	ab
   0586 E5 F0         [12] 1665 	mov	a,b
   0588 70 1B         [24] 1666 	jnz	00108$
                           1667 ;	src/glcd.c:229: setGLCDCursor( 0 , ++col);
   058A 0E            [12] 1668 	inc	r6
   058B BE 00 01      [24] 1669 	cjne	r6,#0x00,00131$
   058E 0F            [12] 1670 	inc	r7
   058F                    1671 00131$:
   058F 8E*10         [24] 1672 	mov	_setGLCDCursor_PARM_2,r6
   0591 8F*11         [24] 1673 	mov	(_setGLCDCursor_PARM_2 + 1),r7
   0593 90 00 00      [24] 1674 	mov	dptr,#0x0000
   0596 C0 07         [24] 1675 	push	ar7
   0598 C0 06         [24] 1676 	push	ar6
   059A C0 05         [24] 1677 	push	ar5
   059C 12r03r0A      [24] 1678 	lcall	_setGLCDCursor
   059F D0 05         [24] 1679 	pop	ar5
   05A1 D0 06         [24] 1680 	pop	ar6
   05A3 D0 07         [24] 1681 	pop	ar7
   05A5                    1682 00108$:
                           1683 ;	src/glcd.c:226: for( i = 0; i <=128 ; i ++){
   05A5 0D            [12] 1684 	inc	r5
   05A6 ED            [12] 1685 	mov	a,r5
   05A7 24 7F         [12] 1686 	add	a,#0xff - 0x80
   05A9 50 C0         [24] 1687 	jnc	00107$
                           1688 ;	src/glcd.c:232: setGLCDCursor( 26, 0 );
   05AB E4            [12] 1689 	clr	a
   05AC F5*10         [12] 1690 	mov	_setGLCDCursor_PARM_2,a
   05AE F5*11         [12] 1691 	mov	(_setGLCDCursor_PARM_2 + 1),a
   05B0 90 00 1A      [24] 1692 	mov	dptr,#0x001A
   05B3 12r03r0A      [24] 1693 	lcall	_setGLCDCursor
                           1694 ;	src/glcd.c:234: for( i = 0; i <=128 ; i ++){
   05B6 7E 00         [12] 1695 	mov	r6,#0x00
   05B8 7F 00         [12] 1696 	mov	r7,#0x00
   05BA 7D 00         [12] 1697 	mov	r5,#0x00
   05BC                    1698 00109$:
                           1699 ;	src/glcd.c:235: DisplayGLCD(largeLcdChar_Zero[i]);
   05BC ED            [12] 1700 	mov	a,r5
   05BD 90r05rFD      [24] 1701 	mov	dptr,#_largeLcdChar_Zero
   05C0 93            [24] 1702 	movc	a,@a+dptr
   05C1 F5 82         [12] 1703 	mov	dpl,a
   05C3 C0 07         [24] 1704 	push	ar7
   05C5 C0 06         [24] 1705 	push	ar6
   05C7 C0 05         [24] 1706 	push	ar5
   05C9 12r00r61      [24] 1707 	lcall	_DisplayGLCD
   05CC D0 05         [24] 1708 	pop	ar5
   05CE D0 06         [24] 1709 	pop	ar6
   05D0 D0 07         [24] 1710 	pop	ar7
                           1711 ;	src/glcd.c:236: if( i % 26 == 0){
   05D2 75 F0 1A      [24] 1712 	mov	b,#0x1A
   05D5 ED            [12] 1713 	mov	a,r5
   05D6 84            [48] 1714 	div	ab
   05D7 E5 F0         [12] 1715 	mov	a,b
   05D9 70 1B         [24] 1716 	jnz	00110$
                           1717 ;	src/glcd.c:237: setGLCDCursor( 26 , ++col);
   05DB 0E            [12] 1718 	inc	r6
   05DC BE 00 01      [24] 1719 	cjne	r6,#0x00,00134$
   05DF 0F            [12] 1720 	inc	r7
   05E0                    1721 00134$:
   05E0 8E*10         [24] 1722 	mov	_setGLCDCursor_PARM_2,r6
   05E2 8F*11         [24] 1723 	mov	(_setGLCDCursor_PARM_2 + 1),r7
   05E4 90 00 1A      [24] 1724 	mov	dptr,#0x001A
   05E7 C0 07         [24] 1725 	push	ar7
   05E9 C0 06         [24] 1726 	push	ar6
   05EB C0 05         [24] 1727 	push	ar5
   05ED 12r03r0A      [24] 1728 	lcall	_setGLCDCursor
   05F0 D0 05         [24] 1729 	pop	ar5
   05F2 D0 06         [24] 1730 	pop	ar6
   05F4 D0 07         [24] 1731 	pop	ar7
   05F6                    1732 00110$:
                           1733 ;	src/glcd.c:234: for( i = 0; i <=128 ; i ++){
   05F6 0D            [12] 1734 	inc	r5
   05F7 ED            [12] 1735 	mov	a,r5
   05F8 24 7F         [12] 1736 	add	a,#0xff - 0x80
   05FA 50 C0         [24] 1737 	jnc	00109$
   05FC 22            [24] 1738 	ret
                           1739 ;------------------------------------------------------------
                           1740 ;Allocation info for local variables in function 'beginScreen'
                           1741 ;------------------------------------------------------------
                           1742 ;	src/screen.c:8: int beginScreen(){
                           1743 ;	-----------------------------------------
                           1744 ;	 function beginScreen
                           1745 ;	-----------------------------------------
   05FD                    1746 _beginScreen:
                           1747 ;	src/screen.c:10: InitGLCDEnvironment();	//from glcd lib.
   05FD 12r00r1D      [24] 1748 	lcall	_InitGLCDEnvironment
                           1749 ;	src/screen.c:11: clearGLCD();		//clear the lcd screen for now.
   0600 12r00r9F      [24] 1750 	lcall	_clearGLCD
                           1751 ;	src/screen.c:12: return 1;
   0603 90 00 01      [24] 1752 	mov	dptr,#0x0001
   0606 22            [24] 1753 	ret
                           1754 ;------------------------------------------------------------
                           1755 ;Allocation info for local variables in function '__delay_us'
                           1756 ;------------------------------------------------------------
                           1757 ;d                         Allocated to registers 
                           1758 ;i                         Allocated to registers r4 r5 
                           1759 ;limit                     Allocated to registers r6 r7 
                           1760 ;------------------------------------------------------------
                           1761 ;	src/I2C.c:4: void __delay_us(unsigned int d)
                           1762 ;	-----------------------------------------
                           1763 ;	 function __delay_us
                           1764 ;	-----------------------------------------
   0607                    1765 ___delay_us:
                           1766 ;	src/I2C.c:7: limit = d/15;
   0607 75*00 0F      [24] 1767 	mov	__divuint_PARM_2,#0x0F
   060A 75*01 00      [24] 1768 	mov	(__divuint_PARM_2 + 1),#0x00
   060D 12r00r00      [24] 1769 	lcall	__divuint
   0610 AE 82         [24] 1770 	mov	r6,dpl
   0612 AF 83         [24] 1771 	mov	r7,dph
                           1772 ;	src/I2C.c:9: for(i=0;i<limit;i++);
   0614 7C 00         [12] 1773 	mov	r4,#0x00
   0616 7D 00         [12] 1774 	mov	r5,#0x00
   0618                    1775 00103$:
   0618 C3            [12] 1776 	clr	c
   0619 EC            [12] 1777 	mov	a,r4
   061A 9E            [12] 1778 	subb	a,r6
   061B ED            [12] 1779 	mov	a,r5
   061C 9F            [12] 1780 	subb	a,r7
   061D 50 07         [24] 1781 	jnc	00105$
   061F 0C            [12] 1782 	inc	r4
   0620 BC 00 F5      [24] 1783 	cjne	r4,#0x00,00103$
   0623 0D            [12] 1784 	inc	r5
   0624 80 F2         [24] 1785 	sjmp	00103$
   0626                    1786 00105$:
   0626 22            [24] 1787 	ret
                           1788 ;------------------------------------------------------------
                           1789 ;Allocation info for local variables in function 'InitI2C'
                           1790 ;------------------------------------------------------------
                           1791 ;	src/I2C.c:14: void InitI2C(void)
                           1792 ;	-----------------------------------------
                           1793 ;	 function InitI2C
                           1794 ;	-----------------------------------------
   0627                    1795 _InitI2C:
                           1796 ;	src/I2C.c:17: SDA = 1;
   0627 D2 90         [12] 1797 	setb	_SDA
                           1798 ;	src/I2C.c:18: SCK = 1;
   0629 D2 91         [12] 1799 	setb	_SCK
   062B 22            [24] 1800 	ret
                           1801 ;------------------------------------------------------------
                           1802 ;Allocation info for local variables in function 'I2C_Start'
                           1803 ;------------------------------------------------------------
                           1804 ;	src/I2C.c:23: void I2C_Start(void)
                           1805 ;	-----------------------------------------
                           1806 ;	 function I2C_Start
                           1807 ;	-----------------------------------------
   062C                    1808 _I2C_Start:
                           1809 ;	src/I2C.c:25: Set_SCK_High;				// Make SCK pin high
   062C D2 91         [12] 1810 	setb	_SCK
                           1811 ;	src/I2C.c:26: Set_SDA_High;				// Make SDA pin High
   062E D2 90         [12] 1812 	setb	_SDA
                           1813 ;	src/I2C.c:27: __delay_us(HalfBitDelay);	// Half bit delay
   0630 90 01 F4      [24] 1814 	mov	dptr,#0x01F4
   0633 12r06r07      [24] 1815 	lcall	___delay_us
                           1816 ;	src/I2C.c:28: Set_SDA_Low;				// Make SDA Low
   0636 C2 90         [12] 1817 	clr	_SDA
                           1818 ;	src/I2C.c:29: __delay_us(HalfBitDelay);	// Half bit delay
   0638 90 01 F4      [24] 1819 	mov	dptr,#0x01F4
   063B 02r06r07      [24] 1820 	ljmp	___delay_us
                           1821 ;------------------------------------------------------------
                           1822 ;Allocation info for local variables in function 'I2C_ReStart'
                           1823 ;------------------------------------------------------------
                           1824 ;	src/I2C.c:34: void I2C_ReStart(void)
                           1825 ;	-----------------------------------------
                           1826 ;	 function I2C_ReStart
                           1827 ;	-----------------------------------------
   063E                    1828 _I2C_ReStart:
                           1829 ;	src/I2C.c:36: Set_SCK_Low;				// Make SCK pin low
   063E C2 91         [12] 1830 	clr	_SCK
                           1831 ;	src/I2C.c:38: __delay_us(HalfBitDelay/2);	// Data pin should change it's value,
   0640 90 00 FA      [24] 1832 	mov	dptr,#0x00FA
   0643 12r06r07      [24] 1833 	lcall	___delay_us
                           1834 ;	src/I2C.c:40: Set_SDA_High;				// Make SDA pin High
   0646 D2 90         [12] 1835 	setb	_SDA
                           1836 ;	src/I2C.c:42: __delay_us(HalfBitDelay/2);	// 1/4 bit delay
   0648 90 00 FA      [24] 1837 	mov	dptr,#0x00FA
   064B 12r06r07      [24] 1838 	lcall	___delay_us
                           1839 ;	src/I2C.c:43: Set_SCK_High;				// Make SCK pin high
   064E D2 91         [12] 1840 	setb	_SCK
                           1841 ;	src/I2C.c:44: __delay_us(HalfBitDelay/2);	// 1/4 bit delay
   0650 90 00 FA      [24] 1842 	mov	dptr,#0x00FA
   0653 12r06r07      [24] 1843 	lcall	___delay_us
                           1844 ;	src/I2C.c:45: Set_SDA_Low;				// Make SDA Low
   0656 C2 90         [12] 1845 	clr	_SDA
                           1846 ;	src/I2C.c:46: __delay_us(HalfBitDelay/2);	// 1/4 bit delay
   0658 90 00 FA      [24] 1847 	mov	dptr,#0x00FA
   065B 02r06r07      [24] 1848 	ljmp	___delay_us
                           1849 ;------------------------------------------------------------
                           1850 ;Allocation info for local variables in function 'I2C_Stop'
                           1851 ;------------------------------------------------------------
                           1852 ;	src/I2C.c:51: void I2C_Stop(void)
                           1853 ;	-----------------------------------------
                           1854 ;	 function I2C_Stop
                           1855 ;	-----------------------------------------
   065E                    1856 _I2C_Stop:
                           1857 ;	src/I2C.c:53: Set_SCK_Low;				// Make SCK pin low
   065E C2 91         [12] 1858 	clr	_SCK
                           1859 ;	src/I2C.c:55: __delay_us(HalfBitDelay/2);	// Data pin should change it's value,
   0660 90 00 FA      [24] 1860 	mov	dptr,#0x00FA
   0663 12r06r07      [24] 1861 	lcall	___delay_us
                           1862 ;	src/I2C.c:57: Set_SDA_Low;				// Make SDA pin low
   0666 C2 90         [12] 1863 	clr	_SDA
                           1864 ;	src/I2C.c:59: __delay_us(HalfBitDelay/2);	// 1/4 bit delay
   0668 90 00 FA      [24] 1865 	mov	dptr,#0x00FA
   066B 12r06r07      [24] 1866 	lcall	___delay_us
                           1867 ;	src/I2C.c:60: Set_SCK_High;				// Make SCK pin high
   066E D2 91         [12] 1868 	setb	_SCK
                           1869 ;	src/I2C.c:61: __delay_us(HalfBitDelay/2);	// 1/4 bit delay
   0670 90 00 FA      [24] 1870 	mov	dptr,#0x00FA
   0673 12r06r07      [24] 1871 	lcall	___delay_us
                           1872 ;	src/I2C.c:62: Set_SDA_High;				// Make SDA high
   0676 D2 90         [12] 1873 	setb	_SDA
                           1874 ;	src/I2C.c:63: __delay_us(HalfBitDelay/2);	// 1/4 bit delay
   0678 90 00 FA      [24] 1875 	mov	dptr,#0x00FA
   067B 02r06r07      [24] 1876 	ljmp	___delay_us
                           1877 ;------------------------------------------------------------
                           1878 ;Allocation info for local variables in function 'I2C_Send_ACK'
                           1879 ;------------------------------------------------------------
                           1880 ;	src/I2C.c:69: void I2C_Send_ACK(void)
                           1881 ;	-----------------------------------------
                           1882 ;	 function I2C_Send_ACK
                           1883 ;	-----------------------------------------
   067E                    1884 _I2C_Send_ACK:
                           1885 ;	src/I2C.c:71: Set_SCK_Low;				// Make SCK pin low
   067E C2 91         [12] 1886 	clr	_SCK
                           1887 ;	src/I2C.c:72: __delay_us(HalfBitDelay/2);	// Data pin should change it's value,
   0680 90 00 FA      [24] 1888 	mov	dptr,#0x00FA
   0683 12r06r07      [24] 1889 	lcall	___delay_us
                           1890 ;	src/I2C.c:74: Set_SDA_Low;				// Make SDA Low
   0686 C2 90         [12] 1891 	clr	_SDA
                           1892 ;	src/I2C.c:75: __delay_us(HalfBitDelay/2);	// 1/4 bit delay
   0688 90 00 FA      [24] 1893 	mov	dptr,#0x00FA
   068B 12r06r07      [24] 1894 	lcall	___delay_us
                           1895 ;	src/I2C.c:76: Set_SCK_High;				// Make SCK pin high
   068E D2 91         [12] 1896 	setb	_SCK
                           1897 ;	src/I2C.c:77: __delay_us(HalfBitDelay);	// Half bit delay
   0690 90 01 F4      [24] 1898 	mov	dptr,#0x01F4
   0693 02r06r07      [24] 1899 	ljmp	___delay_us
                           1900 ;------------------------------------------------------------
                           1901 ;Allocation info for local variables in function 'I2C_Send_NACK'
                           1902 ;------------------------------------------------------------
                           1903 ;	src/I2C.c:82: void I2C_Send_NACK(void)
                           1904 ;	-----------------------------------------
                           1905 ;	 function I2C_Send_NACK
                           1906 ;	-----------------------------------------
   0696                    1907 _I2C_Send_NACK:
                           1908 ;	src/I2C.c:84: Set_SCK_Low;				// Make SCK pin low
   0696 C2 91         [12] 1909 	clr	_SCK
                           1910 ;	src/I2C.c:85: __delay_us(HalfBitDelay/2);	// Data pin should change it's value,
   0698 90 00 FA      [24] 1911 	mov	dptr,#0x00FA
   069B 12r06r07      [24] 1912 	lcall	___delay_us
                           1913 ;	src/I2C.c:87: Set_SDA_High;				// Make SDA high
   069E D2 90         [12] 1914 	setb	_SDA
                           1915 ;	src/I2C.c:88: __delay_us(HalfBitDelay/2);	// 1/4 bit delay
   06A0 90 00 FA      [24] 1916 	mov	dptr,#0x00FA
   06A3 12r06r07      [24] 1917 	lcall	___delay_us
                           1918 ;	src/I2C.c:89: Set_SCK_High;				// Make SCK pin high
   06A6 D2 91         [12] 1919 	setb	_SCK
                           1920 ;	src/I2C.c:90: __delay_us(HalfBitDelay);	// Half bit delay
   06A8 90 01 F4      [24] 1921 	mov	dptr,#0x01F4
   06AB 02r06r07      [24] 1922 	ljmp	___delay_us
                           1923 ;------------------------------------------------------------
                           1924 ;Allocation info for local variables in function 'I2C_Write_Byte'
                           1925 ;------------------------------------------------------------
                           1926 ;Byte                      Allocated to registers r7 
                           1927 ;i                         Allocated to registers r6 
                           1928 ;------------------------------------------------------------
                           1929 ;	src/I2C.c:95: __bit I2C_Write_Byte(unsigned char Byte)
                           1930 ;	-----------------------------------------
                           1931 ;	 function I2C_Write_Byte
                           1932 ;	-----------------------------------------
   06AE                    1933 _I2C_Write_Byte:
   06AE AF 82         [24] 1934 	mov	r7,dpl
                           1935 ;	src/I2C.c:99: for(i=0;i<8;i++)		// Repeat for every bit
   06B0 7E 00         [12] 1936 	mov	r6,#0x00
   06B2                    1937 00105$:
                           1938 ;	src/I2C.c:101: Set_SCK_Low;		// Make SCK pin low
   06B2 C2 91         [12] 1939 	clr	_SCK
                           1940 ;	src/I2C.c:103: __delay_us(HalfBitDelay/2);	// Data pin should change it's value,
   06B4 90 00 FA      [24] 1941 	mov	dptr,#0x00FA
   06B7 C0 07         [24] 1942 	push	ar7
   06B9 C0 06         [24] 1943 	push	ar6
   06BB 12r06r07      [24] 1944 	lcall	___delay_us
   06BE D0 06         [24] 1945 	pop	ar6
   06C0 D0 07         [24] 1946 	pop	ar7
                           1947 ;	src/I2C.c:106: if((Byte<<i)&0x80)  // Place data bit value on SDA pin
   06C2 8F 04         [24] 1948 	mov	ar4,r7
   06C4 7D 00         [12] 1949 	mov	r5,#0x00
   06C6 8E F0         [24] 1950 	mov	b,r6
   06C8 05 F0         [12] 1951 	inc	b
   06CA 80 06         [24] 1952 	sjmp	00120$
   06CC                    1953 00119$:
   06CC EC            [12] 1954 	mov	a,r4
   06CD 2C            [12] 1955 	add	a,r4
   06CE FC            [12] 1956 	mov	r4,a
   06CF ED            [12] 1957 	mov	a,r5
   06D0 33            [12] 1958 	rlc	a
   06D1 FD            [12] 1959 	mov	r5,a
   06D2                    1960 00120$:
   06D2 D5 F0 F7      [24] 1961 	djnz	b,00119$
   06D5 EC            [12] 1962 	mov	a,r4
   06D6 30 E7 04      [24] 1963 	jnb	acc.7,00102$
                           1964 ;	src/I2C.c:107: Set_SDA_High;	// If bit is high, make SDA high
   06D9 D2 90         [12] 1965 	setb	_SDA
   06DB 80 02         [24] 1966 	sjmp	00103$
   06DD                    1967 00102$:
                           1968 ;	src/I2C.c:109: Set_SDA_Low;	// If bit is low, make SDA low
   06DD C2 90         [12] 1969 	clr	_SDA
   06DF                    1970 00103$:
                           1971 ;	src/I2C.c:111: __delay_us(HalfBitDelay/2);	// Toggle SCK pin
   06DF 90 00 FA      [24] 1972 	mov	dptr,#0x00FA
   06E2 C0 07         [24] 1973 	push	ar7
   06E4 C0 06         [24] 1974 	push	ar6
   06E6 12r06r07      [24] 1975 	lcall	___delay_us
                           1976 ;	src/I2C.c:112: Set_SCK_High;				// So that slave can
   06E9 D2 91         [12] 1977 	setb	_SCK
                           1978 ;	src/I2C.c:113: __delay_us(HalfBitDelay);	// latch data bit
   06EB 90 01 F4      [24] 1979 	mov	dptr,#0x01F4
   06EE 12r06r07      [24] 1980 	lcall	___delay_us
   06F1 D0 06         [24] 1981 	pop	ar6
   06F3 D0 07         [24] 1982 	pop	ar7
                           1983 ;	src/I2C.c:99: for(i=0;i<8;i++)		// Repeat for every bit
   06F5 0E            [12] 1984 	inc	r6
   06F6 BE 08 00      [24] 1985 	cjne	r6,#0x08,00122$
   06F9                    1986 00122$:
   06F9 40 B7         [24] 1987 	jc	00105$
                           1988 ;	src/I2C.c:117: Set_SCK_Low;
   06FB C2 91         [12] 1989 	clr	_SCK
                           1990 ;	src/I2C.c:118: Set_SDA_High;
   06FD D2 90         [12] 1991 	setb	_SDA
                           1992 ;	src/I2C.c:119: __delay_us(HalfBitDelay);
   06FF 90 01 F4      [24] 1993 	mov	dptr,#0x01F4
   0702 12r06r07      [24] 1994 	lcall	___delay_us
                           1995 ;	src/I2C.c:120: Set_SCK_High;
   0705 D2 91         [12] 1996 	setb	_SCK
                           1997 ;	src/I2C.c:121: __delay_us(HalfBitDelay);
   0707 90 01 F4      [24] 1998 	mov	dptr,#0x01F4
   070A 12r06r07      [24] 1999 	lcall	___delay_us
                           2000 ;	src/I2C.c:123: return SDA;
   070D A2 90         [12] 2001 	mov	c,_SDA
   070F 22            [24] 2002 	ret
                           2003 ;------------------------------------------------------------
                           2004 ;Allocation info for local variables in function 'I2C_Read_Byte'
                           2005 ;------------------------------------------------------------
                           2006 ;i                         Allocated to registers r6 
                           2007 ;d                         Allocated to registers r5 
                           2008 ;RxData                    Allocated to registers r7 
                           2009 ;------------------------------------------------------------
                           2010 ;	src/I2C.c:128: unsigned char I2C_Read_Byte(void)
                           2011 ;	-----------------------------------------
                           2012 ;	 function I2C_Read_Byte
                           2013 ;	-----------------------------------------
   0710                    2014 _I2C_Read_Byte:
                           2015 ;	src/I2C.c:130: unsigned char i, d, RxData = 0;
   0710 7F 00         [12] 2016 	mov	r7,#0x00
                           2017 ;	src/I2C.c:132: for(i=0;i<8;i++)
   0712 7E 00         [12] 2018 	mov	r6,#0x00
   0714                    2019 00102$:
                           2020 ;	src/I2C.c:134: Set_SCK_Low;					// Make SCK pin low
   0714 C2 91         [12] 2021 	clr	_SCK
                           2022 ;	src/I2C.c:135: Set_SDA_High;					// Don't drive SDA 
   0716 D2 90         [12] 2023 	setb	_SDA
                           2024 ;	src/I2C.c:136: __delay_us(HalfBitDelay);		// Half bit delay
   0718 90 01 F4      [24] 2025 	mov	dptr,#0x01F4
   071B C0 07         [24] 2026 	push	ar7
   071D C0 06         [24] 2027 	push	ar6
   071F 12r06r07      [24] 2028 	lcall	___delay_us
                           2029 ;	src/I2C.c:137: Set_SCK_High;					// Make SCK pin high
   0722 D2 91         [12] 2030 	setb	_SCK
                           2031 ;	src/I2C.c:138: __delay_us(HalfBitDelay/2);		// 1/4 bit delay
   0724 90 00 FA      [24] 2032 	mov	dptr,#0x00FA
   0727 12r06r07      [24] 2033 	lcall	___delay_us
   072A D0 06         [24] 2034 	pop	ar6
   072C D0 07         [24] 2035 	pop	ar7
                           2036 ;	src/I2C.c:139: d = SDA;					    // Capture Received Bit
   072E A2 90         [12] 2037 	mov	c,_SDA
   0730 E4            [12] 2038 	clr	a
   0731 33            [12] 2039 	rlc	a
   0732 FD            [12] 2040 	mov	r5,a
                           2041 ;	src/I2C.c:140: RxData = RxData|(d<<(7-i));   	// Copy it in RxData
   0733 74 07         [12] 2042 	mov	a,#0x07
   0735 C3            [12] 2043 	clr	c
   0736 9E            [12] 2044 	subb	a,r6
   0737 F5 F0         [12] 2045 	mov	b,a
   0739 05 F0         [12] 2046 	inc	b
   073B ED            [12] 2047 	mov	a,r5
   073C 80 02         [24] 2048 	sjmp	00115$
   073E                    2049 00113$:
   073E 25 E0         [12] 2050 	add	a,acc
   0740                    2051 00115$:
   0740 D5 F0 FB      [24] 2052 	djnz	b,00113$
   0743 42 07         [12] 2053 	orl	ar7,a
                           2054 ;	src/I2C.c:141: __delay_us(HalfBitDelay/2);		// 1/4 bit delay
   0745 90 00 FA      [24] 2055 	mov	dptr,#0x00FA
   0748 C0 07         [24] 2056 	push	ar7
   074A C0 06         [24] 2057 	push	ar6
   074C 12r06r07      [24] 2058 	lcall	___delay_us
   074F D0 06         [24] 2059 	pop	ar6
   0751 D0 07         [24] 2060 	pop	ar7
                           2061 ;	src/I2C.c:132: for(i=0;i<8;i++)
   0753 0E            [12] 2062 	inc	r6
   0754 BE 08 00      [24] 2063 	cjne	r6,#0x08,00116$
   0757                    2064 00116$:
   0757 40 BB         [24] 2065 	jc	00102$
                           2066 ;	src/I2C.c:144: return RxData;						// Return received byte
   0759 8F 82         [24] 2067 	mov	dpl,r7
   075B 22            [24] 2068 	ret
                           2069 ;------------------------------------------------------------
                           2070 ;Allocation info for local variables in function 'delay'
                           2071 ;------------------------------------------------------------
                           2072 ;d                         Allocated to registers r6 r7 
                           2073 ;i                         Allocated to registers r4 r5 
                           2074 ;------------------------------------------------------------
                           2075 ;	src/DS1307.c:9: void delay(unsigned int d)
                           2076 ;	-----------------------------------------
                           2077 ;	 function delay
                           2078 ;	-----------------------------------------
   075C                    2079 _delay:
   075C AE 82         [24] 2080 	mov	r6,dpl
   075E AF 83         [24] 2081 	mov	r7,dph
                           2082 ;	src/DS1307.c:12: for(i=0;i<d;i++);
   0760 7C 00         [12] 2083 	mov	r4,#0x00
   0762 7D 00         [12] 2084 	mov	r5,#0x00
   0764                    2085 00103$:
   0764 C3            [12] 2086 	clr	c
   0765 EC            [12] 2087 	mov	a,r4
   0766 9E            [12] 2088 	subb	a,r6
   0767 ED            [12] 2089 	mov	a,r5
   0768 9F            [12] 2090 	subb	a,r7
   0769 50 07         [24] 2091 	jnc	00105$
   076B 0C            [12] 2092 	inc	r4
   076C BC 00 F5      [24] 2093 	cjne	r4,#0x00,00103$
   076F 0D            [12] 2094 	inc	r5
   0770 80 F2         [24] 2095 	sjmp	00103$
   0772                    2096 00105$:
   0772 22            [24] 2097 	ret
                           2098 ;------------------------------------------------------------
                           2099 ;Allocation info for local variables in function 'Write_Byte_To_DS1307_RTC'
                           2100 ;------------------------------------------------------------
                           2101 ;DataByte                  Allocated with name '_Write_Byte_To_DS1307_RTC_PARM_2'
                           2102 ;Address                   Allocated to registers r7 
                           2103 ;------------------------------------------------------------
                           2104 ;	src/DS1307.c:19: void Write_Byte_To_DS1307_RTC(unsigned char Address, unsigned char DataByte)
                           2105 ;	-----------------------------------------
                           2106 ;	 function Write_Byte_To_DS1307_RTC
                           2107 ;	-----------------------------------------
   0773                    2108 _Write_Byte_To_DS1307_RTC:
   0773 AF 82         [24] 2109 	mov	r7,dpl
                           2110 ;	src/DS1307.c:21: I2C_Start();										// Start i2c communication
   0775 C0 07         [24] 2111 	push	ar7
   0777 12r06r2C      [24] 2112 	lcall	_I2C_Start
   077A D0 07         [24] 2113 	pop	ar7
                           2114 ;	src/DS1307.c:24: while(I2C_Write_Byte(Device_Address_DS1307_EEPROM + 0) == 1)// Wait until device is free
   077C                    2115 00101$:
   077C 75 82 D0      [24] 2116 	mov	dpl,#0xD0
   077F C0 07         [24] 2117 	push	ar7
   0781 12r06rAE      [24] 2118 	lcall	_I2C_Write_Byte
   0784 D0 07         [24] 2119 	pop	ar7
   0786 92*00         [24] 2120 	mov  _Write_Byte_To_DS1307_RTC_sloc0_1_0,c
   0788 E4            [12] 2121 	clr	a
   0789 33            [12] 2122 	rlc	a
   078A FE            [12] 2123 	mov	r6,a
   078B BE 01 09      [24] 2124 	cjne	r6,#0x01,00103$
                           2125 ;	src/DS1307.c:25: {	I2C_Start();	}		
   078E C0 07         [24] 2126 	push	ar7
   0790 12r06r2C      [24] 2127 	lcall	_I2C_Start
   0793 D0 07         [24] 2128 	pop	ar7
   0795 80 E5         [24] 2129 	sjmp	00101$
   0797                    2130 00103$:
                           2131 ;	src/DS1307.c:27: I2C_Write_Byte(Address);							// Write Address byte
   0797 8F 82         [24] 2132 	mov	dpl,r7
   0799 12r06rAE      [24] 2133 	lcall	_I2C_Write_Byte
                           2134 ;	src/DS1307.c:28: I2C_Write_Byte(DataByte);							// Write data byte
   079C 85*1D 82      [24] 2135 	mov	dpl,_Write_Byte_To_DS1307_RTC_PARM_2
   079F 12r06rAE      [24] 2136 	lcall	_I2C_Write_Byte
                           2137 ;	src/DS1307.c:29: I2C_Stop();											// Stop i2c communication
   07A2 02r06r5E      [24] 2138 	ljmp	_I2C_Stop
                           2139 ;------------------------------------------------------------
                           2140 ;Allocation info for local variables in function 'Read_Byte_From_DS1307_RTC'
                           2141 ;------------------------------------------------------------
                           2142 ;Address                   Allocated to registers r7 
                           2143 ;Byte                      Allocated to registers r7 
                           2144 ;------------------------------------------------------------
                           2145 ;	src/DS1307.c:36: unsigned char Read_Byte_From_DS1307_RTC(unsigned char Address)
                           2146 ;	-----------------------------------------
                           2147 ;	 function Read_Byte_From_DS1307_RTC
                           2148 ;	-----------------------------------------
   07A5                    2149 _Read_Byte_From_DS1307_RTC:
   07A5 AF 82         [24] 2150 	mov	r7,dpl
                           2151 ;	src/DS1307.c:40: I2C_Start();										// Start i2c communication
   07A7 C0 07         [24] 2152 	push	ar7
   07A9 12r06r2C      [24] 2153 	lcall	_I2C_Start
   07AC D0 07         [24] 2154 	pop	ar7
                           2155 ;	src/DS1307.c:43: while(I2C_Write_Byte(Device_Address_DS1307_EEPROM + 0) == 1)// Wait until device is free
   07AE                    2156 00101$:
   07AE 75 82 D0      [24] 2157 	mov	dpl,#0xD0
   07B1 C0 07         [24] 2158 	push	ar7
   07B3 12r06rAE      [24] 2159 	lcall	_I2C_Write_Byte
   07B6 D0 07         [24] 2160 	pop	ar7
   07B8 92*01         [24] 2161 	mov  _Read_Byte_From_DS1307_RTC_sloc0_1_0,c
   07BA E4            [12] 2162 	clr	a
   07BB 33            [12] 2163 	rlc	a
   07BC FE            [12] 2164 	mov	r6,a
   07BD BE 01 09      [24] 2165 	cjne	r6,#0x01,00103$
                           2166 ;	src/DS1307.c:44: {	I2C_Start();	}		
   07C0 C0 07         [24] 2167 	push	ar7
   07C2 12r06r2C      [24] 2168 	lcall	_I2C_Start
   07C5 D0 07         [24] 2169 	pop	ar7
   07C7 80 E5         [24] 2170 	sjmp	00101$
   07C9                    2171 00103$:
                           2172 ;	src/DS1307.c:46: I2C_Write_Byte(Address);							// Write Address byte
   07C9 8F 82         [24] 2173 	mov	dpl,r7
   07CB 12r06rAE      [24] 2174 	lcall	_I2C_Write_Byte
                           2175 ;	src/DS1307.c:47: I2C_ReStart();										// Restart i2c
   07CE 12r06r3E      [24] 2176 	lcall	_I2C_ReStart
                           2177 ;	src/DS1307.c:50: I2C_Write_Byte(Device_Address_DS1307_EEPROM + 1);		
   07D1 75 82 D1      [24] 2178 	mov	dpl,#0xD1
   07D4 12r06rAE      [24] 2179 	lcall	_I2C_Write_Byte
                           2180 ;	src/DS1307.c:52: Byte = I2C_Read_Byte();								// Read byte from EEPROM
   07D7 12r07r10      [24] 2181 	lcall	_I2C_Read_Byte
   07DA AF 82         [24] 2182 	mov	r7,dpl
                           2183 ;	src/DS1307.c:56: I2C_Send_NACK();
   07DC C0 07         [24] 2184 	push	ar7
   07DE 12r06r96      [24] 2185 	lcall	_I2C_Send_NACK
                           2186 ;	src/DS1307.c:59: Set_SDA_Low;				// Make SDA Low
   07E1 C2 90         [12] 2187 	clr	_SDA
                           2188 ;	src/DS1307.c:60: __delay_us(HalfBitDelay);	// Half bit delay
   07E3 90 01 F4      [24] 2189 	mov	dptr,#0x01F4
   07E6 12r06r07      [24] 2190 	lcall	___delay_us
                           2191 ;	src/DS1307.c:61: Set_SDA_High;				// Make SDA high
   07E9 D2 90         [12] 2192 	setb	_SDA
                           2193 ;	src/DS1307.c:62: __delay_us(HalfBitDelay);	// Half bit delay
   07EB 90 01 F4      [24] 2194 	mov	dptr,#0x01F4
   07EE 12r06r07      [24] 2195 	lcall	___delay_us
   07F1 D0 07         [24] 2196 	pop	ar7
                           2197 ;	src/DS1307.c:64: return Byte;				// Return the byte received from 24LC64 EEPROM
   07F3 8F 82         [24] 2198 	mov	dpl,r7
   07F5 22            [24] 2199 	ret
                           2200 ;------------------------------------------------------------
                           2201 ;Allocation info for local variables in function 'Write_Bytes_To_DS1307_RTC'
                           2202 ;------------------------------------------------------------
                           2203 ;pData                     Allocated with name '_Write_Bytes_To_DS1307_RTC_PARM_2'
                           2204 ;NoOfBytes                 Allocated with name '_Write_Bytes_To_DS1307_RTC_PARM_3'
                           2205 ;Address                   Allocated to registers r7 
                           2206 ;i                         Allocated to registers r6 r7 
                           2207 ;------------------------------------------------------------
                           2208 ;	src/DS1307.c:72: void Write_Bytes_To_DS1307_RTC(unsigned char Address,unsigned char* pData,unsigned char NoOfBytes)
                           2209 ;	-----------------------------------------
                           2210 ;	 function Write_Bytes_To_DS1307_RTC
                           2211 ;	-----------------------------------------
   07F6                    2212 _Write_Bytes_To_DS1307_RTC:
   07F6 AF 82         [24] 2213 	mov	r7,dpl
                           2214 ;	src/DS1307.c:76: I2C_Start();										// Start i2c communication
   07F8 C0 07         [24] 2215 	push	ar7
   07FA 12r06r2C      [24] 2216 	lcall	_I2C_Start
   07FD D0 07         [24] 2217 	pop	ar7
                           2218 ;	src/DS1307.c:79: while(I2C_Write_Byte(Device_Address_DS1307_EEPROM + 0) == 1)// Wait until device is free
   07FF                    2219 00101$:
   07FF 75 82 D0      [24] 2220 	mov	dpl,#0xD0
   0802 C0 07         [24] 2221 	push	ar7
   0804 12r06rAE      [24] 2222 	lcall	_I2C_Write_Byte
   0807 D0 07         [24] 2223 	pop	ar7
   0809 92*02         [24] 2224 	mov  _Write_Bytes_To_DS1307_RTC_sloc0_1_0,c
   080B E4            [12] 2225 	clr	a
   080C 33            [12] 2226 	rlc	a
   080D FE            [12] 2227 	mov	r6,a
   080E BE 01 09      [24] 2228 	cjne	r6,#0x01,00103$
                           2229 ;	src/DS1307.c:80: {	I2C_Start();	}		
   0811 C0 07         [24] 2230 	push	ar7
   0813 12r06r2C      [24] 2231 	lcall	_I2C_Start
   0816 D0 07         [24] 2232 	pop	ar7
   0818 80 E5         [24] 2233 	sjmp	00101$
   081A                    2234 00103$:
                           2235 ;	src/DS1307.c:82: I2C_Write_Byte(Address);							// Write Address byte
   081A 8F 82         [24] 2236 	mov	dpl,r7
   081C 12r06rAE      [24] 2237 	lcall	_I2C_Write_Byte
                           2238 ;	src/DS1307.c:84: for(i=0;i<NoOfBytes;i++)							// Write NoOfBytes
   081F 7E 00         [12] 2239 	mov	r6,#0x00
   0821 7F 00         [12] 2240 	mov	r7,#0x00
   0823                    2241 00106$:
   0823 AC*21         [24] 2242 	mov	r4,_Write_Bytes_To_DS1307_RTC_PARM_3
   0825 7D 00         [12] 2243 	mov	r5,#0x00
   0827 C3            [12] 2244 	clr	c
   0828 EE            [12] 2245 	mov	a,r6
   0829 9C            [12] 2246 	subb	a,r4
   082A EF            [12] 2247 	mov	a,r7
   082B 9D            [12] 2248 	subb	a,r5
   082C 50 27         [24] 2249 	jnc	00104$
                           2250 ;	src/DS1307.c:85: I2C_Write_Byte(pData[i]);						// Write data byte
   082E EE            [12] 2251 	mov	a,r6
   082F 25*1E         [12] 2252 	add	a,_Write_Bytes_To_DS1307_RTC_PARM_2
   0831 FB            [12] 2253 	mov	r3,a
   0832 EF            [12] 2254 	mov	a,r7
   0833 35*1F         [12] 2255 	addc	a,(_Write_Bytes_To_DS1307_RTC_PARM_2 + 1)
   0835 FC            [12] 2256 	mov	r4,a
   0836 AD*20         [24] 2257 	mov	r5,(_Write_Bytes_To_DS1307_RTC_PARM_2 + 2)
   0838 8B 82         [24] 2258 	mov	dpl,r3
   083A 8C 83         [24] 2259 	mov	dph,r4
   083C 8D F0         [24] 2260 	mov	b,r5
   083E 12r00r00      [24] 2261 	lcall	__gptrget
   0841 F5 82         [12] 2262 	mov	dpl,a
   0843 C0 07         [24] 2263 	push	ar7
   0845 C0 06         [24] 2264 	push	ar6
   0847 12r06rAE      [24] 2265 	lcall	_I2C_Write_Byte
   084A D0 06         [24] 2266 	pop	ar6
   084C D0 07         [24] 2267 	pop	ar7
                           2268 ;	src/DS1307.c:84: for(i=0;i<NoOfBytes;i++)							// Write NoOfBytes
   084E 0E            [12] 2269 	inc	r6
   084F BE 00 D1      [24] 2270 	cjne	r6,#0x00,00106$
   0852 0F            [12] 2271 	inc	r7
   0853 80 CE         [24] 2272 	sjmp	00106$
   0855                    2273 00104$:
                           2274 ;	src/DS1307.c:87: I2C_Stop();											// Stop i2c communication
   0855 02r06r5E      [24] 2275 	ljmp	_I2C_Stop
                           2276 ;------------------------------------------------------------
                           2277 ;Allocation info for local variables in function 'Read_Bytes_From_DS1307_RTC'
                           2278 ;------------------------------------------------------------
                           2279 ;pData                     Allocated with name '_Read_Bytes_From_DS1307_RTC_PARM_2'
                           2280 ;NoOfBytes                 Allocated with name '_Read_Bytes_From_DS1307_RTC_PARM_3'
                           2281 ;Address                   Allocated to registers r7 
                           2282 ;i                         Allocated with name '_Read_Bytes_From_DS1307_RTC_i_1_123'
                           2283 ;------------------------------------------------------------
                           2284 ;	src/DS1307.c:96: void Read_Bytes_From_DS1307_RTC(unsigned char Address, unsigned char* pData, unsigned int NoOfBytes)
                           2285 ;	-----------------------------------------
                           2286 ;	 function Read_Bytes_From_DS1307_RTC
                           2287 ;	-----------------------------------------
   0858                    2288 _Read_Bytes_From_DS1307_RTC:
   0858 AF 82         [24] 2289 	mov	r7,dpl
                           2290 ;	src/DS1307.c:100: I2C_Start();										// Start i2c communication
   085A C0 07         [24] 2291 	push	ar7
   085C 12r06r2C      [24] 2292 	lcall	_I2C_Start
   085F D0 07         [24] 2293 	pop	ar7
                           2294 ;	src/DS1307.c:103: while(I2C_Write_Byte(Device_Address_DS1307_EEPROM + 0) == 1)// Wait until device is free
   0861                    2295 00101$:
   0861 75 82 D0      [24] 2296 	mov	dpl,#0xD0
   0864 C0 07         [24] 2297 	push	ar7
   0866 12r06rAE      [24] 2298 	lcall	_I2C_Write_Byte
   0869 D0 07         [24] 2299 	pop	ar7
   086B 92*03         [24] 2300 	mov  _Read_Bytes_From_DS1307_RTC_sloc0_1_0,c
   086D E4            [12] 2301 	clr	a
   086E 33            [12] 2302 	rlc	a
   086F FE            [12] 2303 	mov	r6,a
   0870 BE 01 09      [24] 2304 	cjne	r6,#0x01,00103$
                           2305 ;	src/DS1307.c:104: {	I2C_Start();	}		
   0873 C0 07         [24] 2306 	push	ar7
   0875 12r06r2C      [24] 2307 	lcall	_I2C_Start
   0878 D0 07         [24] 2308 	pop	ar7
   087A 80 E5         [24] 2309 	sjmp	00101$
   087C                    2310 00103$:
                           2311 ;	src/DS1307.c:106: I2C_Write_Byte(Address);							// Write Address byte
   087C 8F 82         [24] 2312 	mov	dpl,r7
   087E 12r06rAE      [24] 2313 	lcall	_I2C_Write_Byte
                           2314 ;	src/DS1307.c:107: I2C_ReStart();										// Restart i2c
   0881 12r06r3E      [24] 2315 	lcall	_I2C_ReStart
                           2316 ;	src/DS1307.c:110: I2C_Write_Byte(Device_Address_DS1307_EEPROM + 1);			
   0884 75 82 D1      [24] 2317 	mov	dpl,#0xD1
   0887 12r06rAE      [24] 2318 	lcall	_I2C_Write_Byte
                           2319 ;	src/DS1307.c:112: pData[0] = I2C_Read_Byte();							// Read First byte from EEPROM
   088A AD*22         [24] 2320 	mov	r5,_Read_Bytes_From_DS1307_RTC_PARM_2
   088C AE*23         [24] 2321 	mov	r6,(_Read_Bytes_From_DS1307_RTC_PARM_2 + 1)
   088E AF*24         [24] 2322 	mov	r7,(_Read_Bytes_From_DS1307_RTC_PARM_2 + 2)
   0890 C0 07         [24] 2323 	push	ar7
   0892 C0 06         [24] 2324 	push	ar6
   0894 C0 05         [24] 2325 	push	ar5
   0896 12r07r10      [24] 2326 	lcall	_I2C_Read_Byte
   0899 AC 82         [24] 2327 	mov	r4,dpl
   089B D0 05         [24] 2328 	pop	ar5
   089D D0 06         [24] 2329 	pop	ar6
   089F D0 07         [24] 2330 	pop	ar7
   08A1 8D 82         [24] 2331 	mov	dpl,r5
   08A3 8E 83         [24] 2332 	mov	dph,r6
   08A5 8F F0         [24] 2333 	mov	b,r7
   08A7 EC            [12] 2334 	mov	a,r4
   08A8 12r00r00      [24] 2335 	lcall	__gptrput
                           2336 ;	src/DS1307.c:114: for(i=1;i<NoOfBytes;i++)							// Read NoOfBytes
   08AB 75*27 01      [24] 2337 	mov	_Read_Bytes_From_DS1307_RTC_i_1_123,#0x01
   08AE 75*28 00      [24] 2338 	mov	(_Read_Bytes_From_DS1307_RTC_i_1_123 + 1),#0x00
   08B1                    2339 00106$:
   08B1 C3            [12] 2340 	clr	c
   08B2 E5*27         [12] 2341 	mov	a,_Read_Bytes_From_DS1307_RTC_i_1_123
   08B4 95*25         [12] 2342 	subb	a,_Read_Bytes_From_DS1307_RTC_PARM_3
   08B6 E5*28         [12] 2343 	mov	a,(_Read_Bytes_From_DS1307_RTC_i_1_123 + 1)
   08B8 95*26         [12] 2344 	subb	a,(_Read_Bytes_From_DS1307_RTC_PARM_3 + 1)
   08BA 50 4A         [24] 2345 	jnc	00104$
                           2346 ;	src/DS1307.c:116: I2C_Send_ACK();					// Give Ack to slave to start receiving next byte
   08BC C0 07         [24] 2347 	push	ar7
   08BE C0 06         [24] 2348 	push	ar6
   08C0 C0 05         [24] 2349 	push	ar5
   08C2 12r06r7E      [24] 2350 	lcall	_I2C_Send_ACK
   08C5 D0 05         [24] 2351 	pop	ar5
   08C7 D0 06         [24] 2352 	pop	ar6
   08C9 D0 07         [24] 2353 	pop	ar7
                           2354 ;	src/DS1307.c:117: pData[i] = I2C_Read_Byte();		// Read next byte from EEPROM
   08CB E5*27         [12] 2355 	mov	a,_Read_Bytes_From_DS1307_RTC_i_1_123
   08CD 2D            [12] 2356 	add	a,r5
   08CE F8            [12] 2357 	mov	r0,a
   08CF E5*28         [12] 2358 	mov	a,(_Read_Bytes_From_DS1307_RTC_i_1_123 + 1)
   08D1 3E            [12] 2359 	addc	a,r6
   08D2 F9            [12] 2360 	mov	r1,a
   08D3 8F 02         [24] 2361 	mov	ar2,r7
   08D5 C0 07         [24] 2362 	push	ar7
   08D7 C0 06         [24] 2363 	push	ar6
   08D9 C0 05         [24] 2364 	push	ar5
   08DB C0 02         [24] 2365 	push	ar2
   08DD C0 01         [24] 2366 	push	ar1
   08DF C0 00         [24] 2367 	push	ar0
   08E1 12r07r10      [24] 2368 	lcall	_I2C_Read_Byte
   08E4 AC 82         [24] 2369 	mov	r4,dpl
   08E6 D0 00         [24] 2370 	pop	ar0
   08E8 D0 01         [24] 2371 	pop	ar1
   08EA D0 02         [24] 2372 	pop	ar2
   08EC D0 05         [24] 2373 	pop	ar5
   08EE D0 06         [24] 2374 	pop	ar6
   08F0 D0 07         [24] 2375 	pop	ar7
   08F2 88 82         [24] 2376 	mov	dpl,r0
   08F4 89 83         [24] 2377 	mov	dph,r1
   08F6 8A F0         [24] 2378 	mov	b,r2
   08F8 EC            [12] 2379 	mov	a,r4
   08F9 12r00r00      [24] 2380 	lcall	__gptrput
                           2381 ;	src/DS1307.c:114: for(i=1;i<NoOfBytes;i++)							// Read NoOfBytes
   08FC 05*27         [12] 2382 	inc	_Read_Bytes_From_DS1307_RTC_i_1_123
   08FE E4            [12] 2383 	clr	a
   08FF B5*27 AF      [24] 2384 	cjne	a,_Read_Bytes_From_DS1307_RTC_i_1_123,00106$
   0902 05*28         [12] 2385 	inc	(_Read_Bytes_From_DS1307_RTC_i_1_123 + 1)
   0904 80 AB         [24] 2386 	sjmp	00106$
   0906                    2387 00104$:
                           2388 ;	src/DS1307.c:122: I2C_Send_NACK();
   0906 12r06r96      [24] 2389 	lcall	_I2C_Send_NACK
                           2390 ;	src/DS1307.c:125: Set_SDA_Low;				// Make SDA Low
   0909 C2 90         [12] 2391 	clr	_SDA
                           2392 ;	src/DS1307.c:126: __delay_us(HalfBitDelay);	// Half bit delay
   090B 90 01 F4      [24] 2393 	mov	dptr,#0x01F4
   090E 12r06r07      [24] 2394 	lcall	___delay_us
                           2395 ;	src/DS1307.c:127: Set_SDA_High;				// Make SDA high
   0911 D2 90         [12] 2396 	setb	_SDA
                           2397 ;	src/DS1307.c:128: __delay_us(HalfBitDelay);	// Half bit delay
   0913 90 01 F4      [24] 2398 	mov	dptr,#0x01F4
   0916 02r06r07      [24] 2399 	ljmp	___delay_us
                           2400 ;------------------------------------------------------------
                           2401 ;Allocation info for local variables in function 'Set_DS1307_RTC_Time'
                           2402 ;------------------------------------------------------------
                           2403 ;Hours                     Allocated with name '_Set_DS1307_RTC_Time_PARM_2'
                           2404 ;Mins                      Allocated with name '_Set_DS1307_RTC_Time_PARM_3'
                           2405 ;Secs                      Allocated with name '_Set_DS1307_RTC_Time_PARM_4'
                           2406 ;Mode                      Allocated to registers r7 
                           2407 ;------------------------------------------------------------
                           2408 ;	src/DS1307.c:139: void Set_DS1307_RTC_Time(unsigned char Mode, unsigned char Hours, unsigned char Mins, unsigned char Secs)
                           2409 ;	-----------------------------------------
                           2410 ;	 function Set_DS1307_RTC_Time
                           2411 ;	-----------------------------------------
   0919                    2412 _Set_DS1307_RTC_Time:
   0919 AF 82         [24] 2413 	mov	r7,dpl
                           2414 ;	src/DS1307.c:142: pRTCArray[0] = (((unsigned char)(Secs/10))<<4)|((unsigned char)(Secs%10));
   091B 75 F0 0A      [24] 2415 	mov	b,#0x0A
   091E E5*2B         [12] 2416 	mov	a,_Set_DS1307_RTC_Time_PARM_4
   0920 84            [48] 2417 	div	ab
   0921 C4            [12] 2418 	swap	a
   0922 54 F0         [12] 2419 	anl	a,#0xF0
   0924 FE            [12] 2420 	mov	r6,a
   0925 75 F0 0A      [24] 2421 	mov	b,#0x0A
   0928 E5*2B         [12] 2422 	mov	a,_Set_DS1307_RTC_Time_PARM_4
   092A 84            [48] 2423 	div	ab
   092B E5 F0         [12] 2424 	mov	a,b
   092D 4E            [12] 2425 	orl	a,r6
   092E F5*18         [12] 2426 	mov	_pRTCArray,a
                           2427 ;	src/DS1307.c:143: pRTCArray[1] = (((unsigned char)(Mins/10))<<4)|((unsigned char)(Mins%10));
   0930 75 F0 0A      [24] 2428 	mov	b,#0x0A
   0933 E5*2A         [12] 2429 	mov	a,_Set_DS1307_RTC_Time_PARM_3
   0935 84            [48] 2430 	div	ab
   0936 C4            [12] 2431 	swap	a
   0937 54 F0         [12] 2432 	anl	a,#0xF0
   0939 FE            [12] 2433 	mov	r6,a
   093A 75 F0 0A      [24] 2434 	mov	b,#0x0A
   093D E5*2A         [12] 2435 	mov	a,_Set_DS1307_RTC_Time_PARM_3
   093F 84            [48] 2436 	div	ab
   0940 E5 F0         [12] 2437 	mov	a,b
   0942 4E            [12] 2438 	orl	a,r6
   0943 F5*19         [12] 2439 	mov	(_pRTCArray + 0x0001),a
                           2440 ;	src/DS1307.c:144: pRTCArray[2] = (((unsigned char)(Hours/10))<<4)|((unsigned char)(Hours%10));
   0945 75 F0 0A      [24] 2441 	mov	b,#0x0A
   0948 E5*29         [12] 2442 	mov	a,_Set_DS1307_RTC_Time_PARM_2
   094A 84            [48] 2443 	div	ab
   094B C4            [12] 2444 	swap	a
   094C 54 F0         [12] 2445 	anl	a,#0xF0
   094E FE            [12] 2446 	mov	r6,a
   094F 75 F0 0A      [24] 2447 	mov	b,#0x0A
   0952 E5*29         [12] 2448 	mov	a,_Set_DS1307_RTC_Time_PARM_2
   0954 84            [48] 2449 	div	ab
   0955 E5 F0         [12] 2450 	mov	a,b
   0957 FD            [12] 2451 	mov	r5,a
   0958 4E            [12] 2452 	orl	a,r6
   0959 F5*1A         [12] 2453 	mov	(_pRTCArray + 0x0002),a
                           2454 ;	src/DS1307.c:146: switch(Mode)	// Set mode bits
   095B BF 00 02      [24] 2455 	cjne	r7,#0x00,00113$
   095E 80 05         [24] 2456 	sjmp	00101$
   0960                    2457 00113$:
                           2458 ;	src/DS1307.c:148: case AM_Time: 	pRTCArray[2] |= 0x40;	break;
   0960 BF 01 10      [24] 2459 	cjne	r7,#0x01,00104$
   0963 80 08         [24] 2460 	sjmp	00102$
   0965                    2461 00101$:
   0965 74 40         [12] 2462 	mov	a,#0x40
   0967 45*1A         [12] 2463 	orl	a,(_pRTCArray + 0x0002)
   0969 F5*1A         [12] 2464 	mov	(_pRTCArray + 0x0002),a
                           2465 ;	src/DS1307.c:149: case PM_Time: 	pRTCArray[2] |= 0x60;	break;
   096B 80 06         [24] 2466 	sjmp	00104$
   096D                    2467 00102$:
   096D 74 60         [12] 2468 	mov	a,#0x60
   096F 45*1A         [12] 2469 	orl	a,(_pRTCArray + 0x0002)
   0971 F5*1A         [12] 2470 	mov	(_pRTCArray + 0x0002),a
                           2471 ;	src/DS1307.c:152: }
   0973                    2472 00104$:
                           2473 ;	src/DS1307.c:155: Write_Bytes_To_DS1307_RTC(0x00, pRTCArray, 3);
   0973 75*1Er18      [24] 2474 	mov	_Write_Bytes_To_DS1307_RTC_PARM_2,#_pRTCArray
   0976 75*1F 00      [24] 2475 	mov	(_Write_Bytes_To_DS1307_RTC_PARM_2 + 1),#0x00
   0979 75*20 40      [24] 2476 	mov	(_Write_Bytes_To_DS1307_RTC_PARM_2 + 2),#0x40
   097C 75*21 03      [24] 2477 	mov	_Write_Bytes_To_DS1307_RTC_PARM_3,#0x03
   097F 75 82 00      [24] 2478 	mov	dpl,#0x00
   0982 02r07rF6      [24] 2479 	ljmp	_Write_Bytes_To_DS1307_RTC
                           2480 ;------------------------------------------------------------
                           2481 ;Allocation info for local variables in function 'Get_DS1307_RTC_Time'
                           2482 ;------------------------------------------------------------
                           2483 ;	src/DS1307.c:168: unsigned char* Get_DS1307_RTC_Time(void)
                           2484 ;	-----------------------------------------
                           2485 ;	 function Get_DS1307_RTC_Time
                           2486 ;	-----------------------------------------
   0985                    2487 _Get_DS1307_RTC_Time:
                           2488 ;	src/DS1307.c:171: Read_Bytes_From_DS1307_RTC(0x00, pRTCArray, 3);
   0985 75*22r18      [24] 2489 	mov	_Read_Bytes_From_DS1307_RTC_PARM_2,#_pRTCArray
   0988 75*23 00      [24] 2490 	mov	(_Read_Bytes_From_DS1307_RTC_PARM_2 + 1),#0x00
   098B 75*24 40      [24] 2491 	mov	(_Read_Bytes_From_DS1307_RTC_PARM_2 + 2),#0x40
   098E 75*25 03      [24] 2492 	mov	_Read_Bytes_From_DS1307_RTC_PARM_3,#0x03
   0991 75*26 00      [24] 2493 	mov	(_Read_Bytes_From_DS1307_RTC_PARM_3 + 1),#0x00
   0994 75 82 00      [24] 2494 	mov	dpl,#0x00
   0997 12r08r58      [24] 2495 	lcall	_Read_Bytes_From_DS1307_RTC
                           2496 ;	src/DS1307.c:174: Temp = pRTCArray[0];
   099A 85*18*1C      [24] 2497 	mov	_Temp,_pRTCArray
                           2498 ;	src/DS1307.c:175: pRTCArray[0] = ((Temp&0x7F)>>4)*10 + (Temp&0x0F);
   099D 74 7F         [12] 2499 	mov	a,#0x7F
   099F 55*1C         [12] 2500 	anl	a,_Temp
   09A1 C4            [12] 2501 	swap	a
   09A2 54 0F         [12] 2502 	anl	a,#0x0F
   09A4 75 F0 0A      [24] 2503 	mov	b,#0x0A
   09A7 A4            [48] 2504 	mul	ab
   09A8 FF            [12] 2505 	mov	r7,a
   09A9 74 0F         [12] 2506 	mov	a,#0x0F
   09AB 55*1C         [12] 2507 	anl	a,_Temp
   09AD 2F            [12] 2508 	add	a,r7
   09AE F5*18         [12] 2509 	mov	_pRTCArray,a
                           2510 ;	src/DS1307.c:178: Temp = pRTCArray[1];
                           2511 ;	src/DS1307.c:179: pRTCArray[1] = (Temp>>4)*10 + (Temp&0x0F);
   09B0 E5*19         [12] 2512 	mov	a,(_pRTCArray + 0x0001)
   09B2 F5*1C         [12] 2513 	mov	_Temp,a
   09B4 C4            [12] 2514 	swap	a
   09B5 54 0F         [12] 2515 	anl	a,#0x0F
   09B7 75 F0 0A      [24] 2516 	mov	b,#0x0A
   09BA A4            [48] 2517 	mul	ab
   09BB FF            [12] 2518 	mov	r7,a
   09BC 74 0F         [12] 2519 	mov	a,#0x0F
   09BE 55*1C         [12] 2520 	anl	a,_Temp
   09C0 2F            [12] 2521 	add	a,r7
   09C1 F5*19         [12] 2522 	mov	(_pRTCArray + 0x0001),a
                           2523 ;	src/DS1307.c:182: if(pRTCArray[2]&0x40)	// if 12 hours mode
   09C3 E5*1A         [12] 2524 	mov	a,(_pRTCArray + 0x0002)
   09C5 FF            [12] 2525 	mov	r7,a
   09C6 30 E6 24      [24] 2526 	jnb	acc.6,00105$
                           2527 ;	src/DS1307.c:184: if(pRTCArray[2]&0x20)	// if PM Time
   09C9 EF            [12] 2528 	mov	a,r7
   09CA 30 E5 05      [24] 2529 	jnb	acc.5,00102$
                           2530 ;	src/DS1307.c:185: pRTCArray[3] = PM_Time;
   09CD 75*1B 01      [24] 2531 	mov	(_pRTCArray + 0x0003),#0x01
   09D0 80 03         [24] 2532 	sjmp	00103$
   09D2                    2533 00102$:
                           2534 ;	src/DS1307.c:187: pRTCArray[3] = AM_Time;
   09D2 75*1B 00      [24] 2535 	mov	(_pRTCArray + 0x0003),#0x00
   09D5                    2536 00103$:
                           2537 ;	src/DS1307.c:189: Temp = pRTCArray[2];
   09D5 85*1A*1C      [24] 2538 	mov	_Temp,(_pRTCArray + 0x0002)
                           2539 ;	src/DS1307.c:190: pRTCArray[2] = ((Temp&0x1F)>>4)*10 + (Temp&0x0F);
   09D8 74 1F         [12] 2540 	mov	a,#0x1F
   09DA 55*1C         [12] 2541 	anl	a,_Temp
   09DC C4            [12] 2542 	swap	a
   09DD 54 0F         [12] 2543 	anl	a,#0x0F
   09DF 75 F0 0A      [24] 2544 	mov	b,#0x0A
   09E2 A4            [48] 2545 	mul	ab
   09E3 FE            [12] 2546 	mov	r6,a
   09E4 74 0F         [12] 2547 	mov	a,#0x0F
   09E6 55*1C         [12] 2548 	anl	a,_Temp
   09E8 2E            [12] 2549 	add	a,r6
   09E9 F5*1A         [12] 2550 	mov	(_pRTCArray + 0x0002),a
   09EB 80 15         [24] 2551 	sjmp	00106$
   09ED                    2552 00105$:
                           2553 ;	src/DS1307.c:194: Temp = pRTCArray[2];
                           2554 ;	src/DS1307.c:195: pRTCArray[2] = (Temp>>4)*10 + (Temp&0x0F);
   09ED EF            [12] 2555 	mov	a,r7
   09EE F5*1C         [12] 2556 	mov	_Temp,a
   09F0 C4            [12] 2557 	swap	a
   09F1 54 0F         [12] 2558 	anl	a,#0x0F
   09F3 75 F0 0A      [24] 2559 	mov	b,#0x0A
   09F6 A4            [48] 2560 	mul	ab
   09F7 FF            [12] 2561 	mov	r7,a
   09F8 74 0F         [12] 2562 	mov	a,#0x0F
   09FA 55*1C         [12] 2563 	anl	a,_Temp
   09FC 2F            [12] 2564 	add	a,r7
   09FD F5*1A         [12] 2565 	mov	(_pRTCArray + 0x0002),a
                           2566 ;	src/DS1307.c:196: pRTCArray[3] = TwentyFourHoursMode;
   09FF 75*1B 02      [24] 2567 	mov	(_pRTCArray + 0x0003),#0x02
   0A02                    2568 00106$:
                           2569 ;	src/DS1307.c:199: return pRTCArray;
   0A02 90r00r18      [24] 2570 	mov	dptr,#_pRTCArray
   0A05 75 F0 40      [24] 2571 	mov	b,#0x40
   0A08 22            [24] 2572 	ret
                           2573 ;------------------------------------------------------------
                           2574 ;Allocation info for local variables in function 'Set_DS1307_RTC_Date'
                           2575 ;------------------------------------------------------------
                           2576 ;Month                     Allocated with name '_Set_DS1307_RTC_Date_PARM_2'
                           2577 ;Year                      Allocated with name '_Set_DS1307_RTC_Date_PARM_3'
                           2578 ;Day                       Allocated with name '_Set_DS1307_RTC_Date_PARM_4'
                           2579 ;Date                      Allocated to registers r7 
                           2580 ;------------------------------------------------------------
                           2581 ;	src/DS1307.c:211: void Set_DS1307_RTC_Date(unsigned char Date, unsigned char Month, unsigned char Year, unsigned char Day)
                           2582 ;	-----------------------------------------
                           2583 ;	 function Set_DS1307_RTC_Date
                           2584 ;	-----------------------------------------
   0A09                    2585 _Set_DS1307_RTC_Date:
   0A09 AF 82         [24] 2586 	mov	r7,dpl
                           2587 ;	src/DS1307.c:214: pRTCArray[0] = (((unsigned char)(Day/10))<<4)|((unsigned char)(Day%10));
   0A0B 75 F0 0A      [24] 2588 	mov	b,#0x0A
   0A0E E5*2E         [12] 2589 	mov	a,_Set_DS1307_RTC_Date_PARM_4
   0A10 84            [48] 2590 	div	ab
   0A11 C4            [12] 2591 	swap	a
   0A12 54 F0         [12] 2592 	anl	a,#0xF0
   0A14 FE            [12] 2593 	mov	r6,a
   0A15 75 F0 0A      [24] 2594 	mov	b,#0x0A
   0A18 E5*2E         [12] 2595 	mov	a,_Set_DS1307_RTC_Date_PARM_4
   0A1A 84            [48] 2596 	div	ab
   0A1B E5 F0         [12] 2597 	mov	a,b
   0A1D 4E            [12] 2598 	orl	a,r6
   0A1E F5*18         [12] 2599 	mov	_pRTCArray,a
                           2600 ;	src/DS1307.c:215: pRTCArray[1] = (((unsigned char)(Date/10))<<4)|((unsigned char)(Date%10));
   0A20 75 F0 0A      [24] 2601 	mov	b,#0x0A
   0A23 EF            [12] 2602 	mov	a,r7
   0A24 84            [48] 2603 	div	ab
   0A25 C4            [12] 2604 	swap	a
   0A26 54 F0         [12] 2605 	anl	a,#0xF0
   0A28 FE            [12] 2606 	mov	r6,a
   0A29 75 F0 0A      [24] 2607 	mov	b,#0x0A
   0A2C EF            [12] 2608 	mov	a,r7
   0A2D 84            [48] 2609 	div	ab
   0A2E E5 F0         [12] 2610 	mov	a,b
   0A30 4E            [12] 2611 	orl	a,r6
   0A31 F5*19         [12] 2612 	mov	(_pRTCArray + 0x0001),a
                           2613 ;	src/DS1307.c:216: pRTCArray[2] = (((unsigned char)(Month/10))<<4)|((unsigned char)(Month%10));
   0A33 75 F0 0A      [24] 2614 	mov	b,#0x0A
   0A36 E5*2C         [12] 2615 	mov	a,_Set_DS1307_RTC_Date_PARM_2
   0A38 84            [48] 2616 	div	ab
   0A39 C4            [12] 2617 	swap	a
   0A3A 54 F0         [12] 2618 	anl	a,#0xF0
   0A3C FF            [12] 2619 	mov	r7,a
   0A3D 75 F0 0A      [24] 2620 	mov	b,#0x0A
   0A40 E5*2C         [12] 2621 	mov	a,_Set_DS1307_RTC_Date_PARM_2
   0A42 84            [48] 2622 	div	ab
   0A43 E5 F0         [12] 2623 	mov	a,b
   0A45 4F            [12] 2624 	orl	a,r7
   0A46 F5*1A         [12] 2625 	mov	(_pRTCArray + 0x0002),a
                           2626 ;	src/DS1307.c:217: pRTCArray[3] = (((unsigned char)(Year/10))<<4)|((unsigned char)(Year%10));
   0A48 75 F0 0A      [24] 2627 	mov	b,#0x0A
   0A4B E5*2D         [12] 2628 	mov	a,_Set_DS1307_RTC_Date_PARM_3
   0A4D 84            [48] 2629 	div	ab
   0A4E C4            [12] 2630 	swap	a
   0A4F 54 F0         [12] 2631 	anl	a,#0xF0
   0A51 FF            [12] 2632 	mov	r7,a
   0A52 75 F0 0A      [24] 2633 	mov	b,#0x0A
   0A55 E5*2D         [12] 2634 	mov	a,_Set_DS1307_RTC_Date_PARM_3
   0A57 84            [48] 2635 	div	ab
   0A58 E5 F0         [12] 2636 	mov	a,b
   0A5A 4F            [12] 2637 	orl	a,r7
   0A5B F5*1B         [12] 2638 	mov	(_pRTCArray + 0x0003),a
                           2639 ;	src/DS1307.c:220: Write_Bytes_To_DS1307_RTC(0x03, pRTCArray, 4);
   0A5D 75*1Er18      [24] 2640 	mov	_Write_Bytes_To_DS1307_RTC_PARM_2,#_pRTCArray
   0A60 75*1F 00      [24] 2641 	mov	(_Write_Bytes_To_DS1307_RTC_PARM_2 + 1),#0x00
   0A63 75*20 40      [24] 2642 	mov	(_Write_Bytes_To_DS1307_RTC_PARM_2 + 2),#0x40
   0A66 75*21 04      [24] 2643 	mov	_Write_Bytes_To_DS1307_RTC_PARM_3,#0x04
   0A69 75 82 03      [24] 2644 	mov	dpl,#0x03
   0A6C 02r07rF6      [24] 2645 	ljmp	_Write_Bytes_To_DS1307_RTC
                           2646 ;------------------------------------------------------------
                           2647 ;Allocation info for local variables in function 'Get_DS1307_RTC_Date'
                           2648 ;------------------------------------------------------------
                           2649 ;	src/DS1307.c:232: unsigned char* Get_DS1307_RTC_Date(void)
                           2650 ;	-----------------------------------------
                           2651 ;	 function Get_DS1307_RTC_Date
                           2652 ;	-----------------------------------------
   0A6F                    2653 _Get_DS1307_RTC_Date:
                           2654 ;	src/DS1307.c:235: Read_Bytes_From_DS1307_RTC(0x03, pRTCArray, 4);
   0A6F 75*22r18      [24] 2655 	mov	_Read_Bytes_From_DS1307_RTC_PARM_2,#_pRTCArray
   0A72 75*23 00      [24] 2656 	mov	(_Read_Bytes_From_DS1307_RTC_PARM_2 + 1),#0x00
   0A75 75*24 40      [24] 2657 	mov	(_Read_Bytes_From_DS1307_RTC_PARM_2 + 2),#0x40
   0A78 75*25 04      [24] 2658 	mov	_Read_Bytes_From_DS1307_RTC_PARM_3,#0x04
   0A7B 75*26 00      [24] 2659 	mov	(_Read_Bytes_From_DS1307_RTC_PARM_3 + 1),#0x00
   0A7E 75 82 03      [24] 2660 	mov	dpl,#0x03
   0A81 12r08r58      [24] 2661 	lcall	_Read_Bytes_From_DS1307_RTC
                           2662 ;	src/DS1307.c:238: Temp = pRTCArray[1];
                           2663 ;	src/DS1307.c:239: pRTCArray[1] = (Temp>>4)*10 + (Temp&0x0F);
   0A84 E5*19         [12] 2664 	mov	a,(_pRTCArray + 0x0001)
   0A86 F5*1C         [12] 2665 	mov	_Temp,a
   0A88 C4            [12] 2666 	swap	a
   0A89 54 0F         [12] 2667 	anl	a,#0x0F
   0A8B 75 F0 0A      [24] 2668 	mov	b,#0x0A
   0A8E A4            [48] 2669 	mul	ab
   0A8F FF            [12] 2670 	mov	r7,a
   0A90 74 0F         [12] 2671 	mov	a,#0x0F
   0A92 55*1C         [12] 2672 	anl	a,_Temp
   0A94 2F            [12] 2673 	add	a,r7
   0A95 F5*19         [12] 2674 	mov	(_pRTCArray + 0x0001),a
                           2675 ;	src/DS1307.c:242: Temp = pRTCArray[2];
                           2676 ;	src/DS1307.c:243: pRTCArray[2] = (Temp>>4)*10 + (Temp&0x0F);
   0A97 E5*1A         [12] 2677 	mov	a,(_pRTCArray + 0x0002)
   0A99 F5*1C         [12] 2678 	mov	_Temp,a
   0A9B C4            [12] 2679 	swap	a
   0A9C 54 0F         [12] 2680 	anl	a,#0x0F
   0A9E 75 F0 0A      [24] 2681 	mov	b,#0x0A
   0AA1 A4            [48] 2682 	mul	ab
   0AA2 FF            [12] 2683 	mov	r7,a
   0AA3 74 0F         [12] 2684 	mov	a,#0x0F
   0AA5 55*1C         [12] 2685 	anl	a,_Temp
   0AA7 2F            [12] 2686 	add	a,r7
   0AA8 F5*1A         [12] 2687 	mov	(_pRTCArray + 0x0002),a
                           2688 ;	src/DS1307.c:246: Temp = pRTCArray[3];
                           2689 ;	src/DS1307.c:247: pRTCArray[3] = (Temp>>4)*10 + (Temp&0x0F);
   0AAA E5*1B         [12] 2690 	mov	a,(_pRTCArray + 0x0003)
   0AAC F5*1C         [12] 2691 	mov	_Temp,a
   0AAE C4            [12] 2692 	swap	a
   0AAF 54 0F         [12] 2693 	anl	a,#0x0F
   0AB1 75 F0 0A      [24] 2694 	mov	b,#0x0A
   0AB4 A4            [48] 2695 	mul	ab
   0AB5 FF            [12] 2696 	mov	r7,a
   0AB6 74 0F         [12] 2697 	mov	a,#0x0F
   0AB8 55*1C         [12] 2698 	anl	a,_Temp
   0ABA 2F            [12] 2699 	add	a,r7
   0ABB F5*1B         [12] 2700 	mov	(_pRTCArray + 0x0003),a
                           2701 ;	src/DS1307.c:249: return pRTCArray;
   0ABD 90r00r18      [24] 2702 	mov	dptr,#_pRTCArray
   0AC0 75 F0 40      [24] 2703 	mov	b,#0x40
   0AC3 22            [24] 2704 	ret
                           2705 ;------------------------------------------------------------
                           2706 ;Allocation info for local variables in function 'main'
                           2707 ;------------------------------------------------------------
                           2708 ;	src/main.c:19: void main(){
                           2709 ;	-----------------------------------------
                           2710 ;	 function main
                           2711 ;	-----------------------------------------
   0AC4                    2712 _main:
                           2713 ;	src/main.c:21: nVar = 0;
   0AC4 E4            [12] 2714 	clr	a
   0AC5 F5*34         [12] 2715 	mov	_nVar,a
   0AC7 F5*35         [12] 2716 	mov	(_nVar + 1),a
                           2717 ;	src/main.c:26: if( beginScreen() ){
   0AC9 12r05rFD      [24] 2718 	lcall	_beginScreen
   0ACC E5 82         [12] 2719 	mov	a,dpl
   0ACE 85 83 F0      [24] 2720 	mov	b,dph
   0AD1 45 F0         [12] 2721 	orl	a,b
   0AD3 60 02         [24] 2722 	jz	00102$
                           2723 ;	src/main.c:27: PORTA_7 = HIGH; //pull an led HIGH to indicate failiure.
   0AD5 D2 87         [12] 2724 	setb	_P0_7
   0AD7                    2725 00102$:
                           2726 ;	src/main.c:33: splashImage();
   0AD7 12r03r8B      [24] 2727 	lcall	_splashImage
                           2728 ;	src/main.c:36: borders( '1', 0, 2, 127);				//draw borders of the screen
   0ADA E4            [12] 2729 	clr	a
   0ADB F5*12         [12] 2730 	mov	_borders_PARM_2,a
   0ADD F5*13         [12] 2731 	mov	(_borders_PARM_2 + 1),a
   0ADF 75*14 02      [24] 2732 	mov	_borders_PARM_3,#0x02
   0AE2 75*15 00      [24] 2733 	mov	(_borders_PARM_3 + 1),#0x00
   0AE5 75*16 7F      [24] 2734 	mov	_borders_PARM_4,#0x7F
   0AE8 75*17 00      [24] 2735 	mov	(_borders_PARM_4 + 1),#0x00
   0AEB 75 82 31      [24] 2736 	mov	dpl,#0x31
   0AEE 12r04rDE      [24] 2737 	lcall	_borders
                           2738 ;	src/main.c:37: delayms( 3000 );
   0AF1 90 0B B8      [24] 2739 	mov	dptr,#0x0BB8
   0AF4 12r00r00      [24] 2740 	lcall	_delayms
                           2741 ;	src/main.c:39: clearGLCD();
   0AF7 12r00r9F      [24] 2742 	lcall	_clearGLCD
                           2743 ;	src/main.c:40: showGLCDTime();			//from glcd lib.
   0AFA 12r05r53      [24] 2744 	lcall	_showGLCDTime
                           2745 ;	src/main.c:61: while( 1 ){
   0AFD                    2746 00104$:
   0AFD 80 FE         [24] 2747 	sjmp	00104$
                           2748 ;------------------------------------------------------------
                           2749 ;Allocation info for local variables in function 'getCharLen'
                           2750 ;------------------------------------------------------------
                           2751 ;chVal                     Allocated to registers r5 r6 r7 
                           2752 ;------------------------------------------------------------
                           2753 ;	src/main.c:105: int getCharLen( char * chVal ){
                           2754 ;	-----------------------------------------
                           2755 ;	 function getCharLen
                           2756 ;	-----------------------------------------
   0AFF                    2757 _getCharLen:
   0AFF AD 82         [24] 2758 	mov	r5,dpl
   0B01 AE 83         [24] 2759 	mov	r6,dph
   0B03 AF F0         [24] 2760 	mov	r7,b
                           2761 ;	src/main.c:107: for( i = 1; chVal[i]!='\0'; i++){
   0B05 75*32 01      [24] 2762 	mov	_i,#0x01
   0B08 75*33 00      [24] 2763 	mov	(_i + 1),#0x00
   0B0B                    2764 00103$:
   0B0B E5*32         [12] 2765 	mov	a,_i
   0B0D 2D            [12] 2766 	add	a,r5
   0B0E FA            [12] 2767 	mov	r2,a
   0B0F E5*33         [12] 2768 	mov	a,(_i + 1)
   0B11 3E            [12] 2769 	addc	a,r6
   0B12 FB            [12] 2770 	mov	r3,a
   0B13 8F 04         [24] 2771 	mov	ar4,r7
   0B15 8A 82         [24] 2772 	mov	dpl,r2
   0B17 8B 83         [24] 2773 	mov	dph,r3
   0B19 8C F0         [24] 2774 	mov	b,r4
   0B1B 12r00r00      [24] 2775 	lcall	__gptrget
   0B1E FA            [12] 2776 	mov	r2,a
   0B1F 60 0A         [24] 2777 	jz	00101$
   0B21 05*32         [12] 2778 	inc	_i
   0B23 E4            [12] 2779 	clr	a
   0B24 B5*32 E4      [24] 2780 	cjne	a,_i,00103$
   0B27 05*33         [12] 2781 	inc	(_i + 1)
   0B29 80 E0         [24] 2782 	sjmp	00103$
   0B2B                    2783 00101$:
                           2784 ;	src/main.c:109: return i;
   0B2B 85*32 82      [24] 2785 	mov	dpl,_i
   0B2E 85*33 83      [24] 2786 	mov	dph,(_i + 1)
   0B31 22            [24] 2787 	ret
                           2788 	.area CSEG    (CODE)
                           2789 	.area CONST   (CODE)
   0000                    2790 _glcdNumberSystemFont:
   0000 FF                 2791 	.db #0xFF	; 255
   0001 81                 2792 	.db #0x81	; 129
   0002 81                 2793 	.db #0x81	; 129
   0003 FF                 2794 	.db #0xFF	; 255
   0004 00                 2795 	.db #0x00	; 0
   0005 FF                 2796 	.db #0xFF	; 255
   0006 00                 2797 	.db #0x00	; 0
   0007 00                 2798 	.db #0x00	; 0
   0008 F9                 2799 	.db #0xF9	; 249
   0009 89                 2800 	.db #0x89	; 137
   000A 89                 2801 	.db #0x89	; 137
   000B 8F                 2802 	.db #0x8F	; 143
   000C 89                 2803 	.db #0x89	; 137
   000D 89                 2804 	.db #0x89	; 137
   000E 89                 2805 	.db #0x89	; 137
   000F FF                 2806 	.db #0xFF	; 255
   0010 0F                 2807 	.db #0x0F	; 15
   0011 08                 2808 	.db #0x08	; 8
   0012 08                 2809 	.db #0x08	; 8
   0013 FF                 2810 	.db #0xFF	; 255
   0014 8F                 2811 	.db #0x8F	; 143
   0015 89                 2812 	.db #0x89	; 137
   0016 89                 2813 	.db #0x89	; 137
   0017 F9                 2814 	.db #0xF9	; 249
   0018 FF                 2815 	.db #0xFF	; 255
   0019 89                 2816 	.db #0x89	; 137
   001A 89                 2817 	.db #0x89	; 137
   001B F9                 2818 	.db #0xF9	; 249
   001C 01                 2819 	.db #0x01	; 1
   001D 01                 2820 	.db #0x01	; 1
   001E 01                 2821 	.db #0x01	; 1
   001F FF                 2822 	.db #0xFF	; 255
   0020 FF                 2823 	.db #0xFF	; 255
   0021 89                 2824 	.db #0x89	; 137
   0022 89                 2825 	.db #0x89	; 137
   0023 FF                 2826 	.db #0xFF	; 255
   0024 9F                 2827 	.db #0x9F	; 159
   0025 91                 2828 	.db #0x91	; 145
   0026 91                 2829 	.db #0x91	; 145
   0027 FF                 2830 	.db #0xFF	; 255
   0028                    2831 _glcdCharSystemFont:
   0028 7C                 2832 	.db #0x7C	; 124
   0029 7E                 2833 	.db #0x7E	; 126
   002A 13                 2834 	.db #0x13	; 19
   002B 13                 2835 	.db #0x13	; 19
   002C 7E                 2836 	.db #0x7E	; 126
   002D 7C                 2837 	.db #0x7C	; 124
   002E 00                 2838 	.db #0x00	; 0
   002F 41                 2839 	.db #0x41	; 65	'A'
   0030 7F                 2840 	.db #0x7F	; 127
   0031 7F                 2841 	.db #0x7F	; 127
   0032 49                 2842 	.db #0x49	; 73	'I'
   0033 49                 2843 	.db #0x49	; 73	'I'
   0034 7F                 2844 	.db #0x7F	; 127
   0035 36                 2845 	.db #0x36	; 54	'6'
   0036 1C                 2846 	.db #0x1C	; 28
   0037 3E                 2847 	.db #0x3E	; 62
   0038 63                 2848 	.db #0x63	; 99	'c'
   0039 41                 2849 	.db #0x41	; 65	'A'
   003A 41                 2850 	.db #0x41	; 65	'A'
   003B 63                 2851 	.db #0x63	; 99	'c'
   003C 22                 2852 	.db #0x22	; 34
   003D 41                 2853 	.db #0x41	; 65	'A'
   003E 7F                 2854 	.db #0x7F	; 127
   003F 7F                 2855 	.db #0x7F	; 127
   0040 41                 2856 	.db #0x41	; 65	'A'
   0041 63                 2857 	.db #0x63	; 99	'c'
   0042 3E                 2858 	.db #0x3E	; 62
   0043 1C                 2859 	.db #0x1C	; 28
   0044 41                 2860 	.db #0x41	; 65	'A'
   0045 7F                 2861 	.db #0x7F	; 127
   0046 7F                 2862 	.db #0x7F	; 127
   0047 49                 2863 	.db #0x49	; 73	'I'
   0048 5D                 2864 	.db #0x5D	; 93
   0049 41                 2865 	.db #0x41	; 65	'A'
   004A 63                 2866 	.db #0x63	; 99	'c'
   004B 41                 2867 	.db #0x41	; 65	'A'
   004C 7F                 2868 	.db #0x7F	; 127
   004D 7F                 2869 	.db #0x7F	; 127
   004E 49                 2870 	.db #0x49	; 73	'I'
   004F 1D                 2871 	.db #0x1D	; 29
   0050 01                 2872 	.db #0x01	; 1
   0051 03                 2873 	.db #0x03	; 3
   0052 1C                 2874 	.db #0x1C	; 28
   0053 3E                 2875 	.db #0x3E	; 62
   0054 63                 2876 	.db #0x63	; 99	'c'
   0055 41                 2877 	.db #0x41	; 65	'A'
   0056 51                 2878 	.db #0x51	; 81	'Q'
   0057 73                 2879 	.db #0x73	; 115	's'
   0058 72                 2880 	.db #0x72	; 114	'r'
   0059 7F                 2881 	.db #0x7F	; 127
   005A 7F                 2882 	.db #0x7F	; 127
   005B 08                 2883 	.db #0x08	; 8
   005C 08                 2884 	.db #0x08	; 8
   005D 7F                 2885 	.db #0x7F	; 127
   005E 7F                 2886 	.db #0x7F	; 127
   005F 00                 2887 	.db #0x00	; 0
   0060 00                 2888 	.db #0x00	; 0
   0061 41                 2889 	.db #0x41	; 65	'A'
   0062 7F                 2890 	.db #0x7F	; 127
   0063 7F                 2891 	.db #0x7F	; 127
   0064 41                 2892 	.db #0x41	; 65	'A'
   0065 00                 2893 	.db #0x00	; 0
   0066 00                 2894 	.db #0x00	; 0
   0067 30                 2895 	.db #0x30	; 48	'0'
   0068 70                 2896 	.db #0x70	; 112	'p'
   0069 40                 2897 	.db #0x40	; 64
   006A 41                 2898 	.db #0x41	; 65	'A'
   006B 7F                 2899 	.db #0x7F	; 127
   006C 3F                 2900 	.db #0x3F	; 63
   006D 01                 2901 	.db #0x01	; 1
   006E 41                 2902 	.db #0x41	; 65	'A'
   006F 7F                 2903 	.db #0x7F	; 127
   0070 7F                 2904 	.db #0x7F	; 127
   0071 08                 2905 	.db #0x08	; 8
   0072 1C                 2906 	.db #0x1C	; 28
   0073 77                 2907 	.db #0x77	; 119	'w'
   0074 63                 2908 	.db #0x63	; 99	'c'
   0075 41                 2909 	.db #0x41	; 65	'A'
   0076 7F                 2910 	.db #0x7F	; 127
   0077 7F                 2911 	.db #0x7F	; 127
   0078 41                 2912 	.db #0x41	; 65	'A'
   0079 40                 2913 	.db #0x40	; 64
   007A 60                 2914 	.db #0x60	; 96
   007B 70                 2915 	.db #0x70	; 112	'p'
   007C 7F                 2916 	.db #0x7F	; 127
   007D 7F                 2917 	.db #0x7F	; 127
   007E 0E                 2918 	.db #0x0E	; 14
   007F 1C                 2919 	.db #0x1C	; 28
   0080 0E                 2920 	.db #0x0E	; 14
   0081 7F                 2921 	.db #0x7F	; 127
   0082 7F                 2922 	.db #0x7F	; 127
   0083 7F                 2923 	.db #0x7F	; 127
   0084 7F                 2924 	.db #0x7F	; 127
   0085 06                 2925 	.db #0x06	; 6
   0086 0C                 2926 	.db #0x0C	; 12
   0087 18                 2927 	.db #0x18	; 24
   0088 7F                 2928 	.db #0x7F	; 127
   0089 7F                 2929 	.db #0x7F	; 127
   008A 1C                 2930 	.db #0x1C	; 28
   008B 3E                 2931 	.db #0x3E	; 62
   008C 63                 2932 	.db #0x63	; 99	'c'
   008D 41                 2933 	.db #0x41	; 65	'A'
   008E 63                 2934 	.db #0x63	; 99	'c'
   008F 3E                 2935 	.db #0x3E	; 62
   0090 1C                 2936 	.db #0x1C	; 28
   0091 41                 2937 	.db #0x41	; 65	'A'
   0092 7F                 2938 	.db #0x7F	; 127
   0093 7F                 2939 	.db #0x7F	; 127
   0094 49                 2940 	.db #0x49	; 73	'I'
   0095 09                 2941 	.db #0x09	; 9
   0096 0F                 2942 	.db #0x0F	; 15
   0097 06                 2943 	.db #0x06	; 6
   0098 1E                 2944 	.db #0x1E	; 30
   0099 3F                 2945 	.db #0x3F	; 63
   009A 21                 2946 	.db #0x21	; 33
   009B 71                 2947 	.db #0x71	; 113	'q'
   009C 7F                 2948 	.db #0x7F	; 127
   009D 5E                 2949 	.db #0x5E	; 94
   009E 00                 2950 	.db #0x00	; 0
   009F 41                 2951 	.db #0x41	; 65	'A'
   00A0 7F                 2952 	.db #0x7F	; 127
   00A1 7F                 2953 	.db #0x7F	; 127
   00A2 09                 2954 	.db #0x09	; 9
   00A3 19                 2955 	.db #0x19	; 25
   00A4 7F                 2956 	.db #0x7F	; 127
   00A5 66                 2957 	.db #0x66	; 102	'f'
   00A6 26                 2958 	.db #0x26	; 38
   00A7 6F                 2959 	.db #0x6F	; 111	'o'
   00A8 4D                 2960 	.db #0x4D	; 77	'M'
   00A9 59                 2961 	.db #0x59	; 89	'Y'
   00AA 73                 2962 	.db #0x73	; 115	's'
   00AB 32                 2963 	.db #0x32	; 50	'2'
   00AC 00                 2964 	.db #0x00	; 0
   00AD 03                 2965 	.db #0x03	; 3
   00AE 41                 2966 	.db #0x41	; 65	'A'
   00AF 7F                 2967 	.db #0x7F	; 127
   00B0 7F                 2968 	.db #0x7F	; 127
   00B1 41                 2969 	.db #0x41	; 65	'A'
   00B2 03                 2970 	.db #0x03	; 3
   00B3 00                 2971 	.db #0x00	; 0
   00B4 7F                 2972 	.db #0x7F	; 127
   00B5 7F                 2973 	.db #0x7F	; 127
   00B6 40                 2974 	.db #0x40	; 64
   00B7 40                 2975 	.db #0x40	; 64
   00B8 7F                 2976 	.db #0x7F	; 127
   00B9 7F                 2977 	.db #0x7F	; 127
   00BA 00                 2978 	.db #0x00	; 0
   00BB 1F                 2979 	.db #0x1F	; 31
   00BC 3F                 2980 	.db #0x3F	; 63
   00BD 60                 2981 	.db #0x60	; 96
   00BE 60                 2982 	.db #0x60	; 96
   00BF 3F                 2983 	.db #0x3F	; 63
   00C0 1F                 2984 	.db #0x1F	; 31
   00C1 00                 2985 	.db #0x00	; 0
   00C2 7F                 2986 	.db #0x7F	; 127
   00C3 7F                 2987 	.db #0x7F	; 127
   00C4 30                 2988 	.db #0x30	; 48	'0'
   00C5 18                 2989 	.db #0x18	; 24
   00C6 30                 2990 	.db #0x30	; 48	'0'
   00C7 7F                 2991 	.db #0x7F	; 127
   00C8 7F                 2992 	.db #0x7F	; 127
   00C9 43                 2993 	.db #0x43	; 67	'C'
   00CA 67                 2994 	.db #0x67	; 103	'g'
   00CB 3C                 2995 	.db #0x3C	; 60
   00CC 18                 2996 	.db #0x18	; 24
   00CD 3C                 2997 	.db #0x3C	; 60
   00CE 67                 2998 	.db #0x67	; 103	'g'
   00CF 43                 2999 	.db #0x43	; 67	'C'
   00D0 07                 3000 	.db #0x07	; 7
   00D1 4F                 3001 	.db #0x4F	; 79	'O'
   00D2 78                 3002 	.db #0x78	; 120	'x'
   00D3 78                 3003 	.db #0x78	; 120	'x'
   00D4 4F                 3004 	.db #0x4F	; 79	'O'
   00D5 07                 3005 	.db #0x07	; 7
   00D6 00                 3006 	.db #0x00	; 0
   00D7 47                 3007 	.db #0x47	; 71	'G'
   00D8 63                 3008 	.db #0x63	; 99	'c'
   00D9 71                 3009 	.db #0x71	; 113	'q'
   00DA 59                 3010 	.db #0x59	; 89	'Y'
   00DB 4D                 3011 	.db #0x4D	; 77	'M'
   00DC 67                 3012 	.db #0x67	; 103	'g'
   00DD 73                 3013 	.db #0x73	; 115	's'
   00DE                    3014 _glcdSmallCharSystemFont:
   00DE 74                 3015 	.db #0x74	; 116	't'
   00DF 54                 3016 	.db #0x54	; 84	'T'
   00E0 54                 3017 	.db #0x54	; 84	'T'
   00E1 7C                 3018 	.db #0x7C	; 124
   00E2 00                 3019 	.db #0x00	; 0
   00E3 00                 3020 	.db #0x00	; 0
   00E4 00                 3021 	.db #0x00	; 0
   00E5 00                 3022 	.db #0x00	; 0
   00E6 7F                 3023 	.db #0x7F	; 127
   00E7 44                 3024 	.db #0x44	; 68	'D'
   00E8 44                 3025 	.db #0x44	; 68	'D'
   00E9 38                 3026 	.db #0x38	; 56	'8'
   00EA 00                 3027 	.db #0x00	; 0
   00EB 00                 3028 	.db #0x00	; 0
   00EC 00                 3029 	.db #0x00	; 0
   00ED 38                 3030 	.db #0x38	; 56	'8'
   00EE 44                 3031 	.db #0x44	; 68	'D'
   00EF 44                 3032 	.db #0x44	; 68	'D'
   00F0 44                 3033 	.db #0x44	; 68	'D'
   00F1 00                 3034 	.db #0x00	; 0
   00F2 00                 3035 	.db #0x00	; 0
   00F3 00                 3036 	.db #0x00	; 0
   00F4 38                 3037 	.db #0x38	; 56	'8'
   00F5 44                 3038 	.db #0x44	; 68	'D'
   00F6 44                 3039 	.db #0x44	; 68	'D'
   00F7 7F                 3040 	.db #0x7F	; 127
   00F8 00                 3041 	.db #0x00	; 0
   00F9 00                 3042 	.db #0x00	; 0
   00FA 00                 3043 	.db #0x00	; 0
   00FB 3C                 3044 	.db #0x3C	; 60
   00FC 52                 3045 	.db #0x52	; 82	'R'
   00FD 52                 3046 	.db #0x52	; 82	'R'
   00FE 4C                 3047 	.db #0x4C	; 76	'L'
   00FF 00                 3048 	.db #0x00	; 0
   0100 00                 3049 	.db #0x00	; 0
   0101 04                 3050 	.db #0x04	; 4
   0102 7F                 3051 	.db #0x7F	; 127
   0103 05                 3052 	.db #0x05	; 5
   0104 01                 3053 	.db #0x01	; 1
   0105 00                 3054 	.db #0x00	; 0
   0106 00                 3055 	.db #0x00	; 0
   0107 00                 3056 	.db #0x00	; 0
   0108 7E                 3057 	.db #0x7E	; 126
   0109 4A                 3058 	.db #0x4A	; 74	'J'
   010A 4A                 3059 	.db #0x4A	; 74	'J'
   010B 6E                 3060 	.db #0x6E	; 110	'n'
   010C 02                 3061 	.db #0x02	; 2
   010D 00                 3062 	.db #0x00	; 0
   010E 00                 3063 	.db #0x00	; 0
   010F 00                 3064 	.db #0x00	; 0
   0110 7F                 3065 	.db #0x7F	; 127
   0111 04                 3066 	.db #0x04	; 4
   0112 04                 3067 	.db #0x04	; 4
   0113 78                 3068 	.db #0x78	; 120	'x'
   0114 00                 3069 	.db #0x00	; 0
   0115 00                 3070 	.db #0x00	; 0
   0116 00                 3071 	.db #0x00	; 0
   0117 7D                 3072 	.db #0x7D	; 125
   0118 00                 3073 	.db #0x00	; 0
   0119 00                 3074 	.db #0x00	; 0
   011A 00                 3075 	.db #0x00	; 0
   011B 00                 3076 	.db #0x00	; 0
   011C 00                 3077 	.db #0x00	; 0
   011D 00                 3078 	.db #0x00	; 0
   011E 80                 3079 	.db #0x80	; 128
   011F 80                 3080 	.db #0x80	; 128
   0120 7D                 3081 	.db #0x7D	; 125
   0121 00                 3082 	.db #0x00	; 0
   0122 00                 3083 	.db #0x00	; 0
   0123 00                 3084 	.db #0x00	; 0
   0124 00                 3085 	.db #0x00	; 0
   0125 7F                 3086 	.db #0x7F	; 127
   0126 10                 3087 	.db #0x10	; 16
   0127 28                 3088 	.db #0x28	; 40
   0128 44                 3089 	.db #0x44	; 68	'D'
   0129 00                 3090 	.db #0x00	; 0
   012A 00                 3091 	.db #0x00	; 0
   012B 00                 3092 	.db #0x00	; 0
   012C 00                 3093 	.db #0x00	; 0
   012D 41                 3094 	.db #0x41	; 65	'A'
   012E 7F                 3095 	.db #0x7F	; 127
   012F 40                 3096 	.db #0x40	; 64
   0130 60                 3097 	.db #0x60	; 96
   0131 00                 3098 	.db #0x00	; 0
   0132 7C                 3099 	.db #0x7C	; 124
   0133 04                 3100 	.db #0x04	; 4
   0134 04                 3101 	.db #0x04	; 4
   0135 7C                 3102 	.db #0x7C	; 124
   0136 04                 3103 	.db #0x04	; 4
   0137 04                 3104 	.db #0x04	; 4
   0138 7C                 3105 	.db #0x7C	; 124
   0139 00                 3106 	.db #0x00	; 0
   013A 7C                 3107 	.db #0x7C	; 124
   013B 04                 3108 	.db #0x04	; 4
   013C 04                 3109 	.db #0x04	; 4
   013D 7C                 3110 	.db #0x7C	; 124
   013E 00                 3111 	.db #0x00	; 0
   013F 00                 3112 	.db #0x00	; 0
   0140 00                 3113 	.db #0x00	; 0
   0141 7C                 3114 	.db #0x7C	; 124
   0142 44                 3115 	.db #0x44	; 68	'D'
   0143 44                 3116 	.db #0x44	; 68	'D'
   0144 7C                 3117 	.db #0x7C	; 124
   0145 00                 3118 	.db #0x00	; 0
   0146 00                 3119 	.db #0x00	; 0
   0147 81                 3120 	.db #0x81	; 129
   0148 FF                 3121 	.db #0xFF	; 255
   0149 92                 3122 	.db #0x92	; 146
   014A 12                 3123 	.db #0x12	; 18
   014B 0C                 3124 	.db #0x0C	; 12
   014C 00                 3125 	.db #0x00	; 0
   014D 00                 3126 	.db #0x00	; 0
   014E 00                 3127 	.db #0x00	; 0
   014F 0E                 3128 	.db #0x0E	; 14
   0150 11                 3129 	.db #0x11	; 17
   0151 91                 3130 	.db #0x91	; 145
   0152 F1                 3131 	.db #0xF1	; 241
   0153 FF                 3132 	.db #0xFF	; 255
   0154 81                 3133 	.db #0x81	; 129
   0155 00                 3134 	.db #0x00	; 0
   0156 7C                 3135 	.db #0x7C	; 124
   0157 04                 3136 	.db #0x04	; 4
   0158 04                 3137 	.db #0x04	; 4
   0159 00                 3138 	.db #0x00	; 0
   015A 00                 3139 	.db #0x00	; 0
   015B 00                 3140 	.db #0x00	; 0
   015C 4C                 3141 	.db #0x4C	; 76	'L'
   015D 54                 3142 	.db #0x54	; 84	'T'
   015E 74                 3143 	.db #0x74	; 116	't'
   015F 00                 3144 	.db #0x00	; 0
   0160 00                 3145 	.db #0x00	; 0
   0161 00                 3146 	.db #0x00	; 0
   0162 00                 3147 	.db #0x00	; 0
   0163 04                 3148 	.db #0x04	; 4
   0164 7E                 3149 	.db #0x7E	; 126
   0165 44                 3150 	.db #0x44	; 68	'D'
   0166 00                 3151 	.db #0x00	; 0
   0167 00                 3152 	.db #0x00	; 0
   0168 00                 3153 	.db #0x00	; 0
   0169 00                 3154 	.db #0x00	; 0
   016A 00                 3155 	.db #0x00	; 0
   016B 7C                 3156 	.db #0x7C	; 124
   016C 40                 3157 	.db #0x40	; 64
   016D 40                 3158 	.db #0x40	; 64
   016E 7C                 3159 	.db #0x7C	; 124
   016F 00                 3160 	.db #0x00	; 0
   0170 00                 3161 	.db #0x00	; 0
   0171 04                 3162 	.db #0x04	; 4
   0172 18                 3163 	.db #0x18	; 24
   0173 60                 3164 	.db #0x60	; 96
   0174 62                 3165 	.db #0x62	; 98	'b'
   0175 1C                 3166 	.db #0x1C	; 28
   0176 00                 3167 	.db #0x00	; 0
   0177 00                 3168 	.db #0x00	; 0
   0178 04                 3169 	.db #0x04	; 4
   0179 38                 3170 	.db #0x38	; 56	'8'
   017A 60                 3171 	.db #0x60	; 96
   017B 3C                 3172 	.db #0x3C	; 60
   017C 3C                 3173 	.db #0x3C	; 60
   017D 61                 3174 	.db #0x61	; 97	'a'
   017E 3E                 3175 	.db #0x3E	; 62
   017F 00                 3176 	.db #0x00	; 0
   0180 44                 3177 	.db #0x44	; 68	'D'
   0181 38                 3178 	.db #0x38	; 56	'8'
   0182 38                 3179 	.db #0x38	; 56	'8'
   0183 44                 3180 	.db #0x44	; 68	'D'
   0184 00                 3181 	.db #0x00	; 0
   0185 00                 3182 	.db #0x00	; 0
   0186 42                 3183 	.db #0x42	; 66	'B'
   0187 8C                 3184 	.db #0x8C	; 140
   0188 70                 3185 	.db #0x70	; 112	'p'
   0189 0C                 3186 	.db #0x0C	; 12
   018A 02                 3187 	.db #0x02	; 2
   018B 00                 3188 	.db #0x00	; 0
   018C 00                 3189 	.db #0x00	; 0
   018D 64                 3190 	.db #0x64	; 100	'd'
   018E 74                 3191 	.db #0x74	; 116	't'
   018F 5C                 3192 	.db #0x5C	; 92
   0190 44                 3193 	.db #0x44	; 68	'D'
   0191 00                 3194 	.db #0x00	; 0
   0192 00                 3195 	.db #0x00	; 0
   0193 00                 3196 	.db #0x00	; 0
   0194 00                 3197 	.db #0x00	; 0
   0195 0C                 3198 	.db #0x0C	; 12
   0196 0C                 3199 	.db #0x0C	; 12
   0197 00                 3200 	.db #0x00	; 0
   0198 0C                 3201 	.db #0x0C	; 12
   0199 0C                 3202 	.db #0x0C	; 12
   019A 00                 3203 	.db #0x00	; 0
   019B                    3204 _welcomeScreenImage:
   019B 00                 3205 	.db #0x00	; 0
   019C 00                 3206 	.db #0x00	; 0
   019D 00                 3207 	.db #0x00	; 0
   019E F0                 3208 	.db #0xF0	; 240
   019F F8                 3209 	.db #0xF8	; 248
   01A0 98                 3210 	.db #0x98	; 152
   01A1 18                 3211 	.db #0x18	; 24
   01A2 18                 3212 	.db #0x18	; 24
   01A3 70                 3213 	.db #0x70	; 112	'p'
   01A4 E0                 3214 	.db #0xE0	; 224
   01A5 80                 3215 	.db #0x80	; 128
   01A6 00                 3216 	.db #0x00	; 0
   01A7 00                 3217 	.db #0x00	; 0
   01A8 00                 3218 	.db #0x00	; 0
   01A9 00                 3219 	.db #0x00	; 0
   01AA 00                 3220 	.db #0x00	; 0
   01AB 80                 3221 	.db #0x80	; 128
   01AC F0                 3222 	.db #0xF0	; 240
   01AD 30                 3223 	.db #0x30	; 48	'0'
   01AE 18                 3224 	.db #0x18	; 24
   01AF 18                 3225 	.db #0x18	; 24
   01B0 D8                 3226 	.db #0xD8	; 216
   01B1 F0                 3227 	.db #0xF0	; 240
   01B2 F0                 3228 	.db #0xF0	; 240
   01B3 78                 3229 	.db #0x78	; 120	'x'
   01B4 18                 3230 	.db #0x18	; 24
   01B5 18                 3231 	.db #0x18	; 24
   01B6 18                 3232 	.db #0x18	; 24
   01B7 18                 3233 	.db #0x18	; 24
   01B8 F0                 3234 	.db #0xF0	; 240
   01B9 E0                 3235 	.db #0xE0	; 224
   01BA F0                 3236 	.db #0xF0	; 240
   01BB F8                 3237 	.db #0xF8	; 248
   01BC 18                 3238 	.db #0x18	; 24
   01BD 18                 3239 	.db #0x18	; 24
   01BE 18                 3240 	.db #0x18	; 24
   01BF F0                 3241 	.db #0xF0	; 240
   01C0 F0                 3242 	.db #0xF0	; 240
   01C1 00                 3243 	.db #0x00	; 0
   01C2 00                 3244 	.db #0x00	; 0
   01C3 00                 3245 	.db #0x00	; 0
   01C4 F0                 3246 	.db #0xF0	; 240
   01C5 F8                 3247 	.db #0xF8	; 248
   01C6 18                 3248 	.db #0x18	; 24
   01C7 18                 3249 	.db #0x18	; 24
   01C8 18                 3250 	.db #0x18	; 24
   01C9 F0                 3251 	.db #0xF0	; 240
   01CA F0                 3252 	.db #0xF0	; 240
   01CB 00                 3253 	.db #0x00	; 0
   01CC 00                 3254 	.db #0x00	; 0
   01CD 00                 3255 	.db #0x00	; 0
   01CE F0                 3256 	.db #0xF0	; 240
   01CF F8                 3257 	.db #0xF8	; 248
   01D0 18                 3258 	.db #0x18	; 24
   01D1 18                 3259 	.db #0x18	; 24
   01D2 18                 3260 	.db #0x18	; 24
   01D3 38                 3261 	.db #0x38	; 56	'8'
   01D4 38                 3262 	.db #0x38	; 56	'8'
   01D5 18                 3263 	.db #0x18	; 24
   01D6 18                 3264 	.db #0x18	; 24
   01D7 98                 3265 	.db #0x98	; 152
   01D8 F8                 3266 	.db #0xF8	; 248
   01D9 F0                 3267 	.db #0xF0	; 240
   01DA 00                 3268 	.db #0x00	; 0
   01DB 00                 3269 	.db #0x00	; 0
   01DC C0                 3270 	.db #0xC0	; 192
   01DD C0                 3271 	.db #0xC0	; 192
   01DE 70                 3272 	.db #0x70	; 112	'p'
   01DF 30                 3273 	.db #0x30	; 48	'0'
   01E0 30                 3274 	.db #0x30	; 48	'0'
   01E1 10                 3275 	.db #0x10	; 16
   01E2 10                 3276 	.db #0x10	; 16
   01E3 10                 3277 	.db #0x10	; 16
   01E4 10                 3278 	.db #0x10	; 16
   01E5 30                 3279 	.db #0x30	; 48	'0'
   01E6 30                 3280 	.db #0x30	; 48	'0'
   01E7 70                 3281 	.db #0x70	; 112	'p'
   01E8 F8                 3282 	.db #0xF8	; 248
   01E9 18                 3283 	.db #0x18	; 24
   01EA 18                 3284 	.db #0x18	; 24
   01EB 18                 3285 	.db #0x18	; 24
   01EC F0                 3286 	.db #0xF0	; 240
   01ED F0                 3287 	.db #0xF0	; 240
   01EE 00                 3288 	.db #0x00	; 0
   01EF 00                 3289 	.db #0x00	; 0
   01F0 00                 3290 	.db #0x00	; 0
   01F1 80                 3291 	.db #0x80	; 128
   01F2 C0                 3292 	.db #0xC0	; 192
   01F3 E0                 3293 	.db #0xE0	; 224
   01F4 30                 3294 	.db #0x30	; 48	'0'
   01F5 30                 3295 	.db #0x30	; 48	'0'
   01F6 10                 3296 	.db #0x10	; 16
   01F7 10                 3297 	.db #0x10	; 16
   01F8 F0                 3298 	.db #0xF0	; 240
   01F9 10                 3299 	.db #0x10	; 16
   01FA 10                 3300 	.db #0x10	; 16
   01FB 30                 3301 	.db #0x30	; 48	'0'
   01FC 70                 3302 	.db #0x70	; 112	'p'
   01FD E0                 3303 	.db #0xE0	; 224
   01FE C0                 3304 	.db #0xC0	; 192
   01FF E0                 3305 	.db #0xE0	; 224
   0200 30                 3306 	.db #0x30	; 48	'0'
   0201 30                 3307 	.db #0x30	; 48	'0'
   0202 10                 3308 	.db #0x10	; 16
   0203 10                 3309 	.db #0x10	; 16
   0204 F0                 3310 	.db #0xF0	; 240
   0205 10                 3311 	.db #0x10	; 16
   0206 10                 3312 	.db #0x10	; 16
   0207 30                 3313 	.db #0x30	; 48	'0'
   0208 30                 3314 	.db #0x30	; 48	'0'
   0209 F8                 3315 	.db #0xF8	; 248
   020A 18                 3316 	.db #0x18	; 24
   020B 18                 3317 	.db #0x18	; 24
   020C 18                 3318 	.db #0x18	; 24
   020D F8                 3319 	.db #0xF8	; 248
   020E F0                 3320 	.db #0xF0	; 240
   020F 70                 3321 	.db #0x70	; 112	'p'
   0210 30                 3322 	.db #0x30	; 48	'0'
   0211 18                 3323 	.db #0x18	; 24
   0212 18                 3324 	.db #0x18	; 24
   0213 98                 3325 	.db #0x98	; 152
   0214 D8                 3326 	.db #0xD8	; 216
   0215 F0                 3327 	.db #0xF0	; 240
   0216 00                 3328 	.db #0x00	; 0
   0217 00                 3329 	.db #0x00	; 0
   0218 00                 3330 	.db #0x00	; 0
   0219 00                 3331 	.db #0x00	; 0
   021A 00                 3332 	.db #0x00	; 0
   021B 00                 3333 	.db #0x00	; 0
   021C 00                 3334 	.db #0x00	; 0
   021D 00                 3335 	.db #0x00	; 0
   021E 00                 3336 	.db #0x00	; 0
   021F 03                 3337 	.db #0x03	; 3
   0220 0F                 3338 	.db #0x0F	; 15
   0221 F8                 3339 	.db #0xF8	; 248
   0222 E0                 3340 	.db #0xE0	; 224
   0223 00                 3341 	.db #0x00	; 0
   0224 03                 3342 	.db #0x03	; 3
   0225 FF                 3343 	.db #0xFF	; 255
   0226 07                 3344 	.db #0x07	; 7
   0227 01                 3345 	.db #0x01	; 1
   0228 C1                 3346 	.db #0xC1	; 193
   0229 01                 3347 	.db #0x01	; 1
   022A 07                 3348 	.db #0x07	; 7
   022B 0F                 3349 	.db #0x0F	; 15
   022C 03                 3350 	.db #0x03	; 3
   022D 80                 3351 	.db #0x80	; 128
   022E F0                 3352 	.db #0xF0	; 240
   022F FC                 3353 	.db #0xFC	; 252
   0230 FF                 3354 	.db #0xFF	; 255
   0231 3F                 3355 	.db #0x3F	; 63
   0232 07                 3356 	.db #0x07	; 7
   0233 00                 3357 	.db #0x00	; 0
   0234 80                 3358 	.db #0x80	; 128
   0235 88                 3359 	.db #0x88	; 136
   0236 80                 3360 	.db #0x80	; 128
   0237 80                 3361 	.db #0x80	; 128
   0238 00                 3362 	.db #0x00	; 0
   0239 07                 3363 	.db #0x07	; 7
   023A 3F                 3364 	.db #0x3F	; 63
   023B FF                 3365 	.db #0xFF	; 255
   023C 00                 3366 	.db #0x00	; 0
   023D 00                 3367 	.db #0x00	; 0
   023E 00                 3368 	.db #0x00	; 0
   023F FF                 3369 	.db #0xFF	; 255
   0240 EF                 3370 	.db #0xEF	; 239
   0241 C0                 3371 	.db #0xC0	; 192
   0242 C0                 3372 	.db #0xC0	; 192
   0243 C0                 3373 	.db #0xC0	; 192
   0244 FF                 3374 	.db #0xFF	; 255
   0245 FF                 3375 	.db #0xFF	; 255
   0246 00                 3376 	.db #0x00	; 0
   0247 00                 3377 	.db #0x00	; 0
   0248 00                 3378 	.db #0x00	; 0
   0249 FF                 3379 	.db #0xFF	; 255
   024A EF                 3380 	.db #0xEF	; 239
   024B C0                 3381 	.db #0xC0	; 192
   024C C0                 3382 	.db #0xC0	; 192
   024D C0                 3383 	.db #0xC0	; 192
   024E C0                 3384 	.db #0xC0	; 192
   024F E3                 3385 	.db #0xE3	; 227
   0250 FF                 3386 	.db #0xFF	; 255
   0251 0C                 3387 	.db #0x0C	; 12
   0252 04                 3388 	.db #0x04	; 4
   0253 00                 3389 	.db #0x00	; 0
   0254 C0                 3390 	.db #0xC0	; 192
   0255 F0                 3391 	.db #0xF0	; 240
   0256 7C                 3392 	.db #0x7C	; 124
   0257 0F                 3393 	.db #0x0F	; 15
   0258 03                 3394 	.db #0x03	; 3
   0259 00                 3395 	.db #0x00	; 0
   025A 00                 3396 	.db #0x00	; 0
   025B 1C                 3397 	.db #0x1C	; 28
   025C FF                 3398 	.db #0xFF	; 255
   025D C1                 3399 	.db #0xC1	; 193
   025E 00                 3400 	.db #0x00	; 0
   025F 00                 3401 	.db #0x00	; 0
   0260 1C                 3402 	.db #0x1C	; 28
   0261 7F                 3403 	.db #0x7F	; 127
   0262 63                 3404 	.db #0x63	; 99	'c'
   0263 63                 3405 	.db #0x63	; 99	'c'
   0264 7F                 3406 	.db #0x7F	; 127
   0265 1C                 3407 	.db #0x1C	; 28
   0266 1C                 3408 	.db #0x1C	; 28
   0267 3C                 3409 	.db #0x3C	; 60
   0268 FF                 3410 	.db #0xFF	; 255
   0269 00                 3411 	.db #0x00	; 0
   026A 00                 3412 	.db #0x00	; 0
   026B 00                 3413 	.db #0x00	; 0
   026C FF                 3414 	.db #0xFF	; 255
   026D EF                 3415 	.db #0xEF	; 239
   026E C0                 3416 	.db #0xC0	; 192
   026F C0                 3417 	.db #0xC0	; 192
   0270 C0                 3418 	.db #0xC0	; 192
   0271 FF                 3419 	.db #0xFF	; 255
   0272 FF                 3420 	.db #0xFF	; 255
   0273 80                 3421 	.db #0x80	; 128
   0274 00                 3422 	.db #0x00	; 0
   0275 00                 3423 	.db #0x00	; 0
   0276 3E                 3424 	.db #0x3E	; 62
   0277 77                 3425 	.db #0x77	; 119	'w'
   0278 E3                 3426 	.db #0xE3	; 227
   0279 77                 3427 	.db #0x77	; 119	'w'
   027A 3E                 3428 	.db #0x3E	; 62
   027B 00                 3429 	.db #0x00	; 0
   027C 00                 3430 	.db #0x00	; 0
   027D 80                 3431 	.db #0x80	; 128
   027E FF                 3432 	.db #0xFF	; 255
   027F 80                 3433 	.db #0x80	; 128
   0280 00                 3434 	.db #0x00	; 0
   0281 00                 3435 	.db #0x00	; 0
   0282 3E                 3436 	.db #0x3E	; 62
   0283 77                 3437 	.db #0x77	; 119	'w'
   0284 E3                 3438 	.db #0xE3	; 227
   0285 67                 3439 	.db #0x67	; 103	'g'
   0286 3E                 3440 	.db #0x3E	; 62
   0287 1C                 3441 	.db #0x1C	; 28
   0288 1C                 3442 	.db #0x1C	; 28
   0289 BE                 3443 	.db #0xBE	; 190
   028A 00                 3444 	.db #0x00	; 0
   028B 00                 3445 	.db #0x00	; 0
   028C 00                 3446 	.db #0x00	; 0
   028D E1                 3447 	.db #0xE1	; 225
   028E C0                 3448 	.db #0xC0	; 192
   028F 00                 3449 	.db #0x00	; 0
   0290 0C                 3450 	.db #0x0C	; 12
   0291 1E                 3451 	.db #0x1E	; 30
   0292 77                 3452 	.db #0x77	; 119	'w'
   0293 F3                 3453 	.db #0xF3	; 243
   0294 E1                 3454 	.db #0xE1	; 225
   0295 80                 3455 	.db #0x80	; 128
   0296 00                 3456 	.db #0x00	; 0
   0297 00                 3457 	.db #0x00	; 0
   0298 00                 3458 	.db #0x00	; 0
   0299 00                 3459 	.db #0x00	; 0
   029A 00                 3460 	.db #0x00	; 0
   029B 00                 3461 	.db #0x00	; 0
   029C 00                 3462 	.db #0x00	; 0
   029D 00                 3463 	.db #0x00	; 0
   029E 00                 3464 	.db #0x00	; 0
   029F 00                 3465 	.db #0x00	; 0
   02A0 00                 3466 	.db #0x00	; 0
   02A1 00                 3467 	.db #0x00	; 0
   02A2 07                 3468 	.db #0x07	; 7
   02A3 0F                 3469 	.db #0x0F	; 15
   02A4 0C                 3470 	.db #0x0C	; 12
   02A5 0F                 3471 	.db #0x0F	; 15
   02A6 0C                 3472 	.db #0x0C	; 12
   02A7 0F                 3473 	.db #0x0F	; 15
   02A8 07                 3474 	.db #0x07	; 7
   02A9 0F                 3475 	.db #0x0F	; 15
   02AA 0C                 3476 	.db #0x0C	; 12
   02AB 0C                 3477 	.db #0x0C	; 12
   02AC 0C                 3478 	.db #0x0C	; 12
   02AD 0F                 3479 	.db #0x0F	; 15
   02AE 03                 3480 	.db #0x03	; 3
   02AF 0F                 3481 	.db #0x0F	; 15
   02B0 0F                 3482 	.db #0x0F	; 15
   02B1 0C                 3483 	.db #0x0C	; 12
   02B2 0C                 3484 	.db #0x0C	; 12
   02B3 0E                 3485 	.db #0x0E	; 14
   02B4 03                 3486 	.db #0x03	; 3
   02B5 01                 3487 	.db #0x01	; 1
   02B6 07                 3488 	.db #0x07	; 7
   02B7 0F                 3489 	.db #0x0F	; 15
   02B8 0C                 3490 	.db #0x0C	; 12
   02B9 0C                 3491 	.db #0x0C	; 12
   02BA 0C                 3492 	.db #0x0C	; 12
   02BB 0C                 3493 	.db #0x0C	; 12
   02BC 0C                 3494 	.db #0x0C	; 12
   02BD 0C                 3495 	.db #0x0C	; 12
   02BE 0C                 3496 	.db #0x0C	; 12
   02BF 0C                 3497 	.db #0x0C	; 12
   02C0 0C                 3498 	.db #0x0C	; 12
   02C1 0C                 3499 	.db #0x0C	; 12
   02C2 0C                 3500 	.db #0x0C	; 12
   02C3 0C                 3501 	.db #0x0C	; 12
   02C4 0C                 3502 	.db #0x0C	; 12
   02C5 0F                 3503 	.db #0x0F	; 15
   02C6 0C                 3504 	.db #0x0C	; 12
   02C7 0C                 3505 	.db #0x0C	; 12
   02C8 0C                 3506 	.db #0x0C	; 12
   02C9 0C                 3507 	.db #0x0C	; 12
   02CA 0C                 3508 	.db #0x0C	; 12
   02CB 0C                 3509 	.db #0x0C	; 12
   02CC 0C                 3510 	.db #0x0C	; 12
   02CD 0C                 3511 	.db #0x0C	; 12
   02CE 0C                 3512 	.db #0x0C	; 12
   02CF 0F                 3513 	.db #0x0F	; 15
   02D0 0C                 3514 	.db #0x0C	; 12
   02D1 0C                 3515 	.db #0x0C	; 12
   02D2 0C                 3516 	.db #0x0C	; 12
   02D3 0E                 3517 	.db #0x0E	; 14
   02D4 07                 3518 	.db #0x07	; 7
   02D5 01                 3519 	.db #0x01	; 1
   02D6 00                 3520 	.db #0x00	; 0
   02D7 00                 3521 	.db #0x00	; 0
   02D8 00                 3522 	.db #0x00	; 0
   02D9 00                 3523 	.db #0x00	; 0
   02DA 00                 3524 	.db #0x00	; 0
   02DB 00                 3525 	.db #0x00	; 0
   02DC 00                 3526 	.db #0x00	; 0
   02DD 01                 3527 	.db #0x01	; 1
   02DE 03                 3528 	.db #0x03	; 3
   02DF 06                 3529 	.db #0x06	; 6
   02E0 04                 3530 	.db #0x04	; 4
   02E1 04                 3531 	.db #0x04	; 4
   02E2 0C                 3532 	.db #0x0C	; 12
   02E3 0C                 3533 	.db #0x0C	; 12
   02E4 0C                 3534 	.db #0x0C	; 12
   02E5 0E                 3535 	.db #0x0E	; 14
   02E6 06                 3536 	.db #0x06	; 6
   02E7 07                 3537 	.db #0x07	; 7
   02E8 0F                 3538 	.db #0x0F	; 15
   02E9 0C                 3539 	.db #0x0C	; 12
   02EA 0C                 3540 	.db #0x0C	; 12
   02EB 0C                 3541 	.db #0x0C	; 12
   02EC 0C                 3542 	.db #0x0C	; 12
   02ED 0C                 3543 	.db #0x0C	; 12
   02EE 0C                 3544 	.db #0x0C	; 12
   02EF 0C                 3545 	.db #0x0C	; 12
   02F0 0C                 3546 	.db #0x0C	; 12
   02F1 04                 3547 	.db #0x04	; 4
   02F2 03                 3548 	.db #0x03	; 3
   02F3 03                 3549 	.db #0x03	; 3
   02F4 06                 3550 	.db #0x06	; 6
   02F5 06                 3551 	.db #0x06	; 6
   02F6 04                 3552 	.db #0x04	; 4
   02F7 0C                 3553 	.db #0x0C	; 12
   02F8 0F                 3554 	.db #0x0F	; 15
   02F9 0C                 3555 	.db #0x0C	; 12
   02FA 0C                 3556 	.db #0x0C	; 12
   02FB 0E                 3557 	.db #0x0E	; 14
   02FC 07                 3558 	.db #0x07	; 7
   02FD 03                 3559 	.db #0x03	; 3
   02FE 01                 3560 	.db #0x01	; 1
   02FF 03                 3561 	.db #0x03	; 3
   0300 06                 3562 	.db #0x06	; 6
   0301 06                 3563 	.db #0x06	; 6
   0302 04                 3564 	.db #0x04	; 4
   0303 0C                 3565 	.db #0x0C	; 12
   0304 0F                 3566 	.db #0x0F	; 15
   0305 0C                 3567 	.db #0x0C	; 12
   0306 0C                 3568 	.db #0x0C	; 12
   0307 0E                 3569 	.db #0x0E	; 14
   0308 07                 3570 	.db #0x07	; 7
   0309 0F                 3571 	.db #0x0F	; 15
   030A 0C                 3572 	.db #0x0C	; 12
   030B 0C                 3573 	.db #0x0C	; 12
   030C 0C                 3574 	.db #0x0C	; 12
   030D 0F                 3575 	.db #0x0F	; 15
   030E 0F                 3576 	.db #0x0F	; 15
   030F 07                 3577 	.db #0x07	; 7
   0310 0F                 3578 	.db #0x0F	; 15
   0311 0C                 3579 	.db #0x0C	; 12
   0312 0C                 3580 	.db #0x0C	; 12
   0313 0C                 3581 	.db #0x0C	; 12
   0314 0C                 3582 	.db #0x0C	; 12
   0315 0F                 3583 	.db #0x0F	; 15
   0316 07                 3584 	.db #0x07	; 7
   0317 00                 3585 	.db #0x00	; 0
   0318 00                 3586 	.db #0x00	; 0
   0319 00                 3587 	.db #0x00	; 0
   031A 00                 3588 	.db #0x00	; 0
   031B 00                 3589 	.db #0x00	; 0
   031C 00                 3590 	.db #0x00	; 0
   031D 00                 3591 	.db #0x00	; 0
   031E 00                 3592 	.db #0x00	; 0
   031F 00                 3593 	.db #0x00	; 0
   0320 00                 3594 	.db #0x00	; 0
   0321 00                 3595 	.db #0x00	; 0
   0322 00                 3596 	.db #0x00	; 0
   0323 00                 3597 	.db #0x00	; 0
   0324 00                 3598 	.db #0x00	; 0
   0325 00                 3599 	.db #0x00	; 0
   0326 00                 3600 	.db #0x00	; 0
   0327 00                 3601 	.db #0x00	; 0
   0328 00                 3602 	.db #0x00	; 0
   0329 00                 3603 	.db #0x00	; 0
   032A 00                 3604 	.db #0x00	; 0
   032B 00                 3605 	.db #0x00	; 0
   032C 00                 3606 	.db #0x00	; 0
   032D 00                 3607 	.db #0x00	; 0
   032E 00                 3608 	.db #0x00	; 0
   032F 00                 3609 	.db #0x00	; 0
   0330 00                 3610 	.db #0x00	; 0
   0331 00                 3611 	.db #0x00	; 0
   0332 00                 3612 	.db #0x00	; 0
   0333 00                 3613 	.db #0x00	; 0
   0334 00                 3614 	.db #0x00	; 0
   0335 00                 3615 	.db #0x00	; 0
   0336 00                 3616 	.db #0x00	; 0
   0337 00                 3617 	.db #0x00	; 0
   0338 00                 3618 	.db #0x00	; 0
   0339 00                 3619 	.db #0x00	; 0
   033A 00                 3620 	.db #0x00	; 0
   033B 00                 3621 	.db #0x00	; 0
   033C 00                 3622 	.db #0x00	; 0
   033D 00                 3623 	.db #0x00	; 0
   033E 00                 3624 	.db #0x00	; 0
   033F 00                 3625 	.db #0x00	; 0
   0340 00                 3626 	.db #0x00	; 0
   0341 00                 3627 	.db #0x00	; 0
   0342 00                 3628 	.db #0x00	; 0
   0343 00                 3629 	.db #0x00	; 0
   0344 00                 3630 	.db #0x00	; 0
   0345 00                 3631 	.db #0x00	; 0
   0346 00                 3632 	.db #0x00	; 0
   0347 00                 3633 	.db #0x00	; 0
   0348 00                 3634 	.db #0x00	; 0
   0349 00                 3635 	.db #0x00	; 0
   034A 00                 3636 	.db #0x00	; 0
   034B 00                 3637 	.db #0x00	; 0
   034C 00                 3638 	.db #0x00	; 0
   034D 00                 3639 	.db #0x00	; 0
   034E 00                 3640 	.db #0x00	; 0
   034F 00                 3641 	.db #0x00	; 0
   0350 00                 3642 	.db #0x00	; 0
   0351 00                 3643 	.db #0x00	; 0
   0352 00                 3644 	.db #0x00	; 0
   0353 00                 3645 	.db #0x00	; 0
   0354 00                 3646 	.db #0x00	; 0
   0355 00                 3647 	.db #0x00	; 0
   0356 00                 3648 	.db #0x00	; 0
   0357 00                 3649 	.db #0x00	; 0
   0358 00                 3650 	.db #0x00	; 0
   0359 00                 3651 	.db #0x00	; 0
   035A 00                 3652 	.db #0x00	; 0
   035B 00                 3653 	.db #0x00	; 0
   035C 00                 3654 	.db #0x00	; 0
   035D 00                 3655 	.db #0x00	; 0
   035E 00                 3656 	.db #0x00	; 0
   035F 00                 3657 	.db #0x00	; 0
   0360 00                 3658 	.db #0x00	; 0
   0361 00                 3659 	.db #0x00	; 0
   0362 00                 3660 	.db #0x00	; 0
   0363 00                 3661 	.db #0x00	; 0
   0364 00                 3662 	.db #0x00	; 0
   0365 00                 3663 	.db #0x00	; 0
   0366 00                 3664 	.db #0x00	; 0
   0367 00                 3665 	.db #0x00	; 0
   0368 00                 3666 	.db #0x00	; 0
   0369 00                 3667 	.db #0x00	; 0
   036A 00                 3668 	.db #0x00	; 0
   036B 00                 3669 	.db #0x00	; 0
   036C 00                 3670 	.db #0x00	; 0
   036D 00                 3671 	.db #0x00	; 0
   036E 00                 3672 	.db #0x00	; 0
   036F 00                 3673 	.db #0x00	; 0
   0370 00                 3674 	.db #0x00	; 0
   0371 00                 3675 	.db #0x00	; 0
   0372 00                 3676 	.db #0x00	; 0
   0373 00                 3677 	.db #0x00	; 0
   0374 00                 3678 	.db #0x00	; 0
   0375 00                 3679 	.db #0x00	; 0
   0376 00                 3680 	.db #0x00	; 0
   0377 00                 3681 	.db #0x00	; 0
   0378 00                 3682 	.db #0x00	; 0
   0379 00                 3683 	.db #0x00	; 0
   037A 00                 3684 	.db #0x00	; 0
   037B 00                 3685 	.db #0x00	; 0
   037C 00                 3686 	.db #0x00	; 0
   037D 00                 3687 	.db #0x00	; 0
   037E 00                 3688 	.db #0x00	; 0
   037F 00                 3689 	.db #0x00	; 0
   0380 00                 3690 	.db #0x00	; 0
   0381 00                 3691 	.db #0x00	; 0
   0382 00                 3692 	.db #0x00	; 0
   0383 00                 3693 	.db #0x00	; 0
   0384 00                 3694 	.db #0x00	; 0
   0385 00                 3695 	.db #0x00	; 0
   0386 00                 3696 	.db #0x00	; 0
   0387 00                 3697 	.db #0x00	; 0
   0388 00                 3698 	.db #0x00	; 0
   0389 00                 3699 	.db #0x00	; 0
   038A 00                 3700 	.db #0x00	; 0
   038B 00                 3701 	.db #0x00	; 0
   038C                    3702 _nameLogo:
   038C 00                 3703 	.db #0x00	; 0
   038D 00                 3704 	.db #0x00	; 0
   038E 00                 3705 	.db #0x00	; 0
   038F F0                 3706 	.db #0xF0	; 240
   0390 08                 3707 	.db #0x08	; 8
   0391 08                 3708 	.db #0x08	; 8
   0392 08                 3709 	.db #0x08	; 8
   0393 08                 3710 	.db #0x08	; 8
   0394 F0                 3711 	.db #0xF0	; 240
   0395 80                 3712 	.db #0x80	; 128
   0396 00                 3713 	.db #0x00	; 0
   0397 00                 3714 	.db #0x00	; 0
   0398 00                 3715 	.db #0x00	; 0
   0399 00                 3716 	.db #0x00	; 0
   039A 00                 3717 	.db #0x00	; 0
   039B 00                 3718 	.db #0x00	; 0
   039C 00                 3719 	.db #0x00	; 0
   039D 00                 3720 	.db #0x00	; 0
   039E 00                 3721 	.db #0x00	; 0
   039F 00                 3722 	.db #0x00	; 0
   03A0 00                 3723 	.db #0x00	; 0
   03A1 00                 3724 	.db #0x00	; 0
   03A2 00                 3725 	.db #0x00	; 0
   03A3 00                 3726 	.db #0x00	; 0
   03A4 00                 3727 	.db #0x00	; 0
   03A5 00                 3728 	.db #0x00	; 0
   03A6 00                 3729 	.db #0x00	; 0
   03A7 00                 3730 	.db #0x00	; 0
   03A8 00                 3731 	.db #0x00	; 0
   03A9 00                 3732 	.db #0x00	; 0
   03AA 00                 3733 	.db #0x00	; 0
   03AB 00                 3734 	.db #0x00	; 0
   03AC FC                 3735 	.db #0xFC	; 252
   03AD 8E                 3736 	.db #0x8E	; 142
   03AE 06                 3737 	.db #0x06	; 6
   03AF 06                 3738 	.db #0x06	; 6
   03B0 8E                 3739 	.db #0x8E	; 142
   03B1 FC                 3740 	.db #0xFC	; 252
   03B2 00                 3741 	.db #0x00	; 0
   03B3 00                 3742 	.db #0x00	; 0
   03B4 00                 3743 	.db #0x00	; 0
   03B5 00                 3744 	.db #0x00	; 0
   03B6 80                 3745 	.db #0x80	; 128
   03B7 80                 3746 	.db #0x80	; 128
   03B8 80                 3747 	.db #0x80	; 128
   03B9 00                 3748 	.db #0x00	; 0
   03BA 00                 3749 	.db #0x00	; 0
   03BB 80                 3750 	.db #0x80	; 128
   03BC 80                 3751 	.db #0x80	; 128
   03BD 80                 3752 	.db #0x80	; 128
   03BE 00                 3753 	.db #0x00	; 0
   03BF 00                 3754 	.db #0x00	; 0
   03C0 00                 3755 	.db #0x00	; 0
   03C1 00                 3756 	.db #0x00	; 0
   03C2 00                 3757 	.db #0x00	; 0
   03C3 00                 3758 	.db #0x00	; 0
   03C4 00                 3759 	.db #0x00	; 0
   03C5 00                 3760 	.db #0x00	; 0
   03C6 FC                 3761 	.db #0xFC	; 252
   03C7 0C                 3762 	.db #0x0C	; 12
   03C8 0C                 3763 	.db #0x0C	; 12
   03C9 0C                 3764 	.db #0x0C	; 12
   03CA 0C                 3765 	.db #0x0C	; 12
   03CB 0C                 3766 	.db #0x0C	; 12
   03CC 0C                 3767 	.db #0x0C	; 12
   03CD 0C                 3768 	.db #0x0C	; 12
   03CE 08                 3769 	.db #0x08	; 8
   03CF 18                 3770 	.db #0x18	; 24
   03D0 F0                 3771 	.db #0xF0	; 240
   03D1 80                 3772 	.db #0x80	; 128
   03D2 00                 3773 	.db #0x00	; 0
   03D3 80                 3774 	.db #0x80	; 128
   03D4 80                 3775 	.db #0x80	; 128
   03D5 80                 3776 	.db #0x80	; 128
   03D6 80                 3777 	.db #0x80	; 128
   03D7 80                 3778 	.db #0x80	; 128
   03D8 80                 3779 	.db #0x80	; 128
   03D9 00                 3780 	.db #0x00	; 0
   03DA 00                 3781 	.db #0x00	; 0
   03DB 00                 3782 	.db #0x00	; 0
   03DC 00                 3783 	.db #0x00	; 0
   03DD 00                 3784 	.db #0x00	; 0
   03DE 00                 3785 	.db #0x00	; 0
   03DF 00                 3786 	.db #0x00	; 0
   03E0 00                 3787 	.db #0x00	; 0
   03E1 00                 3788 	.db #0x00	; 0
   03E2 00                 3789 	.db #0x00	; 0
   03E3 00                 3790 	.db #0x00	; 0
   03E4 00                 3791 	.db #0x00	; 0
   03E5 00                 3792 	.db #0x00	; 0
   03E6 00                 3793 	.db #0x00	; 0
   03E7 80                 3794 	.db #0x80	; 128
   03E8 80                 3795 	.db #0x80	; 128
   03E9 00                 3796 	.db #0x00	; 0
   03EA 00                 3797 	.db #0x00	; 0
   03EB 00                 3798 	.db #0x00	; 0
   03EC 00                 3799 	.db #0x00	; 0
   03ED 80                 3800 	.db #0x80	; 128
   03EE 80                 3801 	.db #0x80	; 128
   03EF 80                 3802 	.db #0x80	; 128
   03F0 80                 3803 	.db #0x80	; 128
   03F1 00                 3804 	.db #0x00	; 0
   03F2 00                 3805 	.db #0x00	; 0
   03F3 00                 3806 	.db #0x00	; 0
   03F4 00                 3807 	.db #0x00	; 0
   03F5 FE                 3808 	.db #0xFE	; 254
   03F6 06                 3809 	.db #0x06	; 6
   03F7 06                 3810 	.db #0x06	; 6
   03F8 06                 3811 	.db #0x06	; 6
   03F9 FC                 3812 	.db #0xFC	; 252
   03FA 00                 3813 	.db #0x00	; 0
   03FB 00                 3814 	.db #0x00	; 0
   03FC 00                 3815 	.db #0x00	; 0
   03FD 80                 3816 	.db #0x80	; 128
   03FE 80                 3817 	.db #0x80	; 128
   03FF 80                 3818 	.db #0x80	; 128
   0400 00                 3819 	.db #0x00	; 0
   0401 00                 3820 	.db #0x00	; 0
   0402 00                 3821 	.db #0x00	; 0
   0403 00                 3822 	.db #0x00	; 0
   0404 00                 3823 	.db #0x00	; 0
   0405 80                 3824 	.db #0x80	; 128
   0406 80                 3825 	.db #0x80	; 128
   0407 80                 3826 	.db #0x80	; 128
   0408 00                 3827 	.db #0x00	; 0
   0409 00                 3828 	.db #0x00	; 0
   040A 00                 3829 	.db #0x00	; 0
   040B 00                 3830 	.db #0x00	; 0
   040C 00                 3831 	.db #0x00	; 0
   040D 00                 3832 	.db #0x00	; 0
   040E FE                 3833 	.db #0xFE	; 254
   040F 07                 3834 	.db #0x07	; 7
   0410 00                 3835 	.db #0x00	; 0
   0411 00                 3836 	.db #0x00	; 0
   0412 00                 3837 	.db #0x00	; 0
   0413 00                 3838 	.db #0x00	; 0
   0414 01                 3839 	.db #0x01	; 1
   0415 1F                 3840 	.db #0x1F	; 31
   0416 F0                 3841 	.db #0xF0	; 240
   0417 7F                 3842 	.db #0x7F	; 127
   0418 C3                 3843 	.db #0xC3	; 195
   0419 03                 3844 	.db #0x03	; 3
   041A 03                 3845 	.db #0x03	; 3
   041B 03                 3846 	.db #0x03	; 3
   041C 07                 3847 	.db #0x07	; 7
   041D C3                 3848 	.db #0xC3	; 195
   041E 03                 3849 	.db #0x03	; 3
   041F 03                 3850 	.db #0x03	; 3
   0420 07                 3851 	.db #0x07	; 7
   0421 FF                 3852 	.db #0xFF	; 255
   0422 C3                 3853 	.db #0xC3	; 195
   0423 03                 3854 	.db #0x03	; 3
   0424 03                 3855 	.db #0x03	; 3
   0425 03                 3856 	.db #0x03	; 3
   0426 83                 3857 	.db #0x83	; 131
   0427 83                 3858 	.db #0x83	; 131
   0428 03                 3859 	.db #0x03	; 3
   0429 03                 3860 	.db #0x03	; 3
   042A 0E                 3861 	.db #0x0E	; 14
   042B FE                 3862 	.db #0xFE	; 254
   042C C7                 3863 	.db #0xC7	; 199
   042D C7                 3864 	.db #0xC7	; 199
   042E 07                 3865 	.db #0x07	; 7
   042F 07                 3866 	.db #0x07	; 7
   0430 07                 3867 	.db #0x07	; 7
   0431 FF                 3868 	.db #0xFF	; 255
   0432 C3                 3869 	.db #0xC3	; 195
   0433 83                 3870 	.db #0x83	; 131
   0434 03                 3871 	.db #0x03	; 3
   0435 03                 3872 	.db #0x03	; 3
   0436 03                 3873 	.db #0x03	; 3
   0437 83                 3874 	.db #0x83	; 131
   0438 03                 3875 	.db #0x03	; 3
   0439 03                 3876 	.db #0x03	; 3
   043A 03                 3877 	.db #0x03	; 3
   043B 83                 3878 	.db #0x83	; 131
   043C 83                 3879 	.db #0x83	; 131
   043D 03                 3880 	.db #0x03	; 3
   043E 03                 3881 	.db #0x03	; 3
   043F 07                 3882 	.db #0x07	; 7
   0440 FC                 3883 	.db #0xFC	; 252
   0441 C0                 3884 	.db #0xC0	; 192
   0442 00                 3885 	.db #0x00	; 0
   0443 00                 3886 	.db #0x00	; 0
   0444 00                 3887 	.db #0x00	; 0
   0445 00                 3888 	.db #0x00	; 0
   0446 07                 3889 	.db #0x07	; 7
   0447 FE                 3890 	.db #0xFE	; 254
   0448 00                 3891 	.db #0x00	; 0
   0449 00                 3892 	.db #0x00	; 0
   044A 00                 3893 	.db #0x00	; 0
   044B 0E                 3894 	.db #0x0E	; 14
   044C 0E                 3895 	.db #0x0E	; 14
   044D 00                 3896 	.db #0x00	; 0
   044E 00                 3897 	.db #0x00	; 0
   044F 20                 3898 	.db #0x20	; 32
   0450 7C                 3899 	.db #0x7C	; 124
   0451 0F                 3900 	.db #0x0F	; 15
   0452 07                 3901 	.db #0x07	; 7
   0453 03                 3902 	.db #0x03	; 3
   0454 C3                 3903 	.db #0xC3	; 195
   0455 83                 3904 	.db #0x83	; 131
   0456 07                 3905 	.db #0x07	; 7
   0457 03                 3906 	.db #0x03	; 3
   0458 03                 3907 	.db #0x03	; 3
   0459 C3                 3908 	.db #0xC3	; 195
   045A F3                 3909 	.db #0xF3	; 243
   045B C3                 3910 	.db #0xC3	; 195
   045C 03                 3911 	.db #0x03	; 3
   045D 03                 3912 	.db #0x03	; 3
   045E 03                 3913 	.db #0x03	; 3
   045F 83                 3914 	.db #0x83	; 131
   0460 83                 3915 	.db #0x83	; 131
   0461 03                 3916 	.db #0x03	; 3
   0462 03                 3917 	.db #0x03	; 3
   0463 0E                 3918 	.db #0x0E	; 14
   0464 0E                 3919 	.db #0x0E	; 14
   0465 07                 3920 	.db #0x07	; 7
   0466 03                 3921 	.db #0x03	; 3
   0467 43                 3922 	.db #0x43	; 67	'C'
   0468 03                 3923 	.db #0x03	; 3
   0469 03                 3924 	.db #0x03	; 3
   046A 07                 3925 	.db #0x07	; 7
   046B 8F                 3926 	.db #0x8F	; 143
   046C F3                 3927 	.db #0xF3	; 243
   046D C3                 3928 	.db #0xC3	; 195
   046E 01                 3929 	.db #0x01	; 1
   046F 01                 3930 	.db #0x01	; 1
   0470 03                 3931 	.db #0x03	; 3
   0471 83                 3932 	.db #0x83	; 131
   0472 03                 3933 	.db #0x03	; 3
   0473 C7                 3934 	.db #0xC7	; 199
   0474 FF                 3935 	.db #0xFF	; 255
   0475 87                 3936 	.db #0x87	; 135
   0476 07                 3937 	.db #0x07	; 7
   0477 07                 3938 	.db #0x07	; 7
   0478 07                 3939 	.db #0x07	; 7
   0479 FF                 3940 	.db #0xFF	; 255
   047A 0E                 3941 	.db #0x0E	; 14
   047B 07                 3942 	.db #0x07	; 7
   047C 03                 3943 	.db #0x03	; 3
   047D 03                 3944 	.db #0x03	; 3
   047E 03                 3945 	.db #0x03	; 3
   047F 03                 3946 	.db #0x03	; 3
   0480 03                 3947 	.db #0x03	; 3
   0481 0E                 3948 	.db #0x0E	; 14
   0482 FC                 3949 	.db #0xFC	; 252
   0483 0E                 3950 	.db #0x0E	; 14
   0484 03                 3951 	.db #0x03	; 3
   0485 03                 3952 	.db #0x03	; 3
   0486 03                 3953 	.db #0x03	; 3
   0487 03                 3954 	.db #0x03	; 3
   0488 03                 3955 	.db #0x03	; 3
   0489 0E                 3956 	.db #0x0E	; 14
   048A FC                 3957 	.db #0xFC	; 252
   048B 00                 3958 	.db #0x00	; 0
   048C 00                 3959 	.db #0x00	; 0
   048D FE                 3960 	.db #0xFE	; 254
   048E 87                 3961 	.db #0x87	; 135
   048F 80                 3962 	.db #0x80	; 128
   0490 80                 3963 	.db #0x80	; 128
   0491 80                 3964 	.db #0x80	; 128
   0492 FE                 3965 	.db #0xFE	; 254
   0493 80                 3966 	.db #0x80	; 128
   0494 80                 3967 	.db #0x80	; 128
   0495 80                 3968 	.db #0x80	; 128
   0496 87                 3969 	.db #0x87	; 135
   0497 FE                 3970 	.db #0xFE	; 254
   0498 8F                 3971 	.db #0x8F	; 143
   0499 80                 3972 	.db #0x80	; 128
   049A 80                 3973 	.db #0x80	; 128
   049B 80                 3974 	.db #0x80	; 128
   049C 8E                 3975 	.db #0x8E	; 142
   049D DF                 3976 	.db #0xDF	; 223
   049E 8E                 3977 	.db #0x8E	; 142
   049F 80                 3978 	.db #0x80	; 128
   04A0 80                 3979 	.db #0x80	; 128
   04A1 8F                 3980 	.db #0x8F	; 143
   04A2 8F                 3981 	.db #0x8F	; 143
   04A3 80                 3982 	.db #0x80	; 128
   04A4 80                 3983 	.db #0x80	; 128
   04A5 80                 3984 	.db #0x80	; 128
   04A6 8F                 3985 	.db #0x8F	; 143
   04A7 8F                 3986 	.db #0x8F	; 143
   04A8 80                 3987 	.db #0x80	; 128
   04A9 80                 3988 	.db #0x80	; 128
   04AA 80                 3989 	.db #0x80	; 128
   04AB 8F                 3990 	.db #0x8F	; 143
   04AC 8F                 3991 	.db #0x8F	; 143
   04AD 8F                 3992 	.db #0x8F	; 143
   04AE 80                 3993 	.db #0x80	; 128
   04AF 80                 3994 	.db #0x80	; 128
   04B0 80                 3995 	.db #0x80	; 128
   04B1 8F                 3996 	.db #0x8F	; 143
   04B2 FF                 3997 	.db #0xFF	; 255
   04B3 8F                 3998 	.db #0x8F	; 143
   04B4 80                 3999 	.db #0x80	; 128
   04B5 80                 4000 	.db #0x80	; 128
   04B6 8F                 4001 	.db #0x8F	; 143
   04B7 8F                 4002 	.db #0x8F	; 143
   04B8 80                 4003 	.db #0x80	; 128
   04B9 80                 4004 	.db #0x80	; 128
   04BA 80                 4005 	.db #0x80	; 128
   04BB FF                 4006 	.db #0xFF	; 255
   04BC 8F                 4007 	.db #0x8F	; 143
   04BD 80                 4008 	.db #0x80	; 128
   04BE 80                 4009 	.db #0x80	; 128
   04BF 80                 4010 	.db #0x80	; 128
   04C0 8F                 4011 	.db #0x8F	; 143
   04C1 FF                 4012 	.db #0xFF	; 255
   04C2 00                 4013 	.db #0x00	; 0
   04C3 00                 4014 	.db #0x00	; 0
   04C4 00                 4015 	.db #0x00	; 0
   04C5 00                 4016 	.db #0x00	; 0
   04C6 FF                 4017 	.db #0xFF	; 255
   04C7 87                 4018 	.db #0x87	; 135
   04C8 80                 4019 	.db #0x80	; 128
   04C9 80                 4020 	.db #0x80	; 128
   04CA 80                 4021 	.db #0x80	; 128
   04CB 87                 4022 	.db #0x87	; 135
   04CC 87                 4023 	.db #0x87	; 135
   04CD 80                 4024 	.db #0x80	; 128
   04CE 80                 4025 	.db #0x80	; 128
   04CF 80                 4026 	.db #0x80	; 128
   04D0 E0                 4027 	.db #0xE0	; 224
   04D1 F0                 4028 	.db #0xF0	; 240
   04D2 C0                 4029 	.db #0xC0	; 192
   04D3 80                 4030 	.db #0x80	; 128
   04D4 87                 4031 	.db #0x87	; 135
   04D5 87                 4032 	.db #0x87	; 135
   04D6 C0                 4033 	.db #0xC0	; 192
   04D7 80                 4034 	.db #0x80	; 128
   04D8 80                 4035 	.db #0x80	; 128
   04D9 83                 4036 	.db #0x83	; 131
   04DA FF                 4037 	.db #0xFF	; 255
   04DB 8F                 4038 	.db #0x8F	; 143
   04DC 80                 4039 	.db #0x80	; 128
   04DD 80                 4040 	.db #0x80	; 128
   04DE 80                 4041 	.db #0x80	; 128
   04DF 8F                 4042 	.db #0x8F	; 143
   04E0 8F                 4043 	.db #0x8F	; 143
   04E1 80                 4044 	.db #0x80	; 128
   04E2 80                 4045 	.db #0x80	; 128
   04E3 80                 4046 	.db #0x80	; 128
   04E4 80                 4047 	.db #0x80	; 128
   04E5 E0                 4048 	.db #0xE0	; 224
   04E6 C0                 4049 	.db #0xC0	; 192
   04E7 80                 4050 	.db #0x80	; 128
   04E8 80                 4051 	.db #0x80	; 128
   04E9 84                 4052 	.db #0x84	; 132
   04EA 86                 4053 	.db #0x86	; 134
   04EB FF                 4054 	.db #0xFF	; 255
   04EC FF                 4055 	.db #0xFF	; 255
   04ED 8F                 4056 	.db #0x8F	; 143
   04EE 80                 4057 	.db #0x80	; 128
   04EF 80                 4058 	.db #0x80	; 128
   04F0 83                 4059 	.db #0x83	; 131
   04F1 8F                 4060 	.db #0x8F	; 143
   04F2 FF                 4061 	.db #0xFF	; 255
   04F3 03                 4062 	.db #0x03	; 3
   04F4 C1                 4063 	.db #0xC1	; 193
   04F5 FF                 4064 	.db #0xFF	; 255
   04F6 40                 4065 	.db #0x40	; 64
   04F7 00                 4066 	.db #0x00	; 0
   04F8 00                 4067 	.db #0x00	; 0
   04F9 FF                 4068 	.db #0xFF	; 255
   04FA F0                 4069 	.db #0xF0	; 240
   04FB E0                 4070 	.db #0xE0	; 224
   04FC C0                 4071 	.db #0xC0	; 192
   04FD 80                 4072 	.db #0x80	; 128
   04FE 80                 4073 	.db #0x80	; 128
   04FF 80                 4074 	.db #0x80	; 128
   0500 06                 4075 	.db #0x06	; 6
   0501 F6                 4076 	.db #0xF6	; 246
   0502 3F                 4077 	.db #0x3F	; 63
   0503 F0                 4078 	.db #0xF0	; 240
   0504 C0                 4079 	.db #0xC0	; 192
   0505 80                 4080 	.db #0x80	; 128
   0506 80                 4081 	.db #0x80	; 128
   0507 80                 4082 	.db #0x80	; 128
   0508 06                 4083 	.db #0x06	; 6
   0509 F6                 4084 	.db #0xF6	; 246
   050A 3F                 4085 	.db #0x3F	; 63
   050B 00                 4086 	.db #0x00	; 0
   050C 00                 4087 	.db #0x00	; 0
   050D 03                 4088 	.db #0x03	; 3
   050E 03                 4089 	.db #0x03	; 3
   050F 03                 4090 	.db #0x03	; 3
   0510 03                 4091 	.db #0x03	; 3
   0511 03                 4092 	.db #0x03	; 3
   0512 03                 4093 	.db #0x03	; 3
   0513 01                 4094 	.db #0x01	; 1
   0514 03                 4095 	.db #0x03	; 3
   0515 03                 4096 	.db #0x03	; 3
   0516 03                 4097 	.db #0x03	; 3
   0517 03                 4098 	.db #0x03	; 3
   0518 03                 4099 	.db #0x03	; 3
   0519 03                 4100 	.db #0x03	; 3
   051A 03                 4101 	.db #0x03	; 3
   051B 03                 4102 	.db #0x03	; 3
   051C 03                 4103 	.db #0x03	; 3
   051D 03                 4104 	.db #0x03	; 3
   051E 03                 4105 	.db #0x03	; 3
   051F 03                 4106 	.db #0x03	; 3
   0520 03                 4107 	.db #0x03	; 3
   0521 03                 4108 	.db #0x03	; 3
   0522 03                 4109 	.db #0x03	; 3
   0523 03                 4110 	.db #0x03	; 3
   0524 03                 4111 	.db #0x03	; 3
   0525 03                 4112 	.db #0x03	; 3
   0526 03                 4113 	.db #0x03	; 3
   0527 03                 4114 	.db #0x03	; 3
   0528 03                 4115 	.db #0x03	; 3
   0529 03                 4116 	.db #0x03	; 3
   052A 03                 4117 	.db #0x03	; 3
   052B 03                 4118 	.db #0x03	; 3
   052C 03                 4119 	.db #0x03	; 3
   052D 03                 4120 	.db #0x03	; 3
   052E 03                 4121 	.db #0x03	; 3
   052F 03                 4122 	.db #0x03	; 3
   0530 03                 4123 	.db #0x03	; 3
   0531 03                 4124 	.db #0x03	; 3
   0532 01                 4125 	.db #0x01	; 1
   0533 01                 4126 	.db #0x01	; 1
   0534 03                 4127 	.db #0x03	; 3
   0535 03                 4128 	.db #0x03	; 3
   0536 03                 4129 	.db #0x03	; 3
   0537 03                 4130 	.db #0x03	; 3
   0538 03                 4131 	.db #0x03	; 3
   0539 03                 4132 	.db #0x03	; 3
   053A 03                 4133 	.db #0x03	; 3
   053B 03                 4134 	.db #0x03	; 3
   053C 03                 4135 	.db #0x03	; 3
   053D 03                 4136 	.db #0x03	; 3
   053E 03                 4137 	.db #0x03	; 3
   053F 03                 4138 	.db #0x03	; 3
   0540 03                 4139 	.db #0x03	; 3
   0541 03                 4140 	.db #0x03	; 3
   0542 00                 4141 	.db #0x00	; 0
   0543 00                 4142 	.db #0x00	; 0
   0544 00                 4143 	.db #0x00	; 0
   0545 00                 4144 	.db #0x00	; 0
   0546 01                 4145 	.db #0x01	; 1
   0547 01                 4146 	.db #0x01	; 1
   0548 01                 4147 	.db #0x01	; 1
   0549 03                 4148 	.db #0x03	; 3
   054A 03                 4149 	.db #0x03	; 3
   054B 03                 4150 	.db #0x03	; 3
   054C 03                 4151 	.db #0x03	; 3
   054D 03                 4152 	.db #0x03	; 3
   054E 01                 4153 	.db #0x01	; 1
   054F 01                 4154 	.db #0x01	; 1
   0550 00                 4155 	.db #0x00	; 0
   0551 00                 4156 	.db #0x00	; 0
   0552 01                 4157 	.db #0x01	; 1
   0553 03                 4158 	.db #0x03	; 3
   0554 03                 4159 	.db #0x03	; 3
   0555 03                 4160 	.db #0x03	; 3
   0556 01                 4161 	.db #0x01	; 1
   0557 03                 4162 	.db #0x03	; 3
   0558 03                 4163 	.db #0x03	; 3
   0559 03                 4164 	.db #0x03	; 3
   055A 03                 4165 	.db #0x03	; 3
   055B 03                 4166 	.db #0x03	; 3
   055C 03                 4167 	.db #0x03	; 3
   055D 03                 4168 	.db #0x03	; 3
   055E 03                 4169 	.db #0x03	; 3
   055F 03                 4170 	.db #0x03	; 3
   0560 03                 4171 	.db #0x03	; 3
   0561 03                 4172 	.db #0x03	; 3
   0562 03                 4173 	.db #0x03	; 3
   0563 03                 4174 	.db #0x03	; 3
   0564 03                 4175 	.db #0x03	; 3
   0565 01                 4176 	.db #0x01	; 1
   0566 01                 4177 	.db #0x01	; 1
   0567 01                 4178 	.db #0x01	; 1
   0568 03                 4179 	.db #0x03	; 3
   0569 03                 4180 	.db #0x03	; 3
   056A 03                 4181 	.db #0x03	; 3
   056B 01                 4182 	.db #0x01	; 1
   056C 03                 4183 	.db #0x03	; 3
   056D 03                 4184 	.db #0x03	; 3
   056E 03                 4185 	.db #0x03	; 3
   056F 03                 4186 	.db #0x03	; 3
   0570 03                 4187 	.db #0x03	; 3
   0571 03                 4188 	.db #0x03	; 3
   0572 01                 4189 	.db #0x01	; 1
   0573 3F                 4190 	.db #0x3F	; 63
   0574 73                 4191 	.db #0x73	; 115	's'
   0575 60                 4192 	.db #0x60	; 96
   0576 60                 4193 	.db #0x60	; 96
   0577 60                 4194 	.db #0x60	; 96
   0578 70                 4195 	.db #0x70	; 112	'p'
   0579 1F                 4196 	.db #0x1F	; 31
   057A 01                 4197 	.db #0x01	; 1
   057B 00                 4198 	.db #0x00	; 0
   057C 01                 4199 	.db #0x01	; 1
   057D 01                 4200 	.db #0x01	; 1
   057E 03                 4201 	.db #0x03	; 3
   057F 03                 4202 	.db #0x03	; 3
   0580 03                 4203 	.db #0x03	; 3
   0581 03                 4204 	.db #0x03	; 3
   0582 00                 4205 	.db #0x00	; 0
   0583 00                 4206 	.db #0x00	; 0
   0584 01                 4207 	.db #0x01	; 1
   0585 01                 4208 	.db #0x01	; 1
   0586 03                 4209 	.db #0x03	; 3
   0587 03                 4210 	.db #0x03	; 3
   0588 03                 4211 	.db #0x03	; 3
   0589 03                 4212 	.db #0x03	; 3
   058A 00                 4213 	.db #0x00	; 0
   058B 00                 4214 	.db #0x00	; 0
   058C 00                 4215 	.db #0x00	; 0
   058D 00                 4216 	.db #0x00	; 0
   058E 00                 4217 	.db #0x00	; 0
   058F 00                 4218 	.db #0x00	; 0
   0590 00                 4219 	.db #0x00	; 0
   0591 00                 4220 	.db #0x00	; 0
   0592 00                 4221 	.db #0x00	; 0
   0593 00                 4222 	.db #0x00	; 0
   0594 00                 4223 	.db #0x00	; 0
   0595 00                 4224 	.db #0x00	; 0
   0596 00                 4225 	.db #0x00	; 0
   0597 00                 4226 	.db #0x00	; 0
   0598 00                 4227 	.db #0x00	; 0
   0599 00                 4228 	.db #0x00	; 0
   059A 00                 4229 	.db #0x00	; 0
   059B 00                 4230 	.db #0x00	; 0
   059C 00                 4231 	.db #0x00	; 0
   059D 00                 4232 	.db #0x00	; 0
   059E 00                 4233 	.db #0x00	; 0
   059F 00                 4234 	.db #0x00	; 0
   05A0 00                 4235 	.db #0x00	; 0
   05A1 00                 4236 	.db #0x00	; 0
   05A2 00                 4237 	.db #0x00	; 0
   05A3 00                 4238 	.db #0x00	; 0
   05A4 00                 4239 	.db #0x00	; 0
   05A5 00                 4240 	.db #0x00	; 0
   05A6 00                 4241 	.db #0x00	; 0
   05A7 00                 4242 	.db #0x00	; 0
   05A8 00                 4243 	.db #0x00	; 0
   05A9 00                 4244 	.db #0x00	; 0
   05AA 00                 4245 	.db #0x00	; 0
   05AB 00                 4246 	.db #0x00	; 0
   05AC 00                 4247 	.db #0x00	; 0
   05AD 00                 4248 	.db #0x00	; 0
   05AE 00                 4249 	.db #0x00	; 0
   05AF 00                 4250 	.db #0x00	; 0
   05B0 00                 4251 	.db #0x00	; 0
   05B1 00                 4252 	.db #0x00	; 0
   05B2 00                 4253 	.db #0x00	; 0
   05B3 00                 4254 	.db #0x00	; 0
   05B4 00                 4255 	.db #0x00	; 0
   05B5 00                 4256 	.db #0x00	; 0
   05B6 00                 4257 	.db #0x00	; 0
   05B7 00                 4258 	.db #0x00	; 0
   05B8 00                 4259 	.db #0x00	; 0
   05B9 00                 4260 	.db #0x00	; 0
   05BA 00                 4261 	.db #0x00	; 0
   05BB 00                 4262 	.db #0x00	; 0
   05BC 00                 4263 	.db #0x00	; 0
   05BD 00                 4264 	.db #0x00	; 0
   05BE 00                 4265 	.db #0x00	; 0
   05BF 00                 4266 	.db #0x00	; 0
   05C0 00                 4267 	.db #0x00	; 0
   05C1 00                 4268 	.db #0x00	; 0
   05C2 00                 4269 	.db #0x00	; 0
   05C3 00                 4270 	.db #0x00	; 0
   05C4 00                 4271 	.db #0x00	; 0
   05C5 00                 4272 	.db #0x00	; 0
   05C6 00                 4273 	.db #0x00	; 0
   05C7 00                 4274 	.db #0x00	; 0
   05C8 00                 4275 	.db #0x00	; 0
   05C9 00                 4276 	.db #0x00	; 0
   05CA 00                 4277 	.db #0x00	; 0
   05CB 00                 4278 	.db #0x00	; 0
   05CC 00                 4279 	.db #0x00	; 0
   05CD 00                 4280 	.db #0x00	; 0
   05CE 00                 4281 	.db #0x00	; 0
   05CF 00                 4282 	.db #0x00	; 0
   05D0 00                 4283 	.db #0x00	; 0
   05D1 00                 4284 	.db #0x00	; 0
   05D2 00                 4285 	.db #0x00	; 0
   05D3 00                 4286 	.db #0x00	; 0
   05D4 00                 4287 	.db #0x00	; 0
   05D5 00                 4288 	.db #0x00	; 0
   05D6 00                 4289 	.db #0x00	; 0
   05D7 00                 4290 	.db #0x00	; 0
   05D8 00                 4291 	.db #0x00	; 0
   05D9 00                 4292 	.db #0x00	; 0
   05DA 00                 4293 	.db #0x00	; 0
   05DB 00                 4294 	.db #0x00	; 0
   05DC 00                 4295 	.db #0x00	; 0
   05DD 00                 4296 	.db #0x00	; 0
   05DE 00                 4297 	.db #0x00	; 0
   05DF 00                 4298 	.db #0x00	; 0
   05E0 00                 4299 	.db #0x00	; 0
   05E1 00                 4300 	.db #0x00	; 0
   05E2 00                 4301 	.db #0x00	; 0
   05E3 00                 4302 	.db #0x00	; 0
   05E4 00                 4303 	.db #0x00	; 0
   05E5 00                 4304 	.db #0x00	; 0
   05E6 00                 4305 	.db #0x00	; 0
   05E7 00                 4306 	.db #0x00	; 0
   05E8 00                 4307 	.db #0x00	; 0
   05E9 00                 4308 	.db #0x00	; 0
   05EA 00                 4309 	.db #0x00	; 0
   05EB 00                 4310 	.db #0x00	; 0
   05EC 00                 4311 	.db #0x00	; 0
   05ED 00                 4312 	.db #0x00	; 0
   05EE 00                 4313 	.db #0x00	; 0
   05EF 00                 4314 	.db #0x00	; 0
   05F0 00                 4315 	.db #0x00	; 0
   05F1 00                 4316 	.db #0x00	; 0
   05F2 00                 4317 	.db #0x00	; 0
   05F3 00                 4318 	.db #0x00	; 0
   05F4 00                 4319 	.db #0x00	; 0
   05F5 00                 4320 	.db #0x00	; 0
   05F6 00                 4321 	.db #0x00	; 0
   05F7 00                 4322 	.db #0x00	; 0
   05F8 00                 4323 	.db #0x00	; 0
   05F9 00                 4324 	.db #0x00	; 0
   05FA 00                 4325 	.db #0x00	; 0
   05FB 00                 4326 	.db #0x00	; 0
   05FC 00                 4327 	.db #0x00	; 0
   05FD                    4328 _largeLcdChar_Zero:
   05FD 00                 4329 	.db #0x00	; 0
   05FE 00                 4330 	.db #0x00	; 0
   05FF 00                 4331 	.db #0x00	; 0
   0600 00                 4332 	.db #0x00	; 0
   0601 C0                 4333 	.db #0xC0	; 192
   0602 F0                 4334 	.db #0xF0	; 240
   0603 F0                 4335 	.db #0xF0	; 240
   0604 F0                 4336 	.db #0xF0	; 240
   0605 F8                 4337 	.db #0xF8	; 248
   0606 78                 4338 	.db #0x78	; 120	'x'
   0607 3C                 4339 	.db #0x3C	; 60
   0608 3C                 4340 	.db #0x3C	; 60
   0609 3C                 4341 	.db #0x3C	; 60
   060A 3C                 4342 	.db #0x3C	; 60
   060B 3C                 4343 	.db #0x3C	; 60
   060C 7C                 4344 	.db #0x7C	; 124
   060D F8                 4345 	.db #0xF8	; 248
   060E F8                 4346 	.db #0xF8	; 248
   060F F0                 4347 	.db #0xF0	; 240
   0610 F0                 4348 	.db #0xF0	; 240
   0611 E0                 4349 	.db #0xE0	; 224
   0612 C0                 4350 	.db #0xC0	; 192
   0613 00                 4351 	.db #0x00	; 0
   0614 00                 4352 	.db #0x00	; 0
   0615 00                 4353 	.db #0x00	; 0
   0616 00                 4354 	.db #0x00	; 0
   0617 00                 4355 	.db #0x00	; 0
   0618 00                 4356 	.db #0x00	; 0
   0619 E0                 4357 	.db #0xE0	; 224
   061A FF                 4358 	.db #0xFF	; 255
   061B FF                 4359 	.db #0xFF	; 255
   061C FF                 4360 	.db #0xFF	; 255
   061D FF                 4361 	.db #0xFF	; 255
   061E FF                 4362 	.db #0xFF	; 255
   061F 01                 4363 	.db #0x01	; 1
   0620 00                 4364 	.db #0x00	; 0
   0621 00                 4365 	.db #0x00	; 0
   0622 00                 4366 	.db #0x00	; 0
   0623 00                 4367 	.db #0x00	; 0
   0624 00                 4368 	.db #0x00	; 0
   0625 00                 4369 	.db #0x00	; 0
   0626 00                 4370 	.db #0x00	; 0
   0627 00                 4371 	.db #0x00	; 0
   0628 0F                 4372 	.db #0x0F	; 15
   0629 FF                 4373 	.db #0xFF	; 255
   062A FF                 4374 	.db #0xFF	; 255
   062B FF                 4375 	.db #0xFF	; 255
   062C FF                 4376 	.db #0xFF	; 255
   062D FC                 4377 	.db #0xFC	; 252
   062E 00                 4378 	.db #0x00	; 0
   062F 00                 4379 	.db #0x00	; 0
   0630 00                 4380 	.db #0x00	; 0
   0631 00                 4381 	.db #0x00	; 0
   0632 00                 4382 	.db #0x00	; 0
   0633 07                 4383 	.db #0x07	; 7
   0634 FF                 4384 	.db #0xFF	; 255
   0635 FF                 4385 	.db #0xFF	; 255
   0636 FF                 4386 	.db #0xFF	; 255
   0637 FF                 4387 	.db #0xFF	; 255
   0638 FF                 4388 	.db #0xFF	; 255
   0639 80                 4389 	.db #0x80	; 128
   063A 00                 4390 	.db #0x00	; 0
   063B 00                 4391 	.db #0x00	; 0
   063C 00                 4392 	.db #0x00	; 0
   063D 00                 4393 	.db #0x00	; 0
   063E 00                 4394 	.db #0x00	; 0
   063F 00                 4395 	.db #0x00	; 0
   0640 00                 4396 	.db #0x00	; 0
   0641 00                 4397 	.db #0x00	; 0
   0642 F0                 4398 	.db #0xF0	; 240
   0643 FF                 4399 	.db #0xFF	; 255
   0644 FF                 4400 	.db #0xFF	; 255
   0645 FF                 4401 	.db #0xFF	; 255
   0646 FF                 4402 	.db #0xFF	; 255
   0647 1F                 4403 	.db #0x1F	; 31
   0648 00                 4404 	.db #0x00	; 0
   0649 00                 4405 	.db #0x00	; 0
   064A 00                 4406 	.db #0x00	; 0
   064B 00                 4407 	.db #0x00	; 0
   064C 00                 4408 	.db #0x00	; 0
   064D 00                 4409 	.db #0x00	; 0
   064E 00                 4410 	.db #0x00	; 0
   064F 07                 4411 	.db #0x07	; 7
   0650 0F                 4412 	.db #0x0F	; 15
   0651 0F                 4413 	.db #0x0F	; 15
   0652 1F                 4414 	.db #0x1F	; 31
   0653 1F                 4415 	.db #0x1F	; 31
   0654 3E                 4416 	.db #0x3E	; 62
   0655 3C                 4417 	.db #0x3C	; 60
   0656 3C                 4418 	.db #0x3C	; 60
   0657 3C                 4419 	.db #0x3C	; 60
   0658 3C                 4420 	.db #0x3C	; 60
   0659 3C                 4421 	.db #0x3C	; 60
   065A 3E                 4422 	.db #0x3E	; 62
   065B 1F                 4423 	.db #0x1F	; 31
   065C 1F                 4424 	.db #0x1F	; 31
   065D 0F                 4425 	.db #0x0F	; 15
   065E 0F                 4426 	.db #0x0F	; 15
   065F 07                 4427 	.db #0x07	; 7
   0660 01                 4428 	.db #0x01	; 1
   0661 00                 4429 	.db #0x00	; 0
   0662 00                 4430 	.db #0x00	; 0
   0663 00                 4431 	.db #0x00	; 0
   0664 00                 4432 	.db #0x00	; 0
   0665 00                 4433 	.db #0x00	; 0
   0666 00                 4434 	.db #0x00	; 0
   0667 00                 4435 	.db #0x00	; 0
   0668 00                 4436 	.db #0x00	; 0
   0669 00                 4437 	.db #0x00	; 0
   066A 00                 4438 	.db #0x00	; 0
   066B 00                 4439 	.db #0x00	; 0
   066C 00                 4440 	.db #0x00	; 0
   066D 00                 4441 	.db #0x00	; 0
   066E 00                 4442 	.db #0x00	; 0
   066F 00                 4443 	.db #0x00	; 0
   0670 00                 4444 	.db #0x00	; 0
   0671 00                 4445 	.db #0x00	; 0
   0672 00                 4446 	.db #0x00	; 0
   0673 00                 4447 	.db #0x00	; 0
   0674 00                 4448 	.db #0x00	; 0
   0675 00                 4449 	.db #0x00	; 0
   0676 00                 4450 	.db #0x00	; 0
   0677 00                 4451 	.db #0x00	; 0
   0678 00                 4452 	.db #0x00	; 0
   0679 00                 4453 	.db #0x00	; 0
   067A 00                 4454 	.db #0x00	; 0
   067B 00                 4455 	.db #0x00	; 0
   067C 00                 4456 	.db #0x00	; 0
   067D 00                 4457 	.db #0x00	; 0
   067E                    4458 _upperLine:
   067E 01                 4459 	.db #0x01	; 1
   067F                    4460 _topLeftCorner:
   067F FF                 4461 	.db #0xFF	; 255
   0680 01                 4462 	.db #0x01	; 1
   0681                    4463 _Line:
   0681 FF                 4464 	.db #0xFF	; 255
   0682                    4465 _topRightCorner:
   0682 01                 4466 	.db #0x01	; 1
   0683 FF                 4467 	.db #0xFF	; 255
   0684                    4468 _bottomRightCorner:
   0684 08                 4469 	.db #0x08	; 8
   0685 F0                 4470 	.db #0xF0	; 240
   0686                    4471 _bottomLeftCorner:
   0686 F0                 4472 	.db #0xF0	; 240
   0687 08                 4473 	.db #0x08	; 8
                           4474 	.area XINIT   (CODE)
                           4475 	.area CABS    (ABS,CODE)
