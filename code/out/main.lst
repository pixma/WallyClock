                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.3.0 #8604 (May 11 2013) (Linux)
                              4 ; This file was generated Sun Dec  1 19:12:49 2013
                              5 ;--------------------------------------------------------
                              6 	.module main
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _welcomeScreenImage
                             13 	.globl _glcdSmallCharSystemFont
                             14 	.globl _glcdCharSystemFont
                             15 	.globl _glcdNumberSystemFont
                             16 	.globl _main
                             17 	.globl _SCK
                             18 	.globl _SDA
                             19 	.globl _TF2
                             20 	.globl _EXF2
                             21 	.globl _RCLK
                             22 	.globl _TCLK
                             23 	.globl _EXEN2
                             24 	.globl _TR2
                             25 	.globl _C_T2
                             26 	.globl _CP_RL2
                             27 	.globl _T2CON_7
                             28 	.globl _T2CON_6
                             29 	.globl _T2CON_5
                             30 	.globl _T2CON_4
                             31 	.globl _T2CON_3
                             32 	.globl _T2CON_2
                             33 	.globl _T2CON_1
                             34 	.globl _T2CON_0
                             35 	.globl _PT2
                             36 	.globl _ET2
                             37 	.globl _CY
                             38 	.globl _AC
                             39 	.globl _F0
                             40 	.globl _RS1
                             41 	.globl _RS0
                             42 	.globl _OV
                             43 	.globl _F1
                             44 	.globl _P
                             45 	.globl _PS
                             46 	.globl _PT1
                             47 	.globl _PX1
                             48 	.globl _PT0
                             49 	.globl _PX0
                             50 	.globl _RD
                             51 	.globl _WR
                             52 	.globl _T1
                             53 	.globl _T0
                             54 	.globl _INT1
                             55 	.globl _INT0
                             56 	.globl _TXD
                             57 	.globl _RXD
                             58 	.globl _P3_7
                             59 	.globl _P3_6
                             60 	.globl _P3_5
                             61 	.globl _P3_4
                             62 	.globl _P3_3
                             63 	.globl _P3_2
                             64 	.globl _P3_1
                             65 	.globl _P3_0
                             66 	.globl _EA
                             67 	.globl _ES
                             68 	.globl _ET1
                             69 	.globl _EX1
                             70 	.globl _ET0
                             71 	.globl _EX0
                             72 	.globl _P2_7
                             73 	.globl _P2_6
                             74 	.globl _P2_5
                             75 	.globl _P2_4
                             76 	.globl _P2_3
                             77 	.globl _P2_2
                             78 	.globl _P2_1
                             79 	.globl _P2_0
                             80 	.globl _SM0
                             81 	.globl _SM1
                             82 	.globl _SM2
                             83 	.globl _REN
                             84 	.globl _TB8
                             85 	.globl _RB8
                             86 	.globl _TI
                             87 	.globl _RI
                             88 	.globl _P1_7
                             89 	.globl _P1_6
                             90 	.globl _P1_5
                             91 	.globl _P1_4
                             92 	.globl _P1_3
                             93 	.globl _P1_2
                             94 	.globl _P1_1
                             95 	.globl _P1_0
                             96 	.globl _TF1
                             97 	.globl _TR1
                             98 	.globl _TF0
                             99 	.globl _TR0
                            100 	.globl _IE1
                            101 	.globl _IT1
                            102 	.globl _IE0
                            103 	.globl _IT0
                            104 	.globl _P0_7
                            105 	.globl _P0_6
                            106 	.globl _P0_5
                            107 	.globl _P0_4
                            108 	.globl _P0_3
                            109 	.globl _P0_2
                            110 	.globl _P0_1
                            111 	.globl _P0_0
                            112 	.globl _SWDT
                            113 	.globl _WDT
                            114 	.globl _WDTS
                            115 	.globl _WDRE
                            116 	.globl _WDOUT
                            117 	.globl _PBO
                            118 	.globl _PPC
                            119 	.globl _EBO
                            120 	.globl _EC
                            121 	.globl _CCF0
                            122 	.globl _CCF1
                            123 	.globl _CCF2
                            124 	.globl _CCF3
                            125 	.globl _CCF4
                            126 	.globl _CR
                            127 	.globl _CF
                            128 	.globl _TH2
                            129 	.globl _TL2
                            130 	.globl _RCAP2H
                            131 	.globl _RCAP2L
                            132 	.globl _T2CON
                            133 	.globl _B
                            134 	.globl _ACC
                            135 	.globl _PSW
                            136 	.globl _IP
                            137 	.globl _P3
                            138 	.globl _IE
                            139 	.globl _P2
                            140 	.globl _SBUF
                            141 	.globl _SCON
                            142 	.globl _P1
                            143 	.globl _TH1
                            144 	.globl _TH0
                            145 	.globl _TL1
                            146 	.globl _TL0
                            147 	.globl _TMOD
                            148 	.globl _TCON
                            149 	.globl _PCON
                            150 	.globl _DPH
                            151 	.globl _DPL
                            152 	.globl _SP
                            153 	.globl _P0
                            154 	.globl _T2MOD
                            155 	.globl _WDTD
                            156 	.globl _WDTC
                            157 	.globl _SPDAT
                            158 	.globl _SPDR
                            159 	.globl _SPCFG
                            160 	.globl _SPSR
                            161 	.globl _SPCTL
                            162 	.globl _SPCR
                            163 	.globl _SADEN
                            164 	.globl _SADDR
                            165 	.globl _IP1H
                            166 	.globl _IP1
                            167 	.globl _IP0H
                            168 	.globl _IP0
                            169 	.globl _IEN1
                            170 	.globl _IEN0
                            171 	.globl _FCF
                            172 	.globl _FST
                            173 	.globl _CMOD
                            174 	.globl _CL
                            175 	.globl _CH
                            176 	.globl _CCON
                            177 	.globl _CCAPM4
                            178 	.globl _CCAPM3
                            179 	.globl _CCAPM2
                            180 	.globl _CCAPM1
                            181 	.globl _CCAPM0
                            182 	.globl _CCAP4L
                            183 	.globl _CCAP3L
                            184 	.globl _CCAP2L
                            185 	.globl _CCAP1L
                            186 	.globl _CCAP0L
                            187 	.globl _CCAP4H
                            188 	.globl _CCAP3H
                            189 	.globl _CCAP2H
                            190 	.globl _CCAP1H
                            191 	.globl _CCAP0H
                            192 	.globl _AUXR1
                            193 	.globl _AUXR
                            194 	.globl _nVar
                            195 	.globl _i
                            196 	.globl _ch_CharCatch
                            197 	.globl _Set_DS1307_RTC_Date_PARM_4
                            198 	.globl _Set_DS1307_RTC_Date_PARM_3
                            199 	.globl _Set_DS1307_RTC_Date_PARM_2
                            200 	.globl _Set_DS1307_RTC_Time_PARM_4
                            201 	.globl _Set_DS1307_RTC_Time_PARM_3
                            202 	.globl _Set_DS1307_RTC_Time_PARM_2
                            203 	.globl _Read_Bytes_From_DS1307_RTC_PARM_3
                            204 	.globl _Read_Bytes_From_DS1307_RTC_PARM_2
                            205 	.globl _Write_Bytes_To_DS1307_RTC_PARM_3
                            206 	.globl _Write_Bytes_To_DS1307_RTC_PARM_2
                            207 	.globl _Write_Byte_To_DS1307_RTC_PARM_2
                            208 	.globl _Temp
                            209 	.globl _pRTCArray
                            210 	.globl _setGLCDCursor_PARM_2
                            211 	.globl _commandGLCD_PARM_2
                            212 	.globl _InitGLCDEnvironment
                            213 	.globl _commandGLCD
                            214 	.globl _DisplayGLCD
                            215 	.globl _writeGLCD
                            216 	.globl _chipSelectGLCD
                            217 	.globl _clearGLCD
                            218 	.globl _writeLine
                            219 	.globl _printDigit
                            220 	.globl _writeLetter
                            221 	.globl _printNumber
                            222 	.globl _setGLCDCursor
                            223 	.globl _splashImage
                            224 	.globl _beginScreen
                            225 	.globl _delayms
                            226 	.globl ___delay_us
                            227 	.globl _InitI2C
                            228 	.globl _I2C_Start
                            229 	.globl _I2C_ReStart
                            230 	.globl _I2C_Stop
                            231 	.globl _I2C_Send_ACK
                            232 	.globl _I2C_Send_NACK
                            233 	.globl _I2C_Write_Byte
                            234 	.globl _I2C_Read_Byte
                            235 	.globl _delay
                            236 	.globl _Write_Byte_To_DS1307_RTC
                            237 	.globl _Read_Byte_From_DS1307_RTC
                            238 	.globl _Write_Bytes_To_DS1307_RTC
                            239 	.globl _Read_Bytes_From_DS1307_RTC
                            240 	.globl _Set_DS1307_RTC_Time
                            241 	.globl _Get_DS1307_RTC_Time
                            242 	.globl _Set_DS1307_RTC_Date
                            243 	.globl _Get_DS1307_RTC_Date
                            244 	.globl _getCharLen
                            245 ;--------------------------------------------------------
                            246 ; special function registers
                            247 ;--------------------------------------------------------
                            248 	.area RSEG    (ABS,DATA)
   0000                     249 	.org 0x0000
                     008E   250 _AUXR	=	0x008e
                     00A2   251 _AUXR1	=	0x00a2
                     00FA   252 _CCAP0H	=	0x00fa
                     00FB   253 _CCAP1H	=	0x00fb
                     00FC   254 _CCAP2H	=	0x00fc
                     00FD   255 _CCAP3H	=	0x00fd
                     00FE   256 _CCAP4H	=	0x00fe
                     00EA   257 _CCAP0L	=	0x00ea
                     00EB   258 _CCAP1L	=	0x00eb
                     00EC   259 _CCAP2L	=	0x00ec
                     00ED   260 _CCAP3L	=	0x00ed
                     00EE   261 _CCAP4L	=	0x00ee
                     00DA   262 _CCAPM0	=	0x00da
                     00DB   263 _CCAPM1	=	0x00db
                     00DC   264 _CCAPM2	=	0x00dc
                     00DD   265 _CCAPM3	=	0x00dd
                     00DE   266 _CCAPM4	=	0x00de
                     00D8   267 _CCON	=	0x00d8
                     00F9   268 _CH	=	0x00f9
                     00E9   269 _CL	=	0x00e9
                     00D9   270 _CMOD	=	0x00d9
                     00B6   271 _FST	=	0x00b6
                     00B1   272 _FCF	=	0x00b1
                     00A8   273 _IEN0	=	0x00a8
                     00E8   274 _IEN1	=	0x00e8
                     00B8   275 _IP0	=	0x00b8
                     00B7   276 _IP0H	=	0x00b7
                     00F8   277 _IP1	=	0x00f8
                     00F7   278 _IP1H	=	0x00f7
                     00A9   279 _SADDR	=	0x00a9
                     00B9   280 _SADEN	=	0x00b9
                     00D5   281 _SPCR	=	0x00d5
                     00D5   282 _SPCTL	=	0x00d5
                     00AA   283 _SPSR	=	0x00aa
                     00AA   284 _SPCFG	=	0x00aa
                     0086   285 _SPDR	=	0x0086
                     0086   286 _SPDAT	=	0x0086
                     00C0   287 _WDTC	=	0x00c0
                     0085   288 _WDTD	=	0x0085
                     00C9   289 _T2MOD	=	0x00c9
                     0080   290 _P0	=	0x0080
                     0081   291 _SP	=	0x0081
                     0082   292 _DPL	=	0x0082
                     0083   293 _DPH	=	0x0083
                     0087   294 _PCON	=	0x0087
                     0088   295 _TCON	=	0x0088
                     0089   296 _TMOD	=	0x0089
                     008A   297 _TL0	=	0x008a
                     008B   298 _TL1	=	0x008b
                     008C   299 _TH0	=	0x008c
                     008D   300 _TH1	=	0x008d
                     0090   301 _P1	=	0x0090
                     0098   302 _SCON	=	0x0098
                     0099   303 _SBUF	=	0x0099
                     00A0   304 _P2	=	0x00a0
                     00A8   305 _IE	=	0x00a8
                     00B0   306 _P3	=	0x00b0
                     00B8   307 _IP	=	0x00b8
                     00D0   308 _PSW	=	0x00d0
                     00E0   309 _ACC	=	0x00e0
                     00F0   310 _B	=	0x00f0
                     00C8   311 _T2CON	=	0x00c8
                     00CA   312 _RCAP2L	=	0x00ca
                     00CB   313 _RCAP2H	=	0x00cb
                     00CC   314 _TL2	=	0x00cc
                     00CD   315 _TH2	=	0x00cd
                            316 ;--------------------------------------------------------
                            317 ; special function bits
                            318 ;--------------------------------------------------------
                            319 	.area RSEG    (ABS,DATA)
   0000                     320 	.org 0x0000
                     00DF   321 _CF	=	0x00df
                     00DE   322 _CR	=	0x00de
                     00DC   323 _CCF4	=	0x00dc
                     00DB   324 _CCF3	=	0x00db
                     00DA   325 _CCF2	=	0x00da
                     00D9   326 _CCF1	=	0x00d9
                     00D8   327 _CCF0	=	0x00d8
                     00AE   328 _EC	=	0x00ae
                     00EB   329 _EBO	=	0x00eb
                     00BE   330 _PPC	=	0x00be
                     00FB   331 _PBO	=	0x00fb
                     00C4   332 _WDOUT	=	0x00c4
                     00C3   333 _WDRE	=	0x00c3
                     00C2   334 _WDTS	=	0x00c2
                     00C1   335 _WDT	=	0x00c1
                     00C0   336 _SWDT	=	0x00c0
                     0080   337 _P0_0	=	0x0080
                     0081   338 _P0_1	=	0x0081
                     0082   339 _P0_2	=	0x0082
                     0083   340 _P0_3	=	0x0083
                     0084   341 _P0_4	=	0x0084
                     0085   342 _P0_5	=	0x0085
                     0086   343 _P0_6	=	0x0086
                     0087   344 _P0_7	=	0x0087
                     0088   345 _IT0	=	0x0088
                     0089   346 _IE0	=	0x0089
                     008A   347 _IT1	=	0x008a
                     008B   348 _IE1	=	0x008b
                     008C   349 _TR0	=	0x008c
                     008D   350 _TF0	=	0x008d
                     008E   351 _TR1	=	0x008e
                     008F   352 _TF1	=	0x008f
                     0090   353 _P1_0	=	0x0090
                     0091   354 _P1_1	=	0x0091
                     0092   355 _P1_2	=	0x0092
                     0093   356 _P1_3	=	0x0093
                     0094   357 _P1_4	=	0x0094
                     0095   358 _P1_5	=	0x0095
                     0096   359 _P1_6	=	0x0096
                     0097   360 _P1_7	=	0x0097
                     0098   361 _RI	=	0x0098
                     0099   362 _TI	=	0x0099
                     009A   363 _RB8	=	0x009a
                     009B   364 _TB8	=	0x009b
                     009C   365 _REN	=	0x009c
                     009D   366 _SM2	=	0x009d
                     009E   367 _SM1	=	0x009e
                     009F   368 _SM0	=	0x009f
                     00A0   369 _P2_0	=	0x00a0
                     00A1   370 _P2_1	=	0x00a1
                     00A2   371 _P2_2	=	0x00a2
                     00A3   372 _P2_3	=	0x00a3
                     00A4   373 _P2_4	=	0x00a4
                     00A5   374 _P2_5	=	0x00a5
                     00A6   375 _P2_6	=	0x00a6
                     00A7   376 _P2_7	=	0x00a7
                     00A8   377 _EX0	=	0x00a8
                     00A9   378 _ET0	=	0x00a9
                     00AA   379 _EX1	=	0x00aa
                     00AB   380 _ET1	=	0x00ab
                     00AC   381 _ES	=	0x00ac
                     00AF   382 _EA	=	0x00af
                     00B0   383 _P3_0	=	0x00b0
                     00B1   384 _P3_1	=	0x00b1
                     00B2   385 _P3_2	=	0x00b2
                     00B3   386 _P3_3	=	0x00b3
                     00B4   387 _P3_4	=	0x00b4
                     00B5   388 _P3_5	=	0x00b5
                     00B6   389 _P3_6	=	0x00b6
                     00B7   390 _P3_7	=	0x00b7
                     00B0   391 _RXD	=	0x00b0
                     00B1   392 _TXD	=	0x00b1
                     00B2   393 _INT0	=	0x00b2
                     00B3   394 _INT1	=	0x00b3
                     00B4   395 _T0	=	0x00b4
                     00B5   396 _T1	=	0x00b5
                     00B6   397 _WR	=	0x00b6
                     00B7   398 _RD	=	0x00b7
                     00B8   399 _PX0	=	0x00b8
                     00B9   400 _PT0	=	0x00b9
                     00BA   401 _PX1	=	0x00ba
                     00BB   402 _PT1	=	0x00bb
                     00BC   403 _PS	=	0x00bc
                     00D0   404 _P	=	0x00d0
                     00D1   405 _F1	=	0x00d1
                     00D2   406 _OV	=	0x00d2
                     00D3   407 _RS0	=	0x00d3
                     00D4   408 _RS1	=	0x00d4
                     00D5   409 _F0	=	0x00d5
                     00D6   410 _AC	=	0x00d6
                     00D7   411 _CY	=	0x00d7
                     00AD   412 _ET2	=	0x00ad
                     00BD   413 _PT2	=	0x00bd
                     00C8   414 _T2CON_0	=	0x00c8
                     00C9   415 _T2CON_1	=	0x00c9
                     00CA   416 _T2CON_2	=	0x00ca
                     00CB   417 _T2CON_3	=	0x00cb
                     00CC   418 _T2CON_4	=	0x00cc
                     00CD   419 _T2CON_5	=	0x00cd
                     00CE   420 _T2CON_6	=	0x00ce
                     00CF   421 _T2CON_7	=	0x00cf
                     00C8   422 _CP_RL2	=	0x00c8
                     00C9   423 _C_T2	=	0x00c9
                     00CA   424 _TR2	=	0x00ca
                     00CB   425 _EXEN2	=	0x00cb
                     00CC   426 _TCLK	=	0x00cc
                     00CD   427 _RCLK	=	0x00cd
                     00CE   428 _EXF2	=	0x00ce
                     00CF   429 _TF2	=	0x00cf
                     0090   430 _SDA	=	0x0090
                     0091   431 _SCK	=	0x0091
                            432 ;--------------------------------------------------------
                            433 ; overlayable register banks
                            434 ;--------------------------------------------------------
                            435 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     436 	.ds 8
                            437 ;--------------------------------------------------------
                            438 ; internal ram data
                            439 ;--------------------------------------------------------
                            440 	.area DSEG    (DATA)
   0000                     441 _commandGLCD_PARM_2:
   0000                     442 	.ds 1
   0001                     443 _printNumber_lNumber_1_40:
   0001                     444 	.ds 4
   0005                     445 _printNumber_cChar_1_41:
   0005                     446 	.ds 1
   0006                     447 _printNumber_cInteger_1_41:
   0006                     448 	.ds 10
   0010                     449 _setGLCDCursor_PARM_2:
   0010                     450 	.ds 2
   0012                     451 _pRTCArray::
   0012                     452 	.ds 4
   0016                     453 _Temp::
   0016                     454 	.ds 1
   0017                     455 _Write_Byte_To_DS1307_RTC_PARM_2:
   0017                     456 	.ds 1
   0018                     457 _Write_Bytes_To_DS1307_RTC_PARM_2:
   0018                     458 	.ds 3
   001B                     459 _Write_Bytes_To_DS1307_RTC_PARM_3:
   001B                     460 	.ds 1
   001C                     461 _Read_Bytes_From_DS1307_RTC_PARM_2:
   001C                     462 	.ds 3
   001F                     463 _Read_Bytes_From_DS1307_RTC_PARM_3:
   001F                     464 	.ds 2
   0021                     465 _Read_Bytes_From_DS1307_RTC_i_1_108:
   0021                     466 	.ds 2
   0023                     467 _Set_DS1307_RTC_Time_PARM_2:
   0023                     468 	.ds 1
   0024                     469 _Set_DS1307_RTC_Time_PARM_3:
   0024                     470 	.ds 1
   0025                     471 _Set_DS1307_RTC_Time_PARM_4:
   0025                     472 	.ds 1
   0026                     473 _Set_DS1307_RTC_Date_PARM_2:
   0026                     474 	.ds 1
   0027                     475 _Set_DS1307_RTC_Date_PARM_3:
   0027                     476 	.ds 1
   0028                     477 _Set_DS1307_RTC_Date_PARM_4:
   0028                     478 	.ds 1
   0029                     479 _ch_CharCatch::
   0029                     480 	.ds 3
   002C                     481 _i::
   002C                     482 	.ds 2
   002E                     483 _nVar::
   002E                     484 	.ds 2
                            485 ;--------------------------------------------------------
                            486 ; overlayable items in internal ram 
                            487 ;--------------------------------------------------------
                            488 	.area	OSEG    (OVR,DATA)
                            489 	.area	OSEG    (OVR,DATA)
                            490 	.area	OSEG    (OVR,DATA)
                            491 	.area	OSEG    (OVR,DATA)
                            492 	.area	OSEG    (OVR,DATA)
                            493 ;--------------------------------------------------------
                            494 ; Stack segment in internal ram 
                            495 ;--------------------------------------------------------
                            496 	.area	SSEG	(DATA)
   0000                     497 __start__stack:
   0000                     498 	.ds	1
                            499 
                            500 ;--------------------------------------------------------
                            501 ; indirectly addressable internal ram data
                            502 ;--------------------------------------------------------
                            503 	.area ISEG    (DATA)
                            504 ;--------------------------------------------------------
                            505 ; absolute internal ram data
                            506 ;--------------------------------------------------------
                            507 	.area IABS    (ABS,DATA)
                            508 	.area IABS    (ABS,DATA)
                            509 ;--------------------------------------------------------
                            510 ; bit data
                            511 ;--------------------------------------------------------
                            512 	.area BSEG    (BIT)
   0000                     513 _Write_Byte_To_DS1307_RTC_sloc0_1_0:
   0000                     514 	.ds 1
   0001                     515 _Read_Byte_From_DS1307_RTC_sloc0_1_0:
   0001                     516 	.ds 1
   0002                     517 _Write_Bytes_To_DS1307_RTC_sloc0_1_0:
   0002                     518 	.ds 1
   0003                     519 _Read_Bytes_From_DS1307_RTC_sloc0_1_0:
   0003                     520 	.ds 1
                            521 ;--------------------------------------------------------
                            522 ; paged external ram data
                            523 ;--------------------------------------------------------
                            524 	.area PSEG    (PAG,XDATA)
                            525 ;--------------------------------------------------------
                            526 ; external ram data
                            527 ;--------------------------------------------------------
                            528 	.area XSEG    (XDATA)
                            529 ;--------------------------------------------------------
                            530 ; absolute external ram data
                            531 ;--------------------------------------------------------
                            532 	.area XABS    (ABS,XDATA)
                            533 ;--------------------------------------------------------
                            534 ; external initialized ram data
                            535 ;--------------------------------------------------------
                            536 	.area XISEG   (XDATA)
                            537 	.area HOME    (CODE)
                            538 	.area GSINIT0 (CODE)
                            539 	.area GSINIT1 (CODE)
                            540 	.area GSINIT2 (CODE)
                            541 	.area GSINIT3 (CODE)
                            542 	.area GSINIT4 (CODE)
                            543 	.area GSINIT5 (CODE)
                            544 	.area GSINIT  (CODE)
                            545 	.area GSFINAL (CODE)
                            546 	.area CSEG    (CODE)
                            547 ;--------------------------------------------------------
                            548 ; interrupt vector 
                            549 ;--------------------------------------------------------
                            550 	.area HOME    (CODE)
   0000                     551 __interrupt_vect:
   0000 02r00r00      [24]  552 	ljmp	__sdcc_gsinit_startup
                            553 ;--------------------------------------------------------
                            554 ; global & static initialisations
                            555 ;--------------------------------------------------------
                            556 	.area HOME    (CODE)
                            557 	.area GSINIT  (CODE)
                            558 	.area GSFINAL (CODE)
                            559 	.area GSINIT  (CODE)
                            560 	.globl __sdcc_gsinit_startup
                            561 	.globl __sdcc_program_startup
                            562 	.globl __start__stack
                            563 	.globl __mcs51_genXINIT
                            564 	.globl __mcs51_genXRAMCLEAR
                            565 	.globl __mcs51_genRAMCLEAR
                            566 	.area GSFINAL (CODE)
   0000 02r00r03      [24]  567 	ljmp	__sdcc_program_startup
                            568 ;--------------------------------------------------------
                            569 ; Home
                            570 ;--------------------------------------------------------
                            571 	.area HOME    (CODE)
                            572 	.area HOME    (CODE)
   0003                     573 __sdcc_program_startup:
   0003 02r08rE0      [24]  574 	ljmp	_main
                            575 ;	return from main will return to caller
                            576 ;--------------------------------------------------------
                            577 ; code
                            578 ;--------------------------------------------------------
                            579 	.area CSEG    (CODE)
                            580 ;------------------------------------------------------------
                            581 ;Allocation info for local variables in function 'InitGLCDEnvironment'
                            582 ;------------------------------------------------------------
                            583 ;	src/glcd.c:8: void InitGLCDEnvironment( void ){
                            584 ;	-----------------------------------------
                            585 ;	 function InitGLCDEnvironment
                            586 ;	-----------------------------------------
   0000                     587 _InitGLCDEnvironment:
                     0007   588 	ar7 = 0x07
                     0006   589 	ar6 = 0x06
                     0005   590 	ar5 = 0x05
                     0004   591 	ar4 = 0x04
                     0003   592 	ar3 = 0x03
                     0002   593 	ar2 = 0x02
                     0001   594 	ar1 = 0x01
                     0000   595 	ar0 = 0x00
                            596 ;	src/glcd.c:9: RST=0;
   0000 C2 92         [12]  597 	clr	_P1_2
                            598 ;	src/glcd.c:10: RST=1;	//reset low then high.
   0002 D2 92         [12]  599 	setb	_P1_2
                            600 ;	src/glcd.c:11: commandGLCD( 0x3e, BOTHCHIP );
   0004 75*00 03      [24]  601 	mov	_commandGLCD_PARM_2,#0x03
   0007 75 82 3E      [24]  602 	mov	dpl,#0x3E
   000A 12r00r31      [24]  603 	lcall	_commandGLCD
                            604 ;	src/glcd.c:12: commandGLCD( 0x3f, BOTHCHIP );	//On the Display srystals.
   000D 75*00 03      [24]  605 	mov	_commandGLCD_PARM_2,#0x03
   0010 75 82 3F      [24]  606 	mov	dpl,#0x3F
   0013 12r00r31      [24]  607 	lcall	_commandGLCD
                            608 ;	src/glcd.c:13: commandGLCD( 0xb8, BOTHCHIP ); //page 0 base address...
   0016 75*00 03      [24]  609 	mov	_commandGLCD_PARM_2,#0x03
   0019 75 82 B8      [24]  610 	mov	dpl,#0xB8
   001C 12r00r31      [24]  611 	lcall	_commandGLCD
                            612 ;	src/glcd.c:14: commandGLCD( 0x40, BOTHCHIP );	//column base address.
   001F 75*00 03      [24]  613 	mov	_commandGLCD_PARM_2,#0x03
   0022 75 82 40      [24]  614 	mov	dpl,#0x40
   0025 12r00r31      [24]  615 	lcall	_commandGLCD
                            616 ;	src/glcd.c:15: commandGLCD( 0xc0, BOTHCHIP );	//taking cursor to top left.
   0028 75*00 03      [24]  617 	mov	_commandGLCD_PARM_2,#0x03
   002B 75 82 C0      [24]  618 	mov	dpl,#0xC0
   002E 02r00r31      [24]  619 	ljmp	_commandGLCD
                            620 ;------------------------------------------------------------
                            621 ;Allocation info for local variables in function 'commandGLCD'
                            622 ;------------------------------------------------------------
                            623 ;chip                      Allocated with name '_commandGLCD_PARM_2'
                            624 ;commandToGLCD             Allocated to registers r7 
                            625 ;------------------------------------------------------------
                            626 ;	src/glcd.c:17: void commandGLCD( unsigned char commandToGLCD, unsigned char chip){
                            627 ;	-----------------------------------------
                            628 ;	 function commandGLCD
                            629 ;	-----------------------------------------
   0031                     630 _commandGLCD:
   0031 AF 82         [24]  631 	mov	r7,dpl
                            632 ;	src/glcd.c:18: chipSelectGLCD( chip );
   0033 85*00 82      [24]  633 	mov	dpl,_commandGLCD_PARM_2
   0036 C0 07         [24]  634 	push	ar7
   0038 12r00r54      [24]  635 	lcall	_chipSelectGLCD
   003B D0 07         [24]  636 	pop	ar7
                            637 ;	src/glcd.c:19: RS=0;
   003D C2 97         [12]  638 	clr	_P1_7
                            639 ;	src/glcd.c:20: writeGLCD( commandToGLCD );
   003F 8F 82         [24]  640 	mov	dpl,r7
   0041 02r00r49      [24]  641 	ljmp	_writeGLCD
                            642 ;------------------------------------------------------------
                            643 ;Allocation info for local variables in function 'DisplayGLCD'
                            644 ;------------------------------------------------------------
                            645 ;cCharData                 Allocated to registers 
                            646 ;------------------------------------------------------------
                            647 ;	src/glcd.c:22: void DisplayGLCD( unsigned char cCharData){
                            648 ;	-----------------------------------------
                            649 ;	 function DisplayGLCD
                            650 ;	-----------------------------------------
   0044                     651 _DisplayGLCD:
                            652 ;	src/glcd.c:23: RS=1;
   0044 D2 97         [12]  653 	setb	_P1_7
                            654 ;	src/glcd.c:24: writeGLCD( cCharData );
   0046 02r00r49      [24]  655 	ljmp	_writeGLCD
                            656 ;------------------------------------------------------------
                            657 ;Allocation info for local variables in function 'writeGLCD'
                            658 ;------------------------------------------------------------
                            659 ;cCharValue                Allocated to registers r7 
                            660 ;------------------------------------------------------------
                            661 ;	src/glcd.c:26: void writeGLCD( unsigned char cCharValue){
                            662 ;	-----------------------------------------
                            663 ;	 function writeGLCD
                            664 ;	-----------------------------------------
   0049                     665 _writeGLCD:
   0049 AF 82         [24]  666 	mov	r7,dpl
                            667 ;	src/glcd.c:27: RW=0;
   004B C2 96         [12]  668 	clr	_P1_6
                            669 ;	src/glcd.c:28: GLCDPORT= cCharValue;
   004D 8F A0         [24]  670 	mov	_P2,r7
                            671 ;	src/glcd.c:29: EN=1;
   004F D2 95         [12]  672 	setb	_P1_5
                            673 ;	src/glcd.c:30: EN=0;	
   0051 C2 95         [12]  674 	clr	_P1_5
   0053 22            [24]  675 	ret
                            676 ;------------------------------------------------------------
                            677 ;Allocation info for local variables in function 'chipSelectGLCD'
                            678 ;------------------------------------------------------------
                            679 ;cChipSelection            Allocated to registers r7 
                            680 ;------------------------------------------------------------
                            681 ;	src/glcd.c:32: void chipSelectGLCD( unsigned char cChipSelection){
                            682 ;	-----------------------------------------
                            683 ;	 function chipSelectGLCD
                            684 ;	-----------------------------------------
   0054                     685 _chipSelectGLCD:
                            686 ;	src/glcd.c:33: switch( cChipSelection ){
   0054 E5 82         [12]  687 	mov	a,dpl
   0056 FF            [12]  688 	mov	r7,a
   0057 24 FC         [12]  689 	add	a,#0xff - 0x03
   0059 40 26         [24]  690 	jc	00106$
   005B EF            [12]  691 	mov	a,r7
   005C 2F            [12]  692 	add	a,r7
   005D 2F            [12]  693 	add	a,r7
   005E 90r00r62      [24]  694 	mov	dptr,#00112$
   0061 73            [24]  695 	jmp	@a+dptr
   0062                     696 00112$:
   0062 02r00r6E      [24]  697 	ljmp	00101$
   0065 02r00r73      [24]  698 	ljmp	00102$
   0068 02r00r78      [24]  699 	ljmp	00103$
   006B 02r00r7D      [24]  700 	ljmp	00104$
                            701 ;	src/glcd.c:34: case 0:
   006E                     702 00101$:
                            703 ;	src/glcd.c:35: CS1=0; CS2=0;
   006E C2 94         [12]  704 	clr	_P1_4
   0070 C2 93         [12]  705 	clr	_P1_3
                            706 ;	src/glcd.c:36: break;
                            707 ;	src/glcd.c:37: case 1:
   0072 22            [24]  708 	ret
   0073                     709 00102$:
                            710 ;	src/glcd.c:38: CS1=1; CS2=0;
   0073 D2 94         [12]  711 	setb	_P1_4
   0075 C2 93         [12]  712 	clr	_P1_3
                            713 ;	src/glcd.c:39: break;
                            714 ;	src/glcd.c:40: case 2:
   0077 22            [24]  715 	ret
   0078                     716 00103$:
                            717 ;	src/glcd.c:41: CS1=0; CS2=1;
   0078 C2 94         [12]  718 	clr	_P1_4
   007A D2 93         [12]  719 	setb	_P1_3
                            720 ;	src/glcd.c:42: break;
                            721 ;	src/glcd.c:43: case 3:
   007C 22            [24]  722 	ret
   007D                     723 00104$:
                            724 ;	src/glcd.c:44: CS1=1; CS2=1;
   007D D2 94         [12]  725 	setb	_P1_4
   007F D2 93         [12]  726 	setb	_P1_3
                            727 ;	src/glcd.c:46: }
   0081                     728 00106$:
   0081 22            [24]  729 	ret
                            730 ;------------------------------------------------------------
                            731 ;Allocation info for local variables in function 'clearGLCD'
                            732 ;------------------------------------------------------------
                            733 ;i                         Allocated to registers r6 r7 
                            734 ;j                         Allocated to registers r4 r5 
                            735 ;------------------------------------------------------------
                            736 ;	src/glcd.c:51: void clearGLCD( void ){
                            737 ;	-----------------------------------------
                            738 ;	 function clearGLCD
                            739 ;	-----------------------------------------
   0082                     740 _clearGLCD:
                            741 ;	src/glcd.c:53: for( i=PAGE0; i<=PAGE7; i++){
   0082 7E B8         [12]  742 	mov	r6,#0xB8
   0084 7F 00         [12]  743 	mov	r7,#0x00
   0086                     744 00105$:
                            745 ;	src/glcd.c:54: commandGLCD(i, BOTHCHIP);
   0086 8E 82         [24]  746 	mov	dpl,r6
   0088 75*00 03      [24]  747 	mov	_commandGLCD_PARM_2,#0x03
   008B C0 07         [24]  748 	push	ar7
   008D C0 06         [24]  749 	push	ar6
   008F 12r00r31      [24]  750 	lcall	_commandGLCD
                            751 ;	src/glcd.c:55: commandGLCD( COLUMN_ADDRESS, BOTHCHIP );
   0092 75*00 03      [24]  752 	mov	_commandGLCD_PARM_2,#0x03
   0095 75 82 40      [24]  753 	mov	dpl,#0x40
   0098 12r00r31      [24]  754 	lcall	_commandGLCD
   009B D0 06         [24]  755 	pop	ar6
   009D D0 07         [24]  756 	pop	ar7
                            757 ;	src/glcd.c:56: for( j=0;j<64; j++){
   009F 7C 00         [12]  758 	mov	r4,#0x00
   00A1 7D 00         [12]  759 	mov	r5,#0x00
   00A3                     760 00103$:
                            761 ;	src/glcd.c:57: DisplayGLCD( 0x00 );
   00A3 75 82 00      [24]  762 	mov	dpl,#0x00
   00A6 C0 07         [24]  763 	push	ar7
   00A8 C0 06         [24]  764 	push	ar6
   00AA C0 05         [24]  765 	push	ar5
   00AC C0 04         [24]  766 	push	ar4
   00AE 12r00r44      [24]  767 	lcall	_DisplayGLCD
   00B1 D0 04         [24]  768 	pop	ar4
   00B3 D0 05         [24]  769 	pop	ar5
   00B5 D0 06         [24]  770 	pop	ar6
   00B7 D0 07         [24]  771 	pop	ar7
                            772 ;	src/glcd.c:56: for( j=0;j<64; j++){
   00B9 0C            [12]  773 	inc	r4
   00BA BC 00 01      [24]  774 	cjne	r4,#0x00,00120$
   00BD 0D            [12]  775 	inc	r5
   00BE                     776 00120$:
   00BE C3            [12]  777 	clr	c
   00BF EC            [12]  778 	mov	a,r4
   00C0 94 40         [12]  779 	subb	a,#0x40
   00C2 ED            [12]  780 	mov	a,r5
   00C3 64 80         [12]  781 	xrl	a,#0x80
   00C5 94 80         [12]  782 	subb	a,#0x80
   00C7 40 DA         [24]  783 	jc	00103$
                            784 ;	src/glcd.c:53: for( i=PAGE0; i<=PAGE7; i++){
   00C9 0E            [12]  785 	inc	r6
   00CA BE 00 01      [24]  786 	cjne	r6,#0x00,00122$
   00CD 0F            [12]  787 	inc	r7
   00CE                     788 00122$:
   00CE C3            [12]  789 	clr	c
   00CF 74 BF         [12]  790 	mov	a,#0xBF
   00D1 9E            [12]  791 	subb	a,r6
   00D2 E4            [12]  792 	clr	a
   00D3 64 80         [12]  793 	xrl	a,#0x80
   00D5 8F F0         [24]  794 	mov	b,r7
   00D7 63 F0 80      [24]  795 	xrl	b,#0x80
   00DA 95 F0         [12]  796 	subb	a,b
   00DC 50 A8         [24]  797 	jnc	00105$
   00DE 22            [24]  798 	ret
                            799 ;------------------------------------------------------------
                            800 ;Allocation info for local variables in function 'writeLine'
                            801 ;------------------------------------------------------------
                            802 ;cStr                      Allocated to registers 
                            803 ;------------------------------------------------------------
                            804 ;	src/glcd.c:62: void writeLine( unsigned char *cStr){
                            805 ;	-----------------------------------------
                            806 ;	 function writeLine
                            807 ;	-----------------------------------------
   00DF                     808 _writeLine:
   00DF AD 82         [24]  809 	mov	r5,dpl
   00E1 AE 83         [24]  810 	mov	r6,dph
   00E3 AF F0         [24]  811 	mov	r7,b
                            812 ;	src/glcd.c:63: while( *cStr )
   00E5                     813 00101$:
   00E5 8D 82         [24]  814 	mov	dpl,r5
   00E7 8E 83         [24]  815 	mov	dph,r6
   00E9 8F F0         [24]  816 	mov	b,r7
   00EB 12r00r00      [24]  817 	lcall	__gptrget
   00EE FC            [12]  818 	mov	r4,a
   00EF 60 18         [24]  819 	jz	00103$
                            820 ;	src/glcd.c:65: writeLetter( *cStr++ );		
   00F1 8C 82         [24]  821 	mov	dpl,r4
   00F3 0D            [12]  822 	inc	r5
   00F4 BD 00 01      [24]  823 	cjne	r5,#0x00,00114$
   00F7 0E            [12]  824 	inc	r6
   00F8                     825 00114$:
   00F8 C0 07         [24]  826 	push	ar7
   00FA C0 06         [24]  827 	push	ar6
   00FC C0 05         [24]  828 	push	ar5
   00FE 12r01r3C      [24]  829 	lcall	_writeLetter
   0101 D0 05         [24]  830 	pop	ar5
   0103 D0 06         [24]  831 	pop	ar6
   0105 D0 07         [24]  832 	pop	ar7
   0107 80 DC         [24]  833 	sjmp	00101$
   0109                     834 00103$:
                            835 ;	src/glcd.c:67: return;
   0109 22            [24]  836 	ret
                            837 ;------------------------------------------------------------
                            838 ;Allocation info for local variables in function 'printDigit'
                            839 ;------------------------------------------------------------
                            840 ;nInteger                  Allocated to registers r7 
                            841 ;ci                        Allocated to registers r5 
                            842 ;------------------------------------------------------------
                            843 ;	src/glcd.c:70: void printDigit( unsigned char nInteger){
                            844 ;	-----------------------------------------
                            845 ;	 function printDigit
                            846 ;	-----------------------------------------
   010A                     847 _printDigit:
                            848 ;	src/glcd.c:72: for( ci=0; ci<4 ; ci++){
   010A E5 82         [12]  849 	mov	a,dpl
   010C 75 F0 04      [24]  850 	mov	b,#0x04
   010F A4            [48]  851 	mul	ab
   0110 24r00         [12]  852 	add	a,#_glcdNumberSystemFont
   0112 FE            [12]  853 	mov	r6,a
   0113 74s00         [12]  854 	mov	a,#(_glcdNumberSystemFont >> 8)
   0115 35 F0         [12]  855 	addc	a,b
   0117 FF            [12]  856 	mov	r7,a
   0118 7D 00         [12]  857 	mov	r5,#0x00
   011A                     858 00102$:
                            859 ;	src/glcd.c:73: DisplayGLCD( glcdNumberSystemFont[nInteger][ci] );
   011A ED            [12]  860 	mov	a,r5
   011B 2E            [12]  861 	add	a,r6
   011C F5 82         [12]  862 	mov	dpl,a
   011E E4            [12]  863 	clr	a
   011F 3F            [12]  864 	addc	a,r7
   0120 F5 83         [12]  865 	mov	dph,a
   0122 E4            [12]  866 	clr	a
   0123 93            [24]  867 	movc	a,@a+dptr
   0124 F5 82         [12]  868 	mov	dpl,a
   0126 C0 07         [24]  869 	push	ar7
   0128 C0 06         [24]  870 	push	ar6
   012A C0 05         [24]  871 	push	ar5
   012C 12r00r44      [24]  872 	lcall	_DisplayGLCD
   012F D0 05         [24]  873 	pop	ar5
   0131 D0 06         [24]  874 	pop	ar6
   0133 D0 07         [24]  875 	pop	ar7
                            876 ;	src/glcd.c:72: for( ci=0; ci<4 ; ci++){
   0135 0D            [12]  877 	inc	r5
   0136 BD 04 00      [24]  878 	cjne	r5,#0x04,00110$
   0139                     879 00110$:
   0139 40 DF         [24]  880 	jc	00102$
   013B 22            [24]  881 	ret
                            882 ;------------------------------------------------------------
                            883 ;Allocation info for local variables in function 'writeLetter'
                            884 ;------------------------------------------------------------
                            885 ;cLetter                   Allocated to registers r7 
                            886 ;i                         Allocated to registers r6 
                            887 ;------------------------------------------------------------
                            888 ;	src/glcd.c:77: void writeLetter( char cLetter){
                            889 ;	-----------------------------------------
                            890 ;	 function writeLetter
                            891 ;	-----------------------------------------
   013C                     892 _writeLetter:
   013C AF 82         [24]  893 	mov	r7,dpl
                            894 ;	src/glcd.c:80: if( cLetter >='A' && cLetter <='Z'){	//for capital case letters
   013E C3            [12]  895 	clr	c
   013F EF            [12]  896 	mov	a,r7
   0140 64 80         [12]  897 	xrl	a,#0x80
   0142 94 C1         [12]  898 	subb	a,#0xc1
   0144 40 56         [24]  899 	jc	00113$
   0146 74 DA         [12]  900 	mov	a,#(0x5A ^ 0x80)
   0148 8F F0         [24]  901 	mov	b,r7
   014A 63 F0 80      [24]  902 	xrl	b,#0x80
   014D 95 F0         [12]  903 	subb	a,b
   014F 40 4B         [24]  904 	jc	00113$
                            905 ;	src/glcd.c:81: for(i=0;i<7;i++)
   0151 7E 00         [12]  906 	mov	r6,#0x00
   0153                     907 00116$:
                            908 ;	src/glcd.c:82: DisplayGLCD( glcdCharSystemFont[(int)cLetter - 'A'][i]);
   0153 EF            [12]  909 	mov	a,r7
   0154 FC            [12]  910 	mov	r4,a
   0155 33            [12]  911 	rlc	a
   0156 95 E0         [12]  912 	subb	a,acc
   0158 FD            [12]  913 	mov	r5,a
   0159 EC            [12]  914 	mov	a,r4
   015A 24 BF         [12]  915 	add	a,#0xBF
   015C C2 D5         [12]  916 	clr	F0
   015E 75 F0 07      [24]  917 	mov	b,#0x07
   0161 30 E7 04      [24]  918 	jnb	acc.7,00168$
   0164 B2 D5         [12]  919 	cpl	F0
   0166 F4            [12]  920 	cpl	a
   0167 04            [12]  921 	inc	a
   0168                     922 00168$:
   0168 A4            [48]  923 	mul	ab
   0169 30 D5 0A      [24]  924 	jnb	F0,00169$
   016C F4            [12]  925 	cpl	a
   016D 24 01         [12]  926 	add	a,#0x01
   016F C5 F0         [12]  927 	xch	a,b
   0171 F4            [12]  928 	cpl	a
   0172 34 00         [12]  929 	addc	a,#0x00
   0174 C5 F0         [12]  930 	xch	a,b
   0176                     931 00169$:
   0176 24r28         [12]  932 	add	a,#_glcdCharSystemFont
   0178 FC            [12]  933 	mov	r4,a
   0179 74s00         [12]  934 	mov	a,#(_glcdCharSystemFont >> 8)
   017B 35 F0         [12]  935 	addc	a,b
   017D FD            [12]  936 	mov	r5,a
   017E EE            [12]  937 	mov	a,r6
   017F 2C            [12]  938 	add	a,r4
   0180 F5 82         [12]  939 	mov	dpl,a
   0182 E4            [12]  940 	clr	a
   0183 3D            [12]  941 	addc	a,r5
   0184 F5 83         [12]  942 	mov	dph,a
   0186 E4            [12]  943 	clr	a
   0187 93            [24]  944 	movc	a,@a+dptr
   0188 F5 82         [12]  945 	mov	dpl,a
   018A C0 07         [24]  946 	push	ar7
   018C C0 06         [24]  947 	push	ar6
   018E 12r00r44      [24]  948 	lcall	_DisplayGLCD
   0191 D0 06         [24]  949 	pop	ar6
   0193 D0 07         [24]  950 	pop	ar7
                            951 ;	src/glcd.c:81: for(i=0;i<7;i++)
   0195 0E            [12]  952 	inc	r6
   0196 BE 07 00      [24]  953 	cjne	r6,#0x07,00170$
   0199                     954 00170$:
   0199 40 B8         [24]  955 	jc	00116$
   019B 22            [24]  956 	ret
   019C                     957 00113$:
                            958 ;	src/glcd.c:84: else if( cLetter>=97 && cLetter<=122)
   019C C3            [12]  959 	clr	c
   019D EF            [12]  960 	mov	a,r7
   019E 64 80         [12]  961 	xrl	a,#0x80
   01A0 94 E1         [12]  962 	subb	a,#0xe1
   01A2 40 56         [24]  963 	jc	00109$
   01A4 74 FA         [12]  964 	mov	a,#(0x7A ^ 0x80)
   01A6 8F F0         [24]  965 	mov	b,r7
   01A8 63 F0 80      [24]  966 	xrl	b,#0x80
   01AB 95 F0         [12]  967 	subb	a,b
   01AD 40 4B         [24]  968 	jc	00109$
                            969 ;	src/glcd.c:86: for(i=0;i<7;i++)
   01AF 7E 00         [12]  970 	mov	r6,#0x00
   01B1                     971 00118$:
                            972 ;	src/glcd.c:87: DisplayGLCD( glcdSmallCharSystemFont[(int)cLetter - 'a'][i]);
   01B1 EF            [12]  973 	mov	a,r7
   01B2 FC            [12]  974 	mov	r4,a
   01B3 33            [12]  975 	rlc	a
   01B4 95 E0         [12]  976 	subb	a,acc
   01B6 FD            [12]  977 	mov	r5,a
   01B7 EC            [12]  978 	mov	a,r4
   01B8 24 9F         [12]  979 	add	a,#0x9F
   01BA C2 D5         [12]  980 	clr	F0
   01BC 75 F0 07      [24]  981 	mov	b,#0x07
   01BF 30 E7 04      [24]  982 	jnb	acc.7,00174$
   01C2 B2 D5         [12]  983 	cpl	F0
   01C4 F4            [12]  984 	cpl	a
   01C5 04            [12]  985 	inc	a
   01C6                     986 00174$:
   01C6 A4            [48]  987 	mul	ab
   01C7 30 D5 0A      [24]  988 	jnb	F0,00175$
   01CA F4            [12]  989 	cpl	a
   01CB 24 01         [12]  990 	add	a,#0x01
   01CD C5 F0         [12]  991 	xch	a,b
   01CF F4            [12]  992 	cpl	a
   01D0 34 00         [12]  993 	addc	a,#0x00
   01D2 C5 F0         [12]  994 	xch	a,b
   01D4                     995 00175$:
   01D4 24rDE         [12]  996 	add	a,#_glcdSmallCharSystemFont
   01D6 FC            [12]  997 	mov	r4,a
   01D7 74s00         [12]  998 	mov	a,#(_glcdSmallCharSystemFont >> 8)
   01D9 35 F0         [12]  999 	addc	a,b
   01DB FD            [12] 1000 	mov	r5,a
   01DC EE            [12] 1001 	mov	a,r6
   01DD 2C            [12] 1002 	add	a,r4
   01DE F5 82         [12] 1003 	mov	dpl,a
   01E0 E4            [12] 1004 	clr	a
   01E1 3D            [12] 1005 	addc	a,r5
   01E2 F5 83         [12] 1006 	mov	dph,a
   01E4 E4            [12] 1007 	clr	a
   01E5 93            [24] 1008 	movc	a,@a+dptr
   01E6 F5 82         [12] 1009 	mov	dpl,a
   01E8 C0 07         [24] 1010 	push	ar7
   01EA C0 06         [24] 1011 	push	ar6
   01EC 12r00r44      [24] 1012 	lcall	_DisplayGLCD
   01EF D0 06         [24] 1013 	pop	ar6
   01F1 D0 07         [24] 1014 	pop	ar7
                           1015 ;	src/glcd.c:86: for(i=0;i<7;i++)
   01F3 0E            [12] 1016 	inc	r6
   01F4 BE 07 00      [24] 1017 	cjne	r6,#0x07,00176$
   01F7                    1018 00176$:
   01F7 40 B8         [24] 1019 	jc	00118$
   01F9 22            [24] 1020 	ret
   01FA                    1021 00109$:
                           1022 ;	src/glcd.c:89: else if( cLetter == ' ' ){
   01FA BF 20 13      [24] 1023 	cjne	r7,#0x20,00137$
                           1024 ;	src/glcd.c:90: for(i=0;i<7;i++)
   01FD 7F 00         [12] 1025 	mov	r7,#0x00
   01FF                    1026 00120$:
                           1027 ;	src/glcd.c:91: DisplayGLCD( 0x00 );
   01FF 75 82 00      [24] 1028 	mov	dpl,#0x00
   0202 C0 07         [24] 1029 	push	ar7
   0204 12r00r44      [24] 1030 	lcall	_DisplayGLCD
   0207 D0 07         [24] 1031 	pop	ar7
                           1032 ;	src/glcd.c:90: for(i=0;i<7;i++)
   0209 0F            [12] 1033 	inc	r7
   020A BF 07 00      [24] 1034 	cjne	r7,#0x07,00180$
   020D                    1035 00180$:
   020D 40 F0         [24] 1036 	jc	00120$
                           1037 ;	src/glcd.c:94: for( i = 0; i < 7; i ++ ){
   020F 22            [24] 1038 	ret
   0210                    1039 00137$:
   0210 7F 00         [12] 1040 	mov	r7,#0x00
   0212                    1041 00122$:
                           1042 ;	src/glcd.c:95: DisplayGLCD( glcdSmallCharSystemFont[26][i] );	// printing ':' in '--" format. need to check that.
   0212 EF            [12] 1043 	mov	a,r7
   0213 90r01r94      [24] 1044 	mov	dptr,#(_glcdSmallCharSystemFont + 0x00b6)
   0216 93            [24] 1045 	movc	a,@a+dptr
   0217 F5 82         [12] 1046 	mov	dpl,a
   0219 C0 07         [24] 1047 	push	ar7
   021B 12r00r44      [24] 1048 	lcall	_DisplayGLCD
   021E D0 07         [24] 1049 	pop	ar7
                           1050 ;	src/glcd.c:94: for( i = 0; i < 7; i ++ ){
   0220 0F            [12] 1051 	inc	r7
   0221 BF 07 00      [24] 1052 	cjne	r7,#0x07,00182$
   0224                    1053 00182$:
   0224 40 EC         [24] 1054 	jc	00122$
   0226 22            [24] 1055 	ret
                           1056 ;------------------------------------------------------------
                           1057 ;Allocation info for local variables in function 'printNumber'
                           1058 ;------------------------------------------------------------
                           1059 ;lNumber                   Allocated with name '_printNumber_lNumber_1_40'
                           1060 ;cChar                     Allocated with name '_printNumber_cChar_1_41'
                           1061 ;cInteger                  Allocated with name '_printNumber_cInteger_1_41'
                           1062 ;------------------------------------------------------------
                           1063 ;	src/glcd.c:100: void printNumber( long lNumber){
                           1064 ;	-----------------------------------------
                           1065 ;	 function printNumber
                           1066 ;	-----------------------------------------
   0227                    1067 _printNumber:
   0227 85 82*01      [24] 1068 	mov	_printNumber_lNumber_1_40,dpl
   022A 85 83*02      [24] 1069 	mov	(_printNumber_lNumber_1_40 + 1),dph
   022D 85 F0*03      [24] 1070 	mov	(_printNumber_lNumber_1_40 + 2),b
   0230 F5*04         [12] 1071 	mov	(_printNumber_lNumber_1_40 + 3),a
                           1072 ;	src/glcd.c:102: char cInteger[10] = { 0 };
   0232 75*06 00      [24] 1073 	mov	_printNumber_cInteger_1_41,#0x00
   0235 75*07 00      [24] 1074 	mov	(_printNumber_cInteger_1_41 + 0x0001),#0x00
   0238 75*08 00      [24] 1075 	mov	(_printNumber_cInteger_1_41 + 0x0002),#0x00
   023B 75*09 00      [24] 1076 	mov	(_printNumber_cInteger_1_41 + 0x0003),#0x00
   023E 75*0A 00      [24] 1077 	mov	(_printNumber_cInteger_1_41 + 0x0004),#0x00
   0241 75*0B 00      [24] 1078 	mov	(_printNumber_cInteger_1_41 + 0x0005),#0x00
   0244 75*0C 00      [24] 1079 	mov	(_printNumber_cInteger_1_41 + 0x0006),#0x00
                           1080 ;	src/glcd.c:104: if( lNumber == 0)
   0247 E4            [12] 1081 	clr	a
   0248 F5*0D         [12] 1082 	mov	(_printNumber_cInteger_1_41 + 0x0007),a
   024A F5*0E         [12] 1083 	mov	(_printNumber_cInteger_1_41 + 0x0008),a
   024C F5*0F         [12] 1084 	mov	(_printNumber_cInteger_1_41 + 0x0009),a
   024E E5*01         [12] 1085 	mov	a,_printNumber_lNumber_1_40
   0250 45*02         [12] 1086 	orl	a,(_printNumber_lNumber_1_40 + 1)
   0252 45*03         [12] 1087 	orl	a,(_printNumber_lNumber_1_40 + 2)
   0254 45*04         [12] 1088 	orl	a,(_printNumber_lNumber_1_40 + 3)
                           1089 ;	src/glcd.c:106: printDigit( 0 );
   0256 70 05         [24] 1090 	jnz	00115$
   0258 F5 82         [12] 1091 	mov	dpl,a
                           1092 ;	src/glcd.c:107: return;
   025A 02r01r0A      [24] 1093 	ljmp	_printDigit
                           1094 ;	src/glcd.c:111: while( lNumber > 0){
   025D                    1095 00115$:
   025D 75*05 00      [24] 1096 	mov	_printNumber_cChar_1_41,#0x00
   0260                    1097 00101$:
   0260 C3            [12] 1098 	clr	c
   0261 E4            [12] 1099 	clr	a
   0262 95*01         [12] 1100 	subb	a,_printNumber_lNumber_1_40
   0264 E4            [12] 1101 	clr	a
   0265 95*02         [12] 1102 	subb	a,(_printNumber_lNumber_1_40 + 1)
   0267 E4            [12] 1103 	clr	a
   0268 95*03         [12] 1104 	subb	a,(_printNumber_lNumber_1_40 + 2)
   026A E4            [12] 1105 	clr	a
   026B 64 80         [12] 1106 	xrl	a,#0x80
   026D 85*04 F0      [24] 1107 	mov	b,(_printNumber_lNumber_1_40 + 3)
   0270 63 F0 80      [24] 1108 	xrl	b,#0x80
   0273 95 F0         [12] 1109 	subb	a,b
   0275 50 4D         [24] 1110 	jnc	00103$
                           1111 ;	src/glcd.c:112: cInteger[cChar++]=( lNumber%10) ;
   0277 AA*05         [24] 1112 	mov	r2,_printNumber_cChar_1_41
   0279 05*05         [12] 1113 	inc	_printNumber_cChar_1_41
   027B EA            [12] 1114 	mov	a,r2
   027C 24r06         [12] 1115 	add	a,#_printNumber_cInteger_1_41
   027E F9            [12] 1116 	mov	r1,a
   027F 75*00 0A      [24] 1117 	mov	__modslong_PARM_2,#0x0A
   0282 E4            [12] 1118 	clr	a
   0283 F5*01         [12] 1119 	mov	(__modslong_PARM_2 + 1),a
   0285 F5*02         [12] 1120 	mov	(__modslong_PARM_2 + 2),a
   0287 F5*03         [12] 1121 	mov	(__modslong_PARM_2 + 3),a
   0289 85*01 82      [24] 1122 	mov	dpl,_printNumber_lNumber_1_40
   028C 85*02 83      [24] 1123 	mov	dph,(_printNumber_lNumber_1_40 + 1)
   028F 85*03 F0      [24] 1124 	mov	b,(_printNumber_lNumber_1_40 + 2)
   0292 E5*04         [12] 1125 	mov	a,(_printNumber_lNumber_1_40 + 3)
   0294 C0 01         [24] 1126 	push	ar1
   0296 12r00r00      [24] 1127 	lcall	__modslong
   0299 AA 82         [24] 1128 	mov	r2,dpl
   029B D0 01         [24] 1129 	pop	ar1
   029D A7 02         [24] 1130 	mov	@r1,ar2
                           1131 ;	src/glcd.c:113: lNumber /= 10;
   029F 75*00 0A      [24] 1132 	mov	__divslong_PARM_2,#0x0A
   02A2 E4            [12] 1133 	clr	a
   02A3 F5*01         [12] 1134 	mov	(__divslong_PARM_2 + 1),a
   02A5 F5*02         [12] 1135 	mov	(__divslong_PARM_2 + 2),a
   02A7 F5*03         [12] 1136 	mov	(__divslong_PARM_2 + 3),a
   02A9 85*01 82      [24] 1137 	mov	dpl,_printNumber_lNumber_1_40
   02AC 85*02 83      [24] 1138 	mov	dph,(_printNumber_lNumber_1_40 + 1)
   02AF 85*03 F0      [24] 1139 	mov	b,(_printNumber_lNumber_1_40 + 2)
   02B2 E5*04         [12] 1140 	mov	a,(_printNumber_lNumber_1_40 + 3)
   02B4 12r00r00      [24] 1141 	lcall	__divslong
   02B7 85 82*01      [24] 1142 	mov	_printNumber_lNumber_1_40,dpl
   02BA 85 83*02      [24] 1143 	mov	(_printNumber_lNumber_1_40 + 1),dph
   02BD 85 F0*03      [24] 1144 	mov	(_printNumber_lNumber_1_40 + 2),b
   02C0 F5*04         [12] 1145 	mov	(_printNumber_lNumber_1_40 + 3),a
   02C2 80 9C         [24] 1146 	sjmp	00101$
   02C4                    1147 00103$:
                           1148 ;	src/glcd.c:115: for( --cChar; cChar>= 0 ; cChar--){
   02C4 E5*05         [12] 1149 	mov	a,_printNumber_cChar_1_41
   02C6 14            [12] 1150 	dec	a
   02C7 FF            [12] 1151 	mov	r7,a
   02C8                    1152 00109$:
   02C8 EF            [12] 1153 	mov	a,r7
   02C9 20 E7 20      [24] 1154 	jb	acc.7,00111$
                           1155 ;	src/glcd.c:116: DisplayGLCD( 0x00 );
   02CC 75 82 00      [24] 1156 	mov	dpl,#0x00
   02CF C0 07         [24] 1157 	push	ar7
   02D1 12r00r44      [24] 1158 	lcall	_DisplayGLCD
   02D4 D0 07         [24] 1159 	pop	ar7
                           1160 ;	src/glcd.c:117: printDigit( cInteger[cChar] );			
   02D6 EF            [12] 1161 	mov	a,r7
   02D7 24r06         [12] 1162 	add	a,#_printNumber_cInteger_1_41
   02D9 F9            [12] 1163 	mov	r1,a
   02DA 87 82         [24] 1164 	mov	dpl,@r1
   02DC C0 07         [24] 1165 	push	ar7
   02DE 12r01r0A      [24] 1166 	lcall	_printDigit
                           1167 ;	src/glcd.c:118: DisplayGLCD( 0x00 );
   02E1 75 82 00      [24] 1168 	mov	dpl,#0x00
   02E4 12r00r44      [24] 1169 	lcall	_DisplayGLCD
   02E7 D0 07         [24] 1170 	pop	ar7
                           1171 ;	src/glcd.c:115: for( --cChar; cChar>= 0 ; cChar--){
   02E9 1F            [12] 1172 	dec	r7
   02EA 80 DC         [24] 1173 	sjmp	00109$
   02EC                    1174 00111$:
   02EC 22            [24] 1175 	ret
                           1176 ;------------------------------------------------------------
                           1177 ;Allocation info for local variables in function 'setGLCDCursor'
                           1178 ;------------------------------------------------------------
                           1179 ;y                         Allocated with name '_setGLCDCursor_PARM_2'
                           1180 ;x                         Allocated to registers r6 r7 
                           1181 ;------------------------------------------------------------
                           1182 ;	src/glcd.c:124: void setGLCDCursor( int x, int y)
                           1183 ;	-----------------------------------------
                           1184 ;	 function setGLCDCursor
                           1185 ;	-----------------------------------------
   02ED                    1186 _setGLCDCursor:
   02ED AE 82         [24] 1187 	mov	r6,dpl
                           1188 ;	src/glcd.c:126: if( x>=0 && x<8 ){
   02EF E5 83         [12] 1189 	mov	a,dph
   02F1 FF            [12] 1190 	mov	r7,a
   02F2 20 E7 33      [24] 1191 	jb	acc.7,00105$
   02F5 C3            [12] 1192 	clr	c
   02F6 EE            [12] 1193 	mov	a,r6
   02F7 94 08         [12] 1194 	subb	a,#0x08
   02F9 EF            [12] 1195 	mov	a,r7
   02FA 64 80         [12] 1196 	xrl	a,#0x80
   02FC 94 80         [12] 1197 	subb	a,#0x80
   02FE 50 28         [24] 1198 	jnc	00105$
                           1199 ;	src/glcd.c:127: chipSelectGLCD( 1 );
   0300 75 82 01      [24] 1200 	mov	dpl,#0x01
   0303 C0 07         [24] 1201 	push	ar7
   0305 C0 06         [24] 1202 	push	ar6
   0307 12r00r54      [24] 1203 	lcall	_chipSelectGLCD
                           1204 ;	src/glcd.c:128: commandGLCD( PAGE0+ y, 1 ); //page n base address...
   030A AD*10         [24] 1205 	mov	r5,_setGLCDCursor_PARM_2
   030C 74 B8         [12] 1206 	mov	a,#0xB8
   030E 2D            [12] 1207 	add	a,r5
   030F F5 82         [12] 1208 	mov	dpl,a
   0311 75*00 01      [24] 1209 	mov	_commandGLCD_PARM_2,#0x01
   0314 12r00r31      [24] 1210 	lcall	_commandGLCD
   0317 D0 06         [24] 1211 	pop	ar6
   0319 D0 07         [24] 1212 	pop	ar7
                           1213 ;	src/glcd.c:129: commandGLCD( COLUMN_ADDRESS + x, 1 );	//column base address.
   031B 8E 05         [24] 1214 	mov	ar5,r6
   031D 74 40         [12] 1215 	mov	a,#0x40
   031F 2D            [12] 1216 	add	a,r5
   0320 F5 82         [12] 1217 	mov	dpl,a
   0322 75*00 01      [24] 1218 	mov	_commandGLCD_PARM_2,#0x01
   0325 02r00r31      [24] 1219 	ljmp	_commandGLCD
   0328                    1220 00105$:
                           1221 ;	src/glcd.c:131: else if ( x>7 && x <16 ){
   0328 C3            [12] 1222 	clr	c
   0329 74 07         [12] 1223 	mov	a,#0x07
   032B 9E            [12] 1224 	subb	a,r6
   032C E4            [12] 1225 	clr	a
   032D 64 80         [12] 1226 	xrl	a,#0x80
   032F 8F F0         [24] 1227 	mov	b,r7
   0331 63 F0 80      [24] 1228 	xrl	b,#0x80
   0334 95 F0         [12] 1229 	subb	a,b
   0336 50 31         [24] 1230 	jnc	00108$
   0338 C3            [12] 1231 	clr	c
   0339 EE            [12] 1232 	mov	a,r6
   033A 94 10         [12] 1233 	subb	a,#0x10
   033C EF            [12] 1234 	mov	a,r7
   033D 64 80         [12] 1235 	xrl	a,#0x80
   033F 94 80         [12] 1236 	subb	a,#0x80
   0341 50 26         [24] 1237 	jnc	00108$
                           1238 ;	src/glcd.c:132: chipSelectGLCD( 2 );
   0343 75 82 02      [24] 1239 	mov	dpl,#0x02
   0346 C0 07         [24] 1240 	push	ar7
   0348 C0 06         [24] 1241 	push	ar6
   034A 12r00r54      [24] 1242 	lcall	_chipSelectGLCD
                           1243 ;	src/glcd.c:133: commandGLCD( PAGE0+ y, 2 ); //page n base address...
   034D AD*10         [24] 1244 	mov	r5,_setGLCDCursor_PARM_2
   034F 74 B8         [12] 1245 	mov	a,#0xB8
   0351 2D            [12] 1246 	add	a,r5
   0352 F5 82         [12] 1247 	mov	dpl,a
   0354 75*00 02      [24] 1248 	mov	_commandGLCD_PARM_2,#0x02
   0357 12r00r31      [24] 1249 	lcall	_commandGLCD
   035A D0 06         [24] 1250 	pop	ar6
   035C D0 07         [24] 1251 	pop	ar7
                           1252 ;	src/glcd.c:134: commandGLCD( COLUMN_ADDRESS + x, 2 );	//column base address.
   035E 74 40         [12] 1253 	mov	a,#0x40
   0360 2E            [12] 1254 	add	a,r6
   0361 F5 82         [12] 1255 	mov	dpl,a
   0363 75*00 02      [24] 1256 	mov	_commandGLCD_PARM_2,#0x02
   0366 02r00r31      [24] 1257 	ljmp	_commandGLCD
   0369                    1258 00108$:
   0369 22            [24] 1259 	ret
                           1260 ;------------------------------------------------------------
                           1261 ;Allocation info for local variables in function 'splashImage'
                           1262 ;------------------------------------------------------------
                           1263 ;i                         Allocated to registers r4 
                           1264 ;pg                        Allocated to registers r7 
                           1265 ;------------------------------------------------------------
                           1266 ;	src/glcd.c:138: void splashImage( ){
                           1267 ;	-----------------------------------------
                           1268 ;	 function splashImage
                           1269 ;	-----------------------------------------
   036A                    1270 _splashImage:
                           1271 ;	src/glcd.c:141: for(pg=0;pg<8;pg++)
   036A 7F 00         [12] 1272 	mov	r7,#0x00
   036C                    1273 00108$:
                           1274 ;	src/glcd.c:143: setGLCDCursor( 0, pg );
   036C 8F*10         [24] 1275 	mov	_setGLCDCursor_PARM_2,r7
   036E 75*11 00      [24] 1276 	mov	(_setGLCDCursor_PARM_2 + 1),#0x00
   0371 90 00 00      [24] 1277 	mov	dptr,#0x0000
   0374 C0 07         [24] 1278 	push	ar7
   0376 12r02rED      [24] 1279 	lcall	_setGLCDCursor
   0379 D0 07         [24] 1280 	pop	ar7
                           1281 ;	src/glcd.c:144: for(i=0;i<=63;i++)
   037B EF            [12] 1282 	mov	a,r7
   037C 75 F0 80      [24] 1283 	mov	b,#0x80
   037F A4            [48] 1284 	mul	ab
   0380 24r9B         [12] 1285 	add	a,#_welcomeScreenImage
   0382 FD            [12] 1286 	mov	r5,a
   0383 74s01         [12] 1287 	mov	a,#(_welcomeScreenImage >> 8)
   0385 35 F0         [12] 1288 	addc	a,b
   0387 FE            [12] 1289 	mov	r6,a
   0388 7C 00         [12] 1290 	mov	r4,#0x00
   038A                    1291 00104$:
                           1292 ;	src/glcd.c:146: DisplayGLCD(welcomeScreenImage[pg][i]);	
   038A EC            [12] 1293 	mov	a,r4
   038B 2D            [12] 1294 	add	a,r5
   038C F5 82         [12] 1295 	mov	dpl,a
   038E E4            [12] 1296 	clr	a
   038F 3E            [12] 1297 	addc	a,r6
   0390 F5 83         [12] 1298 	mov	dph,a
   0392 E4            [12] 1299 	clr	a
   0393 93            [24] 1300 	movc	a,@a+dptr
   0394 F5 82         [12] 1301 	mov	dpl,a
   0396 C0 07         [24] 1302 	push	ar7
   0398 C0 06         [24] 1303 	push	ar6
   039A C0 05         [24] 1304 	push	ar5
   039C C0 04         [24] 1305 	push	ar4
   039E 12r00r44      [24] 1306 	lcall	_DisplayGLCD
   03A1 D0 04         [24] 1307 	pop	ar4
   03A3 D0 05         [24] 1308 	pop	ar5
   03A5 D0 06         [24] 1309 	pop	ar6
   03A7 D0 07         [24] 1310 	pop	ar7
                           1311 ;	src/glcd.c:144: for(i=0;i<=63;i++)
   03A9 0C            [12] 1312 	inc	r4
   03AA EC            [12] 1313 	mov	a,r4
   03AB 24 C0         [12] 1314 	add	a,#0xff - 0x3F
   03AD 50 DB         [24] 1315 	jnc	00104$
                           1316 ;	src/glcd.c:148: setGLCDCursor( 8, pg );
   03AF 8F*10         [24] 1317 	mov	_setGLCDCursor_PARM_2,r7
   03B1 75*11 00      [24] 1318 	mov	(_setGLCDCursor_PARM_2 + 1),#0x00
   03B4 90 00 08      [24] 1319 	mov	dptr,#0x0008
   03B7 C0 07         [24] 1320 	push	ar7
   03B9 12r02rED      [24] 1321 	lcall	_setGLCDCursor
   03BC D0 07         [24] 1322 	pop	ar7
                           1323 ;	src/glcd.c:149: for(i=64;i<128;i++)
   03BE EF            [12] 1324 	mov	a,r7
   03BF 75 F0 80      [24] 1325 	mov	b,#0x80
   03C2 A4            [48] 1326 	mul	ab
   03C3 24r9B         [12] 1327 	add	a,#_welcomeScreenImage
   03C5 FD            [12] 1328 	mov	r5,a
   03C6 74s01         [12] 1329 	mov	a,#(_welcomeScreenImage >> 8)
   03C8 35 F0         [12] 1330 	addc	a,b
   03CA FE            [12] 1331 	mov	r6,a
   03CB 7C 40         [12] 1332 	mov	r4,#0x40
   03CD                    1333 00106$:
                           1334 ;	src/glcd.c:151: DisplayGLCD(welcomeScreenImage[pg][i]);	
   03CD EC            [12] 1335 	mov	a,r4
   03CE 2D            [12] 1336 	add	a,r5
   03CF F5 82         [12] 1337 	mov	dpl,a
   03D1 E4            [12] 1338 	clr	a
   03D2 3E            [12] 1339 	addc	a,r6
   03D3 F5 83         [12] 1340 	mov	dph,a
   03D5 E4            [12] 1341 	clr	a
   03D6 93            [24] 1342 	movc	a,@a+dptr
   03D7 F5 82         [12] 1343 	mov	dpl,a
   03D9 C0 07         [24] 1344 	push	ar7
   03DB C0 06         [24] 1345 	push	ar6
   03DD C0 05         [24] 1346 	push	ar5
   03DF C0 04         [24] 1347 	push	ar4
   03E1 12r00r44      [24] 1348 	lcall	_DisplayGLCD
   03E4 D0 04         [24] 1349 	pop	ar4
   03E6 D0 05         [24] 1350 	pop	ar5
   03E8 D0 06         [24] 1351 	pop	ar6
   03EA D0 07         [24] 1352 	pop	ar7
                           1353 ;	src/glcd.c:149: for(i=64;i<128;i++)
   03EC 0C            [12] 1354 	inc	r4
   03ED BC 80 00      [24] 1355 	cjne	r4,#0x80,00131$
   03F0                    1356 00131$:
   03F0 40 DB         [24] 1357 	jc	00106$
                           1358 ;	src/glcd.c:141: for(pg=0;pg<8;pg++)
   03F2 0F            [12] 1359 	inc	r7
   03F3 BF 08 00      [24] 1360 	cjne	r7,#0x08,00133$
   03F6                    1361 00133$:
   03F6 50 03         [24] 1362 	jnc	00134$
   03F8 02r03r6C      [24] 1363 	ljmp	00108$
   03FB                    1364 00134$:
   03FB 22            [24] 1365 	ret
                           1366 ;------------------------------------------------------------
                           1367 ;Allocation info for local variables in function 'beginScreen'
                           1368 ;------------------------------------------------------------
                           1369 ;	src/screen.c:8: int beginScreen(){
                           1370 ;	-----------------------------------------
                           1371 ;	 function beginScreen
                           1372 ;	-----------------------------------------
   03FC                    1373 _beginScreen:
                           1374 ;	src/screen.c:10: InitGLCDEnvironment();	//from glcd lib.
   03FC 12r00r00      [24] 1375 	lcall	_InitGLCDEnvironment
                           1376 ;	src/screen.c:11: clearGLCD();		//clear the lcd screen for now.
   03FF 12r00r82      [24] 1377 	lcall	_clearGLCD
                           1378 ;	src/screen.c:12: return 1;
   0402 90 00 01      [24] 1379 	mov	dptr,#0x0001
   0405 22            [24] 1380 	ret
                           1381 ;------------------------------------------------------------
                           1382 ;Allocation info for local variables in function 'delayms'
                           1383 ;------------------------------------------------------------
                           1384 ;dl                        Allocated to registers 
                           1385 ;iCnt                      Allocated to registers r4 r5 
                           1386 ;------------------------------------------------------------
                           1387 ;	src/libdelay.c:5: void delayms( int dl ){
                           1388 ;	-----------------------------------------
                           1389 ;	 function delayms
                           1390 ;	-----------------------------------------
   0406                    1391 _delayms:
   0406 AE 82         [24] 1392 	mov	r6,dpl
   0408 AF 83         [24] 1393 	mov	r7,dph
                           1394 ;	src/libdelay.c:6: int iCnt=0;
   040A                    1395 00107$:
                           1396 ;	src/libdelay.c:7: for ( ; dl ; dl-- )
   040A EE            [12] 1397 	mov	a,r6
   040B 4F            [12] 1398 	orl	a,r7
   040C 60 14         [24] 1399 	jz	00109$
                           1400 ;	src/libdelay.c:8: for( iCnt=0; iCnt<=100; iCnt++);
   040E 7C 65         [12] 1401 	mov	r4,#0x65
   0410 7D 00         [12] 1402 	mov	r5,#0x00
   0412                    1403 00105$:
   0412 1C            [12] 1404 	dec	r4
   0413 BC FF 01      [24] 1405 	cjne	r4,#0xFF,00126$
   0416 1D            [12] 1406 	dec	r5
   0417                    1407 00126$:
   0417 EC            [12] 1408 	mov	a,r4
   0418 4D            [12] 1409 	orl	a,r5
   0419 70 F7         [24] 1410 	jnz	00105$
                           1411 ;	src/libdelay.c:7: for ( ; dl ; dl-- )
   041B 1E            [12] 1412 	dec	r6
   041C BE FF 01      [24] 1413 	cjne	r6,#0xFF,00128$
   041F 1F            [12] 1414 	dec	r7
   0420                    1415 00128$:
   0420 80 E8         [24] 1416 	sjmp	00107$
   0422                    1417 00109$:
   0422 22            [24] 1418 	ret
                           1419 ;------------------------------------------------------------
                           1420 ;Allocation info for local variables in function '__delay_us'
                           1421 ;------------------------------------------------------------
                           1422 ;d                         Allocated to registers 
                           1423 ;i                         Allocated to registers r4 r5 
                           1424 ;limit                     Allocated to registers r6 r7 
                           1425 ;------------------------------------------------------------
                           1426 ;	src/I2C.c:4: void __delay_us(unsigned int d)
                           1427 ;	-----------------------------------------
                           1428 ;	 function __delay_us
                           1429 ;	-----------------------------------------
   0423                    1430 ___delay_us:
                           1431 ;	src/I2C.c:7: limit = d/15;
   0423 75*00 0F      [24] 1432 	mov	__divuint_PARM_2,#0x0F
   0426 75*01 00      [24] 1433 	mov	(__divuint_PARM_2 + 1),#0x00
   0429 12r00r00      [24] 1434 	lcall	__divuint
   042C AE 82         [24] 1435 	mov	r6,dpl
   042E AF 83         [24] 1436 	mov	r7,dph
                           1437 ;	src/I2C.c:9: for(i=0;i<limit;i++);
   0430 7C 00         [12] 1438 	mov	r4,#0x00
   0432 7D 00         [12] 1439 	mov	r5,#0x00
   0434                    1440 00103$:
   0434 C3            [12] 1441 	clr	c
   0435 EC            [12] 1442 	mov	a,r4
   0436 9E            [12] 1443 	subb	a,r6
   0437 ED            [12] 1444 	mov	a,r5
   0438 9F            [12] 1445 	subb	a,r7
   0439 50 07         [24] 1446 	jnc	00105$
   043B 0C            [12] 1447 	inc	r4
   043C BC 00 F5      [24] 1448 	cjne	r4,#0x00,00103$
   043F 0D            [12] 1449 	inc	r5
   0440 80 F2         [24] 1450 	sjmp	00103$
   0442                    1451 00105$:
   0442 22            [24] 1452 	ret
                           1453 ;------------------------------------------------------------
                           1454 ;Allocation info for local variables in function 'InitI2C'
                           1455 ;------------------------------------------------------------
                           1456 ;	src/I2C.c:14: void InitI2C(void)
                           1457 ;	-----------------------------------------
                           1458 ;	 function InitI2C
                           1459 ;	-----------------------------------------
   0443                    1460 _InitI2C:
                           1461 ;	src/I2C.c:17: SDA = 1;
   0443 D2 90         [12] 1462 	setb	_SDA
                           1463 ;	src/I2C.c:18: SCK = 1;
   0445 D2 91         [12] 1464 	setb	_SCK
   0447 22            [24] 1465 	ret
                           1466 ;------------------------------------------------------------
                           1467 ;Allocation info for local variables in function 'I2C_Start'
                           1468 ;------------------------------------------------------------
                           1469 ;	src/I2C.c:23: void I2C_Start(void)
                           1470 ;	-----------------------------------------
                           1471 ;	 function I2C_Start
                           1472 ;	-----------------------------------------
   0448                    1473 _I2C_Start:
                           1474 ;	src/I2C.c:25: Set_SCK_High;				// Make SCK pin high
   0448 D2 91         [12] 1475 	setb	_SCK
                           1476 ;	src/I2C.c:26: Set_SDA_High;				// Make SDA pin High
   044A D2 90         [12] 1477 	setb	_SDA
                           1478 ;	src/I2C.c:27: __delay_us(HalfBitDelay);	// Half bit delay
   044C 90 01 F4      [24] 1479 	mov	dptr,#0x01F4
   044F 12r04r23      [24] 1480 	lcall	___delay_us
                           1481 ;	src/I2C.c:28: Set_SDA_Low;				// Make SDA Low
   0452 C2 90         [12] 1482 	clr	_SDA
                           1483 ;	src/I2C.c:29: __delay_us(HalfBitDelay);	// Half bit delay
   0454 90 01 F4      [24] 1484 	mov	dptr,#0x01F4
   0457 02r04r23      [24] 1485 	ljmp	___delay_us
                           1486 ;------------------------------------------------------------
                           1487 ;Allocation info for local variables in function 'I2C_ReStart'
                           1488 ;------------------------------------------------------------
                           1489 ;	src/I2C.c:34: void I2C_ReStart(void)
                           1490 ;	-----------------------------------------
                           1491 ;	 function I2C_ReStart
                           1492 ;	-----------------------------------------
   045A                    1493 _I2C_ReStart:
                           1494 ;	src/I2C.c:36: Set_SCK_Low;				// Make SCK pin low
   045A C2 91         [12] 1495 	clr	_SCK
                           1496 ;	src/I2C.c:38: __delay_us(HalfBitDelay/2);	// Data pin should change it's value,
   045C 90 00 FA      [24] 1497 	mov	dptr,#0x00FA
   045F 12r04r23      [24] 1498 	lcall	___delay_us
                           1499 ;	src/I2C.c:40: Set_SDA_High;				// Make SDA pin High
   0462 D2 90         [12] 1500 	setb	_SDA
                           1501 ;	src/I2C.c:42: __delay_us(HalfBitDelay/2);	// 1/4 bit delay
   0464 90 00 FA      [24] 1502 	mov	dptr,#0x00FA
   0467 12r04r23      [24] 1503 	lcall	___delay_us
                           1504 ;	src/I2C.c:43: Set_SCK_High;				// Make SCK pin high
   046A D2 91         [12] 1505 	setb	_SCK
                           1506 ;	src/I2C.c:44: __delay_us(HalfBitDelay/2);	// 1/4 bit delay
   046C 90 00 FA      [24] 1507 	mov	dptr,#0x00FA
   046F 12r04r23      [24] 1508 	lcall	___delay_us
                           1509 ;	src/I2C.c:45: Set_SDA_Low;				// Make SDA Low
   0472 C2 90         [12] 1510 	clr	_SDA
                           1511 ;	src/I2C.c:46: __delay_us(HalfBitDelay/2);	// 1/4 bit delay
   0474 90 00 FA      [24] 1512 	mov	dptr,#0x00FA
   0477 02r04r23      [24] 1513 	ljmp	___delay_us
                           1514 ;------------------------------------------------------------
                           1515 ;Allocation info for local variables in function 'I2C_Stop'
                           1516 ;------------------------------------------------------------
                           1517 ;	src/I2C.c:51: void I2C_Stop(void)
                           1518 ;	-----------------------------------------
                           1519 ;	 function I2C_Stop
                           1520 ;	-----------------------------------------
   047A                    1521 _I2C_Stop:
                           1522 ;	src/I2C.c:53: Set_SCK_Low;				// Make SCK pin low
   047A C2 91         [12] 1523 	clr	_SCK
                           1524 ;	src/I2C.c:55: __delay_us(HalfBitDelay/2);	// Data pin should change it's value,
   047C 90 00 FA      [24] 1525 	mov	dptr,#0x00FA
   047F 12r04r23      [24] 1526 	lcall	___delay_us
                           1527 ;	src/I2C.c:57: Set_SDA_Low;				// Make SDA pin low
   0482 C2 90         [12] 1528 	clr	_SDA
                           1529 ;	src/I2C.c:59: __delay_us(HalfBitDelay/2);	// 1/4 bit delay
   0484 90 00 FA      [24] 1530 	mov	dptr,#0x00FA
   0487 12r04r23      [24] 1531 	lcall	___delay_us
                           1532 ;	src/I2C.c:60: Set_SCK_High;				// Make SCK pin high
   048A D2 91         [12] 1533 	setb	_SCK
                           1534 ;	src/I2C.c:61: __delay_us(HalfBitDelay/2);	// 1/4 bit delay
   048C 90 00 FA      [24] 1535 	mov	dptr,#0x00FA
   048F 12r04r23      [24] 1536 	lcall	___delay_us
                           1537 ;	src/I2C.c:62: Set_SDA_High;				// Make SDA high
   0492 D2 90         [12] 1538 	setb	_SDA
                           1539 ;	src/I2C.c:63: __delay_us(HalfBitDelay/2);	// 1/4 bit delay
   0494 90 00 FA      [24] 1540 	mov	dptr,#0x00FA
   0497 02r04r23      [24] 1541 	ljmp	___delay_us
                           1542 ;------------------------------------------------------------
                           1543 ;Allocation info for local variables in function 'I2C_Send_ACK'
                           1544 ;------------------------------------------------------------
                           1545 ;	src/I2C.c:69: void I2C_Send_ACK(void)
                           1546 ;	-----------------------------------------
                           1547 ;	 function I2C_Send_ACK
                           1548 ;	-----------------------------------------
   049A                    1549 _I2C_Send_ACK:
                           1550 ;	src/I2C.c:71: Set_SCK_Low;				// Make SCK pin low
   049A C2 91         [12] 1551 	clr	_SCK
                           1552 ;	src/I2C.c:72: __delay_us(HalfBitDelay/2);	// Data pin should change it's value,
   049C 90 00 FA      [24] 1553 	mov	dptr,#0x00FA
   049F 12r04r23      [24] 1554 	lcall	___delay_us
                           1555 ;	src/I2C.c:74: Set_SDA_Low;				// Make SDA Low
   04A2 C2 90         [12] 1556 	clr	_SDA
                           1557 ;	src/I2C.c:75: __delay_us(HalfBitDelay/2);	// 1/4 bit delay
   04A4 90 00 FA      [24] 1558 	mov	dptr,#0x00FA
   04A7 12r04r23      [24] 1559 	lcall	___delay_us
                           1560 ;	src/I2C.c:76: Set_SCK_High;				// Make SCK pin high
   04AA D2 91         [12] 1561 	setb	_SCK
                           1562 ;	src/I2C.c:77: __delay_us(HalfBitDelay);	// Half bit delay
   04AC 90 01 F4      [24] 1563 	mov	dptr,#0x01F4
   04AF 02r04r23      [24] 1564 	ljmp	___delay_us
                           1565 ;------------------------------------------------------------
                           1566 ;Allocation info for local variables in function 'I2C_Send_NACK'
                           1567 ;------------------------------------------------------------
                           1568 ;	src/I2C.c:82: void I2C_Send_NACK(void)
                           1569 ;	-----------------------------------------
                           1570 ;	 function I2C_Send_NACK
                           1571 ;	-----------------------------------------
   04B2                    1572 _I2C_Send_NACK:
                           1573 ;	src/I2C.c:84: Set_SCK_Low;				// Make SCK pin low
   04B2 C2 91         [12] 1574 	clr	_SCK
                           1575 ;	src/I2C.c:85: __delay_us(HalfBitDelay/2);	// Data pin should change it's value,
   04B4 90 00 FA      [24] 1576 	mov	dptr,#0x00FA
   04B7 12r04r23      [24] 1577 	lcall	___delay_us
                           1578 ;	src/I2C.c:87: Set_SDA_High;				// Make SDA high
   04BA D2 90         [12] 1579 	setb	_SDA
                           1580 ;	src/I2C.c:88: __delay_us(HalfBitDelay/2);	// 1/4 bit delay
   04BC 90 00 FA      [24] 1581 	mov	dptr,#0x00FA
   04BF 12r04r23      [24] 1582 	lcall	___delay_us
                           1583 ;	src/I2C.c:89: Set_SCK_High;				// Make SCK pin high
   04C2 D2 91         [12] 1584 	setb	_SCK
                           1585 ;	src/I2C.c:90: __delay_us(HalfBitDelay);	// Half bit delay
   04C4 90 01 F4      [24] 1586 	mov	dptr,#0x01F4
   04C7 02r04r23      [24] 1587 	ljmp	___delay_us
                           1588 ;------------------------------------------------------------
                           1589 ;Allocation info for local variables in function 'I2C_Write_Byte'
                           1590 ;------------------------------------------------------------
                           1591 ;Byte                      Allocated to registers r7 
                           1592 ;i                         Allocated to registers r6 
                           1593 ;------------------------------------------------------------
                           1594 ;	src/I2C.c:95: __bit I2C_Write_Byte(unsigned char Byte)
                           1595 ;	-----------------------------------------
                           1596 ;	 function I2C_Write_Byte
                           1597 ;	-----------------------------------------
   04CA                    1598 _I2C_Write_Byte:
   04CA AF 82         [24] 1599 	mov	r7,dpl
                           1600 ;	src/I2C.c:99: for(i=0;i<8;i++)		// Repeat for every bit
   04CC 7E 00         [12] 1601 	mov	r6,#0x00
   04CE                    1602 00105$:
                           1603 ;	src/I2C.c:101: Set_SCK_Low;		// Make SCK pin low
   04CE C2 91         [12] 1604 	clr	_SCK
                           1605 ;	src/I2C.c:103: __delay_us(HalfBitDelay/2);	// Data pin should change it's value,
   04D0 90 00 FA      [24] 1606 	mov	dptr,#0x00FA
   04D3 C0 07         [24] 1607 	push	ar7
   04D5 C0 06         [24] 1608 	push	ar6
   04D7 12r04r23      [24] 1609 	lcall	___delay_us
   04DA D0 06         [24] 1610 	pop	ar6
   04DC D0 07         [24] 1611 	pop	ar7
                           1612 ;	src/I2C.c:106: if((Byte<<i)&0x80)  // Place data bit value on SDA pin
   04DE 8F 04         [24] 1613 	mov	ar4,r7
   04E0 7D 00         [12] 1614 	mov	r5,#0x00
   04E2 8E F0         [24] 1615 	mov	b,r6
   04E4 05 F0         [12] 1616 	inc	b
   04E6 80 06         [24] 1617 	sjmp	00120$
   04E8                    1618 00119$:
   04E8 EC            [12] 1619 	mov	a,r4
   04E9 2C            [12] 1620 	add	a,r4
   04EA FC            [12] 1621 	mov	r4,a
   04EB ED            [12] 1622 	mov	a,r5
   04EC 33            [12] 1623 	rlc	a
   04ED FD            [12] 1624 	mov	r5,a
   04EE                    1625 00120$:
   04EE D5 F0 F7      [24] 1626 	djnz	b,00119$
   04F1 EC            [12] 1627 	mov	a,r4
   04F2 30 E7 04      [24] 1628 	jnb	acc.7,00102$
                           1629 ;	src/I2C.c:107: Set_SDA_High;	// If bit is high, make SDA high
   04F5 D2 90         [12] 1630 	setb	_SDA
   04F7 80 02         [24] 1631 	sjmp	00103$
   04F9                    1632 00102$:
                           1633 ;	src/I2C.c:109: Set_SDA_Low;	// If bit is low, make SDA low
   04F9 C2 90         [12] 1634 	clr	_SDA
   04FB                    1635 00103$:
                           1636 ;	src/I2C.c:111: __delay_us(HalfBitDelay/2);	// Toggle SCK pin
   04FB 90 00 FA      [24] 1637 	mov	dptr,#0x00FA
   04FE C0 07         [24] 1638 	push	ar7
   0500 C0 06         [24] 1639 	push	ar6
   0502 12r04r23      [24] 1640 	lcall	___delay_us
                           1641 ;	src/I2C.c:112: Set_SCK_High;				// So that slave can
   0505 D2 91         [12] 1642 	setb	_SCK
                           1643 ;	src/I2C.c:113: __delay_us(HalfBitDelay);	// latch data bit
   0507 90 01 F4      [24] 1644 	mov	dptr,#0x01F4
   050A 12r04r23      [24] 1645 	lcall	___delay_us
   050D D0 06         [24] 1646 	pop	ar6
   050F D0 07         [24] 1647 	pop	ar7
                           1648 ;	src/I2C.c:99: for(i=0;i<8;i++)		// Repeat for every bit
   0511 0E            [12] 1649 	inc	r6
   0512 BE 08 00      [24] 1650 	cjne	r6,#0x08,00122$
   0515                    1651 00122$:
   0515 40 B7         [24] 1652 	jc	00105$
                           1653 ;	src/I2C.c:117: Set_SCK_Low;
   0517 C2 91         [12] 1654 	clr	_SCK
                           1655 ;	src/I2C.c:118: Set_SDA_High;
   0519 D2 90         [12] 1656 	setb	_SDA
                           1657 ;	src/I2C.c:119: __delay_us(HalfBitDelay);
   051B 90 01 F4      [24] 1658 	mov	dptr,#0x01F4
   051E 12r04r23      [24] 1659 	lcall	___delay_us
                           1660 ;	src/I2C.c:120: Set_SCK_High;
   0521 D2 91         [12] 1661 	setb	_SCK
                           1662 ;	src/I2C.c:121: __delay_us(HalfBitDelay);
   0523 90 01 F4      [24] 1663 	mov	dptr,#0x01F4
   0526 12r04r23      [24] 1664 	lcall	___delay_us
                           1665 ;	src/I2C.c:123: return SDA;
   0529 A2 90         [12] 1666 	mov	c,_SDA
   052B 22            [24] 1667 	ret
                           1668 ;------------------------------------------------------------
                           1669 ;Allocation info for local variables in function 'I2C_Read_Byte'
                           1670 ;------------------------------------------------------------
                           1671 ;i                         Allocated to registers r6 
                           1672 ;d                         Allocated to registers r5 
                           1673 ;RxData                    Allocated to registers r7 
                           1674 ;------------------------------------------------------------
                           1675 ;	src/I2C.c:128: unsigned char I2C_Read_Byte(void)
                           1676 ;	-----------------------------------------
                           1677 ;	 function I2C_Read_Byte
                           1678 ;	-----------------------------------------
   052C                    1679 _I2C_Read_Byte:
                           1680 ;	src/I2C.c:130: unsigned char i, d, RxData = 0;
   052C 7F 00         [12] 1681 	mov	r7,#0x00
                           1682 ;	src/I2C.c:132: for(i=0;i<8;i++)
   052E 7E 00         [12] 1683 	mov	r6,#0x00
   0530                    1684 00102$:
                           1685 ;	src/I2C.c:134: Set_SCK_Low;					// Make SCK pin low
   0530 C2 91         [12] 1686 	clr	_SCK
                           1687 ;	src/I2C.c:135: Set_SDA_High;					// Don't drive SDA 
   0532 D2 90         [12] 1688 	setb	_SDA
                           1689 ;	src/I2C.c:136: __delay_us(HalfBitDelay);		// Half bit delay
   0534 90 01 F4      [24] 1690 	mov	dptr,#0x01F4
   0537 C0 07         [24] 1691 	push	ar7
   0539 C0 06         [24] 1692 	push	ar6
   053B 12r04r23      [24] 1693 	lcall	___delay_us
                           1694 ;	src/I2C.c:137: Set_SCK_High;					// Make SCK pin high
   053E D2 91         [12] 1695 	setb	_SCK
                           1696 ;	src/I2C.c:138: __delay_us(HalfBitDelay/2);		// 1/4 bit delay
   0540 90 00 FA      [24] 1697 	mov	dptr,#0x00FA
   0543 12r04r23      [24] 1698 	lcall	___delay_us
   0546 D0 06         [24] 1699 	pop	ar6
   0548 D0 07         [24] 1700 	pop	ar7
                           1701 ;	src/I2C.c:139: d = SDA;					    // Capture Received Bit
   054A A2 90         [12] 1702 	mov	c,_SDA
   054C E4            [12] 1703 	clr	a
   054D 33            [12] 1704 	rlc	a
   054E FD            [12] 1705 	mov	r5,a
                           1706 ;	src/I2C.c:140: RxData = RxData|(d<<(7-i));   	// Copy it in RxData
   054F 74 07         [12] 1707 	mov	a,#0x07
   0551 C3            [12] 1708 	clr	c
   0552 9E            [12] 1709 	subb	a,r6
   0553 F5 F0         [12] 1710 	mov	b,a
   0555 05 F0         [12] 1711 	inc	b
   0557 ED            [12] 1712 	mov	a,r5
   0558 80 02         [24] 1713 	sjmp	00115$
   055A                    1714 00113$:
   055A 25 E0         [12] 1715 	add	a,acc
   055C                    1716 00115$:
   055C D5 F0 FB      [24] 1717 	djnz	b,00113$
   055F 42 07         [12] 1718 	orl	ar7,a
                           1719 ;	src/I2C.c:141: __delay_us(HalfBitDelay/2);		// 1/4 bit delay
   0561 90 00 FA      [24] 1720 	mov	dptr,#0x00FA
   0564 C0 07         [24] 1721 	push	ar7
   0566 C0 06         [24] 1722 	push	ar6
   0568 12r04r23      [24] 1723 	lcall	___delay_us
   056B D0 06         [24] 1724 	pop	ar6
   056D D0 07         [24] 1725 	pop	ar7
                           1726 ;	src/I2C.c:132: for(i=0;i<8;i++)
   056F 0E            [12] 1727 	inc	r6
   0570 BE 08 00      [24] 1728 	cjne	r6,#0x08,00116$
   0573                    1729 00116$:
   0573 40 BB         [24] 1730 	jc	00102$
                           1731 ;	src/I2C.c:144: return RxData;						// Return received byte
   0575 8F 82         [24] 1732 	mov	dpl,r7
   0577 22            [24] 1733 	ret
                           1734 ;------------------------------------------------------------
                           1735 ;Allocation info for local variables in function 'delay'
                           1736 ;------------------------------------------------------------
                           1737 ;d                         Allocated to registers r6 r7 
                           1738 ;i                         Allocated to registers r4 r5 
                           1739 ;------------------------------------------------------------
                           1740 ;	src/DS1307.c:9: void delay(unsigned int d)
                           1741 ;	-----------------------------------------
                           1742 ;	 function delay
                           1743 ;	-----------------------------------------
   0578                    1744 _delay:
   0578 AE 82         [24] 1745 	mov	r6,dpl
   057A AF 83         [24] 1746 	mov	r7,dph
                           1747 ;	src/DS1307.c:12: for(i=0;i<d;i++);
   057C 7C 00         [12] 1748 	mov	r4,#0x00
   057E 7D 00         [12] 1749 	mov	r5,#0x00
   0580                    1750 00103$:
   0580 C3            [12] 1751 	clr	c
   0581 EC            [12] 1752 	mov	a,r4
   0582 9E            [12] 1753 	subb	a,r6
   0583 ED            [12] 1754 	mov	a,r5
   0584 9F            [12] 1755 	subb	a,r7
   0585 50 07         [24] 1756 	jnc	00105$
   0587 0C            [12] 1757 	inc	r4
   0588 BC 00 F5      [24] 1758 	cjne	r4,#0x00,00103$
   058B 0D            [12] 1759 	inc	r5
   058C 80 F2         [24] 1760 	sjmp	00103$
   058E                    1761 00105$:
   058E 22            [24] 1762 	ret
                           1763 ;------------------------------------------------------------
                           1764 ;Allocation info for local variables in function 'Write_Byte_To_DS1307_RTC'
                           1765 ;------------------------------------------------------------
                           1766 ;DataByte                  Allocated with name '_Write_Byte_To_DS1307_RTC_PARM_2'
                           1767 ;Address                   Allocated to registers r7 
                           1768 ;------------------------------------------------------------
                           1769 ;	src/DS1307.c:19: void Write_Byte_To_DS1307_RTC(unsigned char Address, unsigned char DataByte)
                           1770 ;	-----------------------------------------
                           1771 ;	 function Write_Byte_To_DS1307_RTC
                           1772 ;	-----------------------------------------
   058F                    1773 _Write_Byte_To_DS1307_RTC:
   058F AF 82         [24] 1774 	mov	r7,dpl
                           1775 ;	src/DS1307.c:21: I2C_Start();										// Start i2c communication
   0591 C0 07         [24] 1776 	push	ar7
   0593 12r04r48      [24] 1777 	lcall	_I2C_Start
   0596 D0 07         [24] 1778 	pop	ar7
                           1779 ;	src/DS1307.c:24: while(I2C_Write_Byte(Device_Address_DS1307_EEPROM + 0) == 1)// Wait until device is free
   0598                    1780 00101$:
   0598 75 82 D0      [24] 1781 	mov	dpl,#0xD0
   059B C0 07         [24] 1782 	push	ar7
   059D 12r04rCA      [24] 1783 	lcall	_I2C_Write_Byte
   05A0 D0 07         [24] 1784 	pop	ar7
   05A2 92*00         [24] 1785 	mov  _Write_Byte_To_DS1307_RTC_sloc0_1_0,c
   05A4 E4            [12] 1786 	clr	a
   05A5 33            [12] 1787 	rlc	a
   05A6 FE            [12] 1788 	mov	r6,a
   05A7 BE 01 09      [24] 1789 	cjne	r6,#0x01,00103$
                           1790 ;	src/DS1307.c:25: {	I2C_Start();	}		
   05AA C0 07         [24] 1791 	push	ar7
   05AC 12r04r48      [24] 1792 	lcall	_I2C_Start
   05AF D0 07         [24] 1793 	pop	ar7
   05B1 80 E5         [24] 1794 	sjmp	00101$
   05B3                    1795 00103$:
                           1796 ;	src/DS1307.c:27: I2C_Write_Byte(Address);							// Write Address byte
   05B3 8F 82         [24] 1797 	mov	dpl,r7
   05B5 12r04rCA      [24] 1798 	lcall	_I2C_Write_Byte
                           1799 ;	src/DS1307.c:28: I2C_Write_Byte(DataByte);							// Write data byte
   05B8 85*17 82      [24] 1800 	mov	dpl,_Write_Byte_To_DS1307_RTC_PARM_2
   05BB 12r04rCA      [24] 1801 	lcall	_I2C_Write_Byte
                           1802 ;	src/DS1307.c:29: I2C_Stop();											// Stop i2c communication
   05BE 02r04r7A      [24] 1803 	ljmp	_I2C_Stop
                           1804 ;------------------------------------------------------------
                           1805 ;Allocation info for local variables in function 'Read_Byte_From_DS1307_RTC'
                           1806 ;------------------------------------------------------------
                           1807 ;Address                   Allocated to registers r7 
                           1808 ;Byte                      Allocated to registers r7 
                           1809 ;------------------------------------------------------------
                           1810 ;	src/DS1307.c:36: unsigned char Read_Byte_From_DS1307_RTC(unsigned char Address)
                           1811 ;	-----------------------------------------
                           1812 ;	 function Read_Byte_From_DS1307_RTC
                           1813 ;	-----------------------------------------
   05C1                    1814 _Read_Byte_From_DS1307_RTC:
   05C1 AF 82         [24] 1815 	mov	r7,dpl
                           1816 ;	src/DS1307.c:40: I2C_Start();										// Start i2c communication
   05C3 C0 07         [24] 1817 	push	ar7
   05C5 12r04r48      [24] 1818 	lcall	_I2C_Start
   05C8 D0 07         [24] 1819 	pop	ar7
                           1820 ;	src/DS1307.c:43: while(I2C_Write_Byte(Device_Address_DS1307_EEPROM + 0) == 1)// Wait until device is free
   05CA                    1821 00101$:
   05CA 75 82 D0      [24] 1822 	mov	dpl,#0xD0
   05CD C0 07         [24] 1823 	push	ar7
   05CF 12r04rCA      [24] 1824 	lcall	_I2C_Write_Byte
   05D2 D0 07         [24] 1825 	pop	ar7
   05D4 92*01         [24] 1826 	mov  _Read_Byte_From_DS1307_RTC_sloc0_1_0,c
   05D6 E4            [12] 1827 	clr	a
   05D7 33            [12] 1828 	rlc	a
   05D8 FE            [12] 1829 	mov	r6,a
   05D9 BE 01 09      [24] 1830 	cjne	r6,#0x01,00103$
                           1831 ;	src/DS1307.c:44: {	I2C_Start();	}		
   05DC C0 07         [24] 1832 	push	ar7
   05DE 12r04r48      [24] 1833 	lcall	_I2C_Start
   05E1 D0 07         [24] 1834 	pop	ar7
   05E3 80 E5         [24] 1835 	sjmp	00101$
   05E5                    1836 00103$:
                           1837 ;	src/DS1307.c:46: I2C_Write_Byte(Address);							// Write Address byte
   05E5 8F 82         [24] 1838 	mov	dpl,r7
   05E7 12r04rCA      [24] 1839 	lcall	_I2C_Write_Byte
                           1840 ;	src/DS1307.c:47: I2C_ReStart();										// Restart i2c
   05EA 12r04r5A      [24] 1841 	lcall	_I2C_ReStart
                           1842 ;	src/DS1307.c:50: I2C_Write_Byte(Device_Address_DS1307_EEPROM + 1);		
   05ED 75 82 D1      [24] 1843 	mov	dpl,#0xD1
   05F0 12r04rCA      [24] 1844 	lcall	_I2C_Write_Byte
                           1845 ;	src/DS1307.c:52: Byte = I2C_Read_Byte();								// Read byte from EEPROM
   05F3 12r05r2C      [24] 1846 	lcall	_I2C_Read_Byte
   05F6 AF 82         [24] 1847 	mov	r7,dpl
                           1848 ;	src/DS1307.c:56: I2C_Send_NACK();
   05F8 C0 07         [24] 1849 	push	ar7
   05FA 12r04rB2      [24] 1850 	lcall	_I2C_Send_NACK
                           1851 ;	src/DS1307.c:59: Set_SDA_Low;				// Make SDA Low
   05FD C2 90         [12] 1852 	clr	_SDA
                           1853 ;	src/DS1307.c:60: __delay_us(HalfBitDelay);	// Half bit delay
   05FF 90 01 F4      [24] 1854 	mov	dptr,#0x01F4
   0602 12r04r23      [24] 1855 	lcall	___delay_us
                           1856 ;	src/DS1307.c:61: Set_SDA_High;				// Make SDA high
   0605 D2 90         [12] 1857 	setb	_SDA
                           1858 ;	src/DS1307.c:62: __delay_us(HalfBitDelay);	// Half bit delay
   0607 90 01 F4      [24] 1859 	mov	dptr,#0x01F4
   060A 12r04r23      [24] 1860 	lcall	___delay_us
   060D D0 07         [24] 1861 	pop	ar7
                           1862 ;	src/DS1307.c:64: return Byte;				// Return the byte received from 24LC64 EEPROM
   060F 8F 82         [24] 1863 	mov	dpl,r7
   0611 22            [24] 1864 	ret
                           1865 ;------------------------------------------------------------
                           1866 ;Allocation info for local variables in function 'Write_Bytes_To_DS1307_RTC'
                           1867 ;------------------------------------------------------------
                           1868 ;pData                     Allocated with name '_Write_Bytes_To_DS1307_RTC_PARM_2'
                           1869 ;NoOfBytes                 Allocated with name '_Write_Bytes_To_DS1307_RTC_PARM_3'
                           1870 ;Address                   Allocated to registers r7 
                           1871 ;i                         Allocated to registers r6 r7 
                           1872 ;------------------------------------------------------------
                           1873 ;	src/DS1307.c:72: void Write_Bytes_To_DS1307_RTC(unsigned char Address,unsigned char* pData,unsigned char NoOfBytes)
                           1874 ;	-----------------------------------------
                           1875 ;	 function Write_Bytes_To_DS1307_RTC
                           1876 ;	-----------------------------------------
   0612                    1877 _Write_Bytes_To_DS1307_RTC:
   0612 AF 82         [24] 1878 	mov	r7,dpl
                           1879 ;	src/DS1307.c:76: I2C_Start();										// Start i2c communication
   0614 C0 07         [24] 1880 	push	ar7
   0616 12r04r48      [24] 1881 	lcall	_I2C_Start
   0619 D0 07         [24] 1882 	pop	ar7
                           1883 ;	src/DS1307.c:79: while(I2C_Write_Byte(Device_Address_DS1307_EEPROM + 0) == 1)// Wait until device is free
   061B                    1884 00101$:
   061B 75 82 D0      [24] 1885 	mov	dpl,#0xD0
   061E C0 07         [24] 1886 	push	ar7
   0620 12r04rCA      [24] 1887 	lcall	_I2C_Write_Byte
   0623 D0 07         [24] 1888 	pop	ar7
   0625 92*02         [24] 1889 	mov  _Write_Bytes_To_DS1307_RTC_sloc0_1_0,c
   0627 E4            [12] 1890 	clr	a
   0628 33            [12] 1891 	rlc	a
   0629 FE            [12] 1892 	mov	r6,a
   062A BE 01 09      [24] 1893 	cjne	r6,#0x01,00103$
                           1894 ;	src/DS1307.c:80: {	I2C_Start();	}		
   062D C0 07         [24] 1895 	push	ar7
   062F 12r04r48      [24] 1896 	lcall	_I2C_Start
   0632 D0 07         [24] 1897 	pop	ar7
   0634 80 E5         [24] 1898 	sjmp	00101$
   0636                    1899 00103$:
                           1900 ;	src/DS1307.c:82: I2C_Write_Byte(Address);							// Write Address byte
   0636 8F 82         [24] 1901 	mov	dpl,r7
   0638 12r04rCA      [24] 1902 	lcall	_I2C_Write_Byte
                           1903 ;	src/DS1307.c:84: for(i=0;i<NoOfBytes;i++)							// Write NoOfBytes
   063B 7E 00         [12] 1904 	mov	r6,#0x00
   063D 7F 00         [12] 1905 	mov	r7,#0x00
   063F                    1906 00106$:
   063F AC*1B         [24] 1907 	mov	r4,_Write_Bytes_To_DS1307_RTC_PARM_3
   0641 7D 00         [12] 1908 	mov	r5,#0x00
   0643 C3            [12] 1909 	clr	c
   0644 EE            [12] 1910 	mov	a,r6
   0645 9C            [12] 1911 	subb	a,r4
   0646 EF            [12] 1912 	mov	a,r7
   0647 9D            [12] 1913 	subb	a,r5
   0648 50 27         [24] 1914 	jnc	00104$
                           1915 ;	src/DS1307.c:85: I2C_Write_Byte(pData[i]);						// Write data byte
   064A EE            [12] 1916 	mov	a,r6
   064B 25*18         [12] 1917 	add	a,_Write_Bytes_To_DS1307_RTC_PARM_2
   064D FB            [12] 1918 	mov	r3,a
   064E EF            [12] 1919 	mov	a,r7
   064F 35*19         [12] 1920 	addc	a,(_Write_Bytes_To_DS1307_RTC_PARM_2 + 1)
   0651 FC            [12] 1921 	mov	r4,a
   0652 AD*1A         [24] 1922 	mov	r5,(_Write_Bytes_To_DS1307_RTC_PARM_2 + 2)
   0654 8B 82         [24] 1923 	mov	dpl,r3
   0656 8C 83         [24] 1924 	mov	dph,r4
   0658 8D F0         [24] 1925 	mov	b,r5
   065A 12r00r00      [24] 1926 	lcall	__gptrget
   065D F5 82         [12] 1927 	mov	dpl,a
   065F C0 07         [24] 1928 	push	ar7
   0661 C0 06         [24] 1929 	push	ar6
   0663 12r04rCA      [24] 1930 	lcall	_I2C_Write_Byte
   0666 D0 06         [24] 1931 	pop	ar6
   0668 D0 07         [24] 1932 	pop	ar7
                           1933 ;	src/DS1307.c:84: for(i=0;i<NoOfBytes;i++)							// Write NoOfBytes
   066A 0E            [12] 1934 	inc	r6
   066B BE 00 D1      [24] 1935 	cjne	r6,#0x00,00106$
   066E 0F            [12] 1936 	inc	r7
   066F 80 CE         [24] 1937 	sjmp	00106$
   0671                    1938 00104$:
                           1939 ;	src/DS1307.c:87: I2C_Stop();											// Stop i2c communication
   0671 02r04r7A      [24] 1940 	ljmp	_I2C_Stop
                           1941 ;------------------------------------------------------------
                           1942 ;Allocation info for local variables in function 'Read_Bytes_From_DS1307_RTC'
                           1943 ;------------------------------------------------------------
                           1944 ;pData                     Allocated with name '_Read_Bytes_From_DS1307_RTC_PARM_2'
                           1945 ;NoOfBytes                 Allocated with name '_Read_Bytes_From_DS1307_RTC_PARM_3'
                           1946 ;Address                   Allocated to registers r7 
                           1947 ;i                         Allocated with name '_Read_Bytes_From_DS1307_RTC_i_1_108'
                           1948 ;------------------------------------------------------------
                           1949 ;	src/DS1307.c:96: void Read_Bytes_From_DS1307_RTC(unsigned char Address, unsigned char* pData, unsigned int NoOfBytes)
                           1950 ;	-----------------------------------------
                           1951 ;	 function Read_Bytes_From_DS1307_RTC
                           1952 ;	-----------------------------------------
   0674                    1953 _Read_Bytes_From_DS1307_RTC:
   0674 AF 82         [24] 1954 	mov	r7,dpl
                           1955 ;	src/DS1307.c:100: I2C_Start();										// Start i2c communication
   0676 C0 07         [24] 1956 	push	ar7
   0678 12r04r48      [24] 1957 	lcall	_I2C_Start
   067B D0 07         [24] 1958 	pop	ar7
                           1959 ;	src/DS1307.c:103: while(I2C_Write_Byte(Device_Address_DS1307_EEPROM + 0) == 1)// Wait until device is free
   067D                    1960 00101$:
   067D 75 82 D0      [24] 1961 	mov	dpl,#0xD0
   0680 C0 07         [24] 1962 	push	ar7
   0682 12r04rCA      [24] 1963 	lcall	_I2C_Write_Byte
   0685 D0 07         [24] 1964 	pop	ar7
   0687 92*03         [24] 1965 	mov  _Read_Bytes_From_DS1307_RTC_sloc0_1_0,c
   0689 E4            [12] 1966 	clr	a
   068A 33            [12] 1967 	rlc	a
   068B FE            [12] 1968 	mov	r6,a
   068C BE 01 09      [24] 1969 	cjne	r6,#0x01,00103$
                           1970 ;	src/DS1307.c:104: {	I2C_Start();	}		
   068F C0 07         [24] 1971 	push	ar7
   0691 12r04r48      [24] 1972 	lcall	_I2C_Start
   0694 D0 07         [24] 1973 	pop	ar7
   0696 80 E5         [24] 1974 	sjmp	00101$
   0698                    1975 00103$:
                           1976 ;	src/DS1307.c:106: I2C_Write_Byte(Address);							// Write Address byte
   0698 8F 82         [24] 1977 	mov	dpl,r7
   069A 12r04rCA      [24] 1978 	lcall	_I2C_Write_Byte
                           1979 ;	src/DS1307.c:107: I2C_ReStart();										// Restart i2c
   069D 12r04r5A      [24] 1980 	lcall	_I2C_ReStart
                           1981 ;	src/DS1307.c:110: I2C_Write_Byte(Device_Address_DS1307_EEPROM + 1);			
   06A0 75 82 D1      [24] 1982 	mov	dpl,#0xD1
   06A3 12r04rCA      [24] 1983 	lcall	_I2C_Write_Byte
                           1984 ;	src/DS1307.c:112: pData[0] = I2C_Read_Byte();							// Read First byte from EEPROM
   06A6 AD*1C         [24] 1985 	mov	r5,_Read_Bytes_From_DS1307_RTC_PARM_2
   06A8 AE*1D         [24] 1986 	mov	r6,(_Read_Bytes_From_DS1307_RTC_PARM_2 + 1)
   06AA AF*1E         [24] 1987 	mov	r7,(_Read_Bytes_From_DS1307_RTC_PARM_2 + 2)
   06AC C0 07         [24] 1988 	push	ar7
   06AE C0 06         [24] 1989 	push	ar6
   06B0 C0 05         [24] 1990 	push	ar5
   06B2 12r05r2C      [24] 1991 	lcall	_I2C_Read_Byte
   06B5 AC 82         [24] 1992 	mov	r4,dpl
   06B7 D0 05         [24] 1993 	pop	ar5
   06B9 D0 06         [24] 1994 	pop	ar6
   06BB D0 07         [24] 1995 	pop	ar7
   06BD 8D 82         [24] 1996 	mov	dpl,r5
   06BF 8E 83         [24] 1997 	mov	dph,r6
   06C1 8F F0         [24] 1998 	mov	b,r7
   06C3 EC            [12] 1999 	mov	a,r4
   06C4 12r00r00      [24] 2000 	lcall	__gptrput
                           2001 ;	src/DS1307.c:114: for(i=1;i<NoOfBytes;i++)							// Read NoOfBytes
   06C7 75*21 01      [24] 2002 	mov	_Read_Bytes_From_DS1307_RTC_i_1_108,#0x01
   06CA 75*22 00      [24] 2003 	mov	(_Read_Bytes_From_DS1307_RTC_i_1_108 + 1),#0x00
   06CD                    2004 00106$:
   06CD C3            [12] 2005 	clr	c
   06CE E5*21         [12] 2006 	mov	a,_Read_Bytes_From_DS1307_RTC_i_1_108
   06D0 95*1F         [12] 2007 	subb	a,_Read_Bytes_From_DS1307_RTC_PARM_3
   06D2 E5*22         [12] 2008 	mov	a,(_Read_Bytes_From_DS1307_RTC_i_1_108 + 1)
   06D4 95*20         [12] 2009 	subb	a,(_Read_Bytes_From_DS1307_RTC_PARM_3 + 1)
   06D6 50 4A         [24] 2010 	jnc	00104$
                           2011 ;	src/DS1307.c:116: I2C_Send_ACK();					// Give Ack to slave to start receiving next byte
   06D8 C0 07         [24] 2012 	push	ar7
   06DA C0 06         [24] 2013 	push	ar6
   06DC C0 05         [24] 2014 	push	ar5
   06DE 12r04r9A      [24] 2015 	lcall	_I2C_Send_ACK
   06E1 D0 05         [24] 2016 	pop	ar5
   06E3 D0 06         [24] 2017 	pop	ar6
   06E5 D0 07         [24] 2018 	pop	ar7
                           2019 ;	src/DS1307.c:117: pData[i] = I2C_Read_Byte();		// Read next byte from EEPROM
   06E7 E5*21         [12] 2020 	mov	a,_Read_Bytes_From_DS1307_RTC_i_1_108
   06E9 2D            [12] 2021 	add	a,r5
   06EA F8            [12] 2022 	mov	r0,a
   06EB E5*22         [12] 2023 	mov	a,(_Read_Bytes_From_DS1307_RTC_i_1_108 + 1)
   06ED 3E            [12] 2024 	addc	a,r6
   06EE F9            [12] 2025 	mov	r1,a
   06EF 8F 02         [24] 2026 	mov	ar2,r7
   06F1 C0 07         [24] 2027 	push	ar7
   06F3 C0 06         [24] 2028 	push	ar6
   06F5 C0 05         [24] 2029 	push	ar5
   06F7 C0 02         [24] 2030 	push	ar2
   06F9 C0 01         [24] 2031 	push	ar1
   06FB C0 00         [24] 2032 	push	ar0
   06FD 12r05r2C      [24] 2033 	lcall	_I2C_Read_Byte
   0700 AC 82         [24] 2034 	mov	r4,dpl
   0702 D0 00         [24] 2035 	pop	ar0
   0704 D0 01         [24] 2036 	pop	ar1
   0706 D0 02         [24] 2037 	pop	ar2
   0708 D0 05         [24] 2038 	pop	ar5
   070A D0 06         [24] 2039 	pop	ar6
   070C D0 07         [24] 2040 	pop	ar7
   070E 88 82         [24] 2041 	mov	dpl,r0
   0710 89 83         [24] 2042 	mov	dph,r1
   0712 8A F0         [24] 2043 	mov	b,r2
   0714 EC            [12] 2044 	mov	a,r4
   0715 12r00r00      [24] 2045 	lcall	__gptrput
                           2046 ;	src/DS1307.c:114: for(i=1;i<NoOfBytes;i++)							// Read NoOfBytes
   0718 05*21         [12] 2047 	inc	_Read_Bytes_From_DS1307_RTC_i_1_108
   071A E4            [12] 2048 	clr	a
   071B B5*21 AF      [24] 2049 	cjne	a,_Read_Bytes_From_DS1307_RTC_i_1_108,00106$
   071E 05*22         [12] 2050 	inc	(_Read_Bytes_From_DS1307_RTC_i_1_108 + 1)
   0720 80 AB         [24] 2051 	sjmp	00106$
   0722                    2052 00104$:
                           2053 ;	src/DS1307.c:122: I2C_Send_NACK();
   0722 12r04rB2      [24] 2054 	lcall	_I2C_Send_NACK
                           2055 ;	src/DS1307.c:125: Set_SDA_Low;				// Make SDA Low
   0725 C2 90         [12] 2056 	clr	_SDA
                           2057 ;	src/DS1307.c:126: __delay_us(HalfBitDelay);	// Half bit delay
   0727 90 01 F4      [24] 2058 	mov	dptr,#0x01F4
   072A 12r04r23      [24] 2059 	lcall	___delay_us
                           2060 ;	src/DS1307.c:127: Set_SDA_High;				// Make SDA high
   072D D2 90         [12] 2061 	setb	_SDA
                           2062 ;	src/DS1307.c:128: __delay_us(HalfBitDelay);	// Half bit delay
   072F 90 01 F4      [24] 2063 	mov	dptr,#0x01F4
   0732 02r04r23      [24] 2064 	ljmp	___delay_us
                           2065 ;------------------------------------------------------------
                           2066 ;Allocation info for local variables in function 'Set_DS1307_RTC_Time'
                           2067 ;------------------------------------------------------------
                           2068 ;Hours                     Allocated with name '_Set_DS1307_RTC_Time_PARM_2'
                           2069 ;Mins                      Allocated with name '_Set_DS1307_RTC_Time_PARM_3'
                           2070 ;Secs                      Allocated with name '_Set_DS1307_RTC_Time_PARM_4'
                           2071 ;Mode                      Allocated to registers r7 
                           2072 ;------------------------------------------------------------
                           2073 ;	src/DS1307.c:139: void Set_DS1307_RTC_Time(unsigned char Mode, unsigned char Hours, unsigned char Mins, unsigned char Secs)
                           2074 ;	-----------------------------------------
                           2075 ;	 function Set_DS1307_RTC_Time
                           2076 ;	-----------------------------------------
   0735                    2077 _Set_DS1307_RTC_Time:
   0735 AF 82         [24] 2078 	mov	r7,dpl
                           2079 ;	src/DS1307.c:142: pRTCArray[0] = (((unsigned char)(Secs/10))<<4)|((unsigned char)(Secs%10));
   0737 75 F0 0A      [24] 2080 	mov	b,#0x0A
   073A E5*25         [12] 2081 	mov	a,_Set_DS1307_RTC_Time_PARM_4
   073C 84            [48] 2082 	div	ab
   073D C4            [12] 2083 	swap	a
   073E 54 F0         [12] 2084 	anl	a,#0xF0
   0740 FE            [12] 2085 	mov	r6,a
   0741 75 F0 0A      [24] 2086 	mov	b,#0x0A
   0744 E5*25         [12] 2087 	mov	a,_Set_DS1307_RTC_Time_PARM_4
   0746 84            [48] 2088 	div	ab
   0747 E5 F0         [12] 2089 	mov	a,b
   0749 4E            [12] 2090 	orl	a,r6
   074A F5*12         [12] 2091 	mov	_pRTCArray,a
                           2092 ;	src/DS1307.c:143: pRTCArray[1] = (((unsigned char)(Mins/10))<<4)|((unsigned char)(Mins%10));
   074C 75 F0 0A      [24] 2093 	mov	b,#0x0A
   074F E5*24         [12] 2094 	mov	a,_Set_DS1307_RTC_Time_PARM_3
   0751 84            [48] 2095 	div	ab
   0752 C4            [12] 2096 	swap	a
   0753 54 F0         [12] 2097 	anl	a,#0xF0
   0755 FE            [12] 2098 	mov	r6,a
   0756 75 F0 0A      [24] 2099 	mov	b,#0x0A
   0759 E5*24         [12] 2100 	mov	a,_Set_DS1307_RTC_Time_PARM_3
   075B 84            [48] 2101 	div	ab
   075C E5 F0         [12] 2102 	mov	a,b
   075E 4E            [12] 2103 	orl	a,r6
   075F F5*13         [12] 2104 	mov	(_pRTCArray + 0x0001),a
                           2105 ;	src/DS1307.c:144: pRTCArray[2] = (((unsigned char)(Hours/10))<<4)|((unsigned char)(Hours%10));
   0761 75 F0 0A      [24] 2106 	mov	b,#0x0A
   0764 E5*23         [12] 2107 	mov	a,_Set_DS1307_RTC_Time_PARM_2
   0766 84            [48] 2108 	div	ab
   0767 C4            [12] 2109 	swap	a
   0768 54 F0         [12] 2110 	anl	a,#0xF0
   076A FE            [12] 2111 	mov	r6,a
   076B 75 F0 0A      [24] 2112 	mov	b,#0x0A
   076E E5*23         [12] 2113 	mov	a,_Set_DS1307_RTC_Time_PARM_2
   0770 84            [48] 2114 	div	ab
   0771 E5 F0         [12] 2115 	mov	a,b
   0773 FD            [12] 2116 	mov	r5,a
   0774 4E            [12] 2117 	orl	a,r6
   0775 F5*14         [12] 2118 	mov	(_pRTCArray + 0x0002),a
                           2119 ;	src/DS1307.c:146: switch(Mode)	// Set mode bits
   0777 BF 00 02      [24] 2120 	cjne	r7,#0x00,00113$
   077A 80 05         [24] 2121 	sjmp	00101$
   077C                    2122 00113$:
                           2123 ;	src/DS1307.c:148: case AM_Time: 	pRTCArray[2] |= 0x40;	break;
   077C BF 01 10      [24] 2124 	cjne	r7,#0x01,00104$
   077F 80 08         [24] 2125 	sjmp	00102$
   0781                    2126 00101$:
   0781 74 40         [12] 2127 	mov	a,#0x40
   0783 45*14         [12] 2128 	orl	a,(_pRTCArray + 0x0002)
   0785 F5*14         [12] 2129 	mov	(_pRTCArray + 0x0002),a
                           2130 ;	src/DS1307.c:149: case PM_Time: 	pRTCArray[2] |= 0x60;	break;
   0787 80 06         [24] 2131 	sjmp	00104$
   0789                    2132 00102$:
   0789 74 60         [12] 2133 	mov	a,#0x60
   078B 45*14         [12] 2134 	orl	a,(_pRTCArray + 0x0002)
   078D F5*14         [12] 2135 	mov	(_pRTCArray + 0x0002),a
                           2136 ;	src/DS1307.c:152: }
   078F                    2137 00104$:
                           2138 ;	src/DS1307.c:155: Write_Bytes_To_DS1307_RTC(0x00, pRTCArray, 3);
   078F 75*18r12      [24] 2139 	mov	_Write_Bytes_To_DS1307_RTC_PARM_2,#_pRTCArray
   0792 75*19 00      [24] 2140 	mov	(_Write_Bytes_To_DS1307_RTC_PARM_2 + 1),#0x00
   0795 75*1A 40      [24] 2141 	mov	(_Write_Bytes_To_DS1307_RTC_PARM_2 + 2),#0x40
   0798 75*1B 03      [24] 2142 	mov	_Write_Bytes_To_DS1307_RTC_PARM_3,#0x03
   079B 75 82 00      [24] 2143 	mov	dpl,#0x00
   079E 02r06r12      [24] 2144 	ljmp	_Write_Bytes_To_DS1307_RTC
                           2145 ;------------------------------------------------------------
                           2146 ;Allocation info for local variables in function 'Get_DS1307_RTC_Time'
                           2147 ;------------------------------------------------------------
                           2148 ;	src/DS1307.c:168: unsigned char* Get_DS1307_RTC_Time(void)
                           2149 ;	-----------------------------------------
                           2150 ;	 function Get_DS1307_RTC_Time
                           2151 ;	-----------------------------------------
   07A1                    2152 _Get_DS1307_RTC_Time:
                           2153 ;	src/DS1307.c:171: Read_Bytes_From_DS1307_RTC(0x00, pRTCArray, 3);
   07A1 75*1Cr12      [24] 2154 	mov	_Read_Bytes_From_DS1307_RTC_PARM_2,#_pRTCArray
   07A4 75*1D 00      [24] 2155 	mov	(_Read_Bytes_From_DS1307_RTC_PARM_2 + 1),#0x00
   07A7 75*1E 40      [24] 2156 	mov	(_Read_Bytes_From_DS1307_RTC_PARM_2 + 2),#0x40
   07AA 75*1F 03      [24] 2157 	mov	_Read_Bytes_From_DS1307_RTC_PARM_3,#0x03
   07AD 75*20 00      [24] 2158 	mov	(_Read_Bytes_From_DS1307_RTC_PARM_3 + 1),#0x00
   07B0 75 82 00      [24] 2159 	mov	dpl,#0x00
   07B3 12r06r74      [24] 2160 	lcall	_Read_Bytes_From_DS1307_RTC
                           2161 ;	src/DS1307.c:174: Temp = pRTCArray[0];
   07B6 85*12*16      [24] 2162 	mov	_Temp,_pRTCArray
                           2163 ;	src/DS1307.c:175: pRTCArray[0] = ((Temp&0x7F)>>4)*10 + (Temp&0x0F);
   07B9 74 7F         [12] 2164 	mov	a,#0x7F
   07BB 55*16         [12] 2165 	anl	a,_Temp
   07BD C4            [12] 2166 	swap	a
   07BE 54 0F         [12] 2167 	anl	a,#0x0F
   07C0 75 F0 0A      [24] 2168 	mov	b,#0x0A
   07C3 A4            [48] 2169 	mul	ab
   07C4 FF            [12] 2170 	mov	r7,a
   07C5 74 0F         [12] 2171 	mov	a,#0x0F
   07C7 55*16         [12] 2172 	anl	a,_Temp
   07C9 2F            [12] 2173 	add	a,r7
   07CA F5*12         [12] 2174 	mov	_pRTCArray,a
                           2175 ;	src/DS1307.c:178: Temp = pRTCArray[1];
                           2176 ;	src/DS1307.c:179: pRTCArray[1] = (Temp>>4)*10 + (Temp&0x0F);
   07CC E5*13         [12] 2177 	mov	a,(_pRTCArray + 0x0001)
   07CE F5*16         [12] 2178 	mov	_Temp,a
   07D0 C4            [12] 2179 	swap	a
   07D1 54 0F         [12] 2180 	anl	a,#0x0F
   07D3 75 F0 0A      [24] 2181 	mov	b,#0x0A
   07D6 A4            [48] 2182 	mul	ab
   07D7 FF            [12] 2183 	mov	r7,a
   07D8 74 0F         [12] 2184 	mov	a,#0x0F
   07DA 55*16         [12] 2185 	anl	a,_Temp
   07DC 2F            [12] 2186 	add	a,r7
   07DD F5*13         [12] 2187 	mov	(_pRTCArray + 0x0001),a
                           2188 ;	src/DS1307.c:182: if(pRTCArray[2]&0x40)	// if 12 hours mode
   07DF E5*14         [12] 2189 	mov	a,(_pRTCArray + 0x0002)
   07E1 FF            [12] 2190 	mov	r7,a
   07E2 30 E6 24      [24] 2191 	jnb	acc.6,00105$
                           2192 ;	src/DS1307.c:184: if(pRTCArray[2]&0x20)	// if PM Time
   07E5 EF            [12] 2193 	mov	a,r7
   07E6 30 E5 05      [24] 2194 	jnb	acc.5,00102$
                           2195 ;	src/DS1307.c:185: pRTCArray[3] = PM_Time;
   07E9 75*15 01      [24] 2196 	mov	(_pRTCArray + 0x0003),#0x01
   07EC 80 03         [24] 2197 	sjmp	00103$
   07EE                    2198 00102$:
                           2199 ;	src/DS1307.c:187: pRTCArray[3] = AM_Time;
   07EE 75*15 00      [24] 2200 	mov	(_pRTCArray + 0x0003),#0x00
   07F1                    2201 00103$:
                           2202 ;	src/DS1307.c:189: Temp = pRTCArray[2];
   07F1 85*14*16      [24] 2203 	mov	_Temp,(_pRTCArray + 0x0002)
                           2204 ;	src/DS1307.c:190: pRTCArray[2] = ((Temp&0x1F)>>4)*10 + (Temp&0x0F);
   07F4 74 1F         [12] 2205 	mov	a,#0x1F
   07F6 55*16         [12] 2206 	anl	a,_Temp
   07F8 C4            [12] 2207 	swap	a
   07F9 54 0F         [12] 2208 	anl	a,#0x0F
   07FB 75 F0 0A      [24] 2209 	mov	b,#0x0A
   07FE A4            [48] 2210 	mul	ab
   07FF FE            [12] 2211 	mov	r6,a
   0800 74 0F         [12] 2212 	mov	a,#0x0F
   0802 55*16         [12] 2213 	anl	a,_Temp
   0804 2E            [12] 2214 	add	a,r6
   0805 F5*14         [12] 2215 	mov	(_pRTCArray + 0x0002),a
   0807 80 15         [24] 2216 	sjmp	00106$
   0809                    2217 00105$:
                           2218 ;	src/DS1307.c:194: Temp = pRTCArray[2];
                           2219 ;	src/DS1307.c:195: pRTCArray[2] = (Temp>>4)*10 + (Temp&0x0F);
   0809 EF            [12] 2220 	mov	a,r7
   080A F5*16         [12] 2221 	mov	_Temp,a
   080C C4            [12] 2222 	swap	a
   080D 54 0F         [12] 2223 	anl	a,#0x0F
   080F 75 F0 0A      [24] 2224 	mov	b,#0x0A
   0812 A4            [48] 2225 	mul	ab
   0813 FF            [12] 2226 	mov	r7,a
   0814 74 0F         [12] 2227 	mov	a,#0x0F
   0816 55*16         [12] 2228 	anl	a,_Temp
   0818 2F            [12] 2229 	add	a,r7
   0819 F5*14         [12] 2230 	mov	(_pRTCArray + 0x0002),a
                           2231 ;	src/DS1307.c:196: pRTCArray[3] = TwentyFourHoursMode;
   081B 75*15 02      [24] 2232 	mov	(_pRTCArray + 0x0003),#0x02
   081E                    2233 00106$:
                           2234 ;	src/DS1307.c:199: return pRTCArray;
   081E 90r00r12      [24] 2235 	mov	dptr,#_pRTCArray
   0821 75 F0 40      [24] 2236 	mov	b,#0x40
   0824 22            [24] 2237 	ret
                           2238 ;------------------------------------------------------------
                           2239 ;Allocation info for local variables in function 'Set_DS1307_RTC_Date'
                           2240 ;------------------------------------------------------------
                           2241 ;Month                     Allocated with name '_Set_DS1307_RTC_Date_PARM_2'
                           2242 ;Year                      Allocated with name '_Set_DS1307_RTC_Date_PARM_3'
                           2243 ;Day                       Allocated with name '_Set_DS1307_RTC_Date_PARM_4'
                           2244 ;Date                      Allocated to registers r7 
                           2245 ;------------------------------------------------------------
                           2246 ;	src/DS1307.c:211: void Set_DS1307_RTC_Date(unsigned char Date, unsigned char Month, unsigned char Year, unsigned char Day)
                           2247 ;	-----------------------------------------
                           2248 ;	 function Set_DS1307_RTC_Date
                           2249 ;	-----------------------------------------
   0825                    2250 _Set_DS1307_RTC_Date:
   0825 AF 82         [24] 2251 	mov	r7,dpl
                           2252 ;	src/DS1307.c:214: pRTCArray[0] = (((unsigned char)(Day/10))<<4)|((unsigned char)(Day%10));
   0827 75 F0 0A      [24] 2253 	mov	b,#0x0A
   082A E5*28         [12] 2254 	mov	a,_Set_DS1307_RTC_Date_PARM_4
   082C 84            [48] 2255 	div	ab
   082D C4            [12] 2256 	swap	a
   082E 54 F0         [12] 2257 	anl	a,#0xF0
   0830 FE            [12] 2258 	mov	r6,a
   0831 75 F0 0A      [24] 2259 	mov	b,#0x0A
   0834 E5*28         [12] 2260 	mov	a,_Set_DS1307_RTC_Date_PARM_4
   0836 84            [48] 2261 	div	ab
   0837 E5 F0         [12] 2262 	mov	a,b
   0839 4E            [12] 2263 	orl	a,r6
   083A F5*12         [12] 2264 	mov	_pRTCArray,a
                           2265 ;	src/DS1307.c:215: pRTCArray[1] = (((unsigned char)(Date/10))<<4)|((unsigned char)(Date%10));
   083C 75 F0 0A      [24] 2266 	mov	b,#0x0A
   083F EF            [12] 2267 	mov	a,r7
   0840 84            [48] 2268 	div	ab
   0841 C4            [12] 2269 	swap	a
   0842 54 F0         [12] 2270 	anl	a,#0xF0
   0844 FE            [12] 2271 	mov	r6,a
   0845 75 F0 0A      [24] 2272 	mov	b,#0x0A
   0848 EF            [12] 2273 	mov	a,r7
   0849 84            [48] 2274 	div	ab
   084A E5 F0         [12] 2275 	mov	a,b
   084C 4E            [12] 2276 	orl	a,r6
   084D F5*13         [12] 2277 	mov	(_pRTCArray + 0x0001),a
                           2278 ;	src/DS1307.c:216: pRTCArray[2] = (((unsigned char)(Month/10))<<4)|((unsigned char)(Month%10));
   084F 75 F0 0A      [24] 2279 	mov	b,#0x0A
   0852 E5*26         [12] 2280 	mov	a,_Set_DS1307_RTC_Date_PARM_2
   0854 84            [48] 2281 	div	ab
   0855 C4            [12] 2282 	swap	a
   0856 54 F0         [12] 2283 	anl	a,#0xF0
   0858 FF            [12] 2284 	mov	r7,a
   0859 75 F0 0A      [24] 2285 	mov	b,#0x0A
   085C E5*26         [12] 2286 	mov	a,_Set_DS1307_RTC_Date_PARM_2
   085E 84            [48] 2287 	div	ab
   085F E5 F0         [12] 2288 	mov	a,b
   0861 4F            [12] 2289 	orl	a,r7
   0862 F5*14         [12] 2290 	mov	(_pRTCArray + 0x0002),a
                           2291 ;	src/DS1307.c:217: pRTCArray[3] = (((unsigned char)(Year/10))<<4)|((unsigned char)(Year%10));
   0864 75 F0 0A      [24] 2292 	mov	b,#0x0A
   0867 E5*27         [12] 2293 	mov	a,_Set_DS1307_RTC_Date_PARM_3
   0869 84            [48] 2294 	div	ab
   086A C4            [12] 2295 	swap	a
   086B 54 F0         [12] 2296 	anl	a,#0xF0
   086D FF            [12] 2297 	mov	r7,a
   086E 75 F0 0A      [24] 2298 	mov	b,#0x0A
   0871 E5*27         [12] 2299 	mov	a,_Set_DS1307_RTC_Date_PARM_3
   0873 84            [48] 2300 	div	ab
   0874 E5 F0         [12] 2301 	mov	a,b
   0876 4F            [12] 2302 	orl	a,r7
   0877 F5*15         [12] 2303 	mov	(_pRTCArray + 0x0003),a
                           2304 ;	src/DS1307.c:220: Write_Bytes_To_DS1307_RTC(0x03, pRTCArray, 4);
   0879 75*18r12      [24] 2305 	mov	_Write_Bytes_To_DS1307_RTC_PARM_2,#_pRTCArray
   087C 75*19 00      [24] 2306 	mov	(_Write_Bytes_To_DS1307_RTC_PARM_2 + 1),#0x00
   087F 75*1A 40      [24] 2307 	mov	(_Write_Bytes_To_DS1307_RTC_PARM_2 + 2),#0x40
   0882 75*1B 04      [24] 2308 	mov	_Write_Bytes_To_DS1307_RTC_PARM_3,#0x04
   0885 75 82 03      [24] 2309 	mov	dpl,#0x03
   0888 02r06r12      [24] 2310 	ljmp	_Write_Bytes_To_DS1307_RTC
                           2311 ;------------------------------------------------------------
                           2312 ;Allocation info for local variables in function 'Get_DS1307_RTC_Date'
                           2313 ;------------------------------------------------------------
                           2314 ;	src/DS1307.c:232: unsigned char* Get_DS1307_RTC_Date(void)
                           2315 ;	-----------------------------------------
                           2316 ;	 function Get_DS1307_RTC_Date
                           2317 ;	-----------------------------------------
   088B                    2318 _Get_DS1307_RTC_Date:
                           2319 ;	src/DS1307.c:235: Read_Bytes_From_DS1307_RTC(0x03, pRTCArray, 4);
   088B 75*1Cr12      [24] 2320 	mov	_Read_Bytes_From_DS1307_RTC_PARM_2,#_pRTCArray
   088E 75*1D 00      [24] 2321 	mov	(_Read_Bytes_From_DS1307_RTC_PARM_2 + 1),#0x00
   0891 75*1E 40      [24] 2322 	mov	(_Read_Bytes_From_DS1307_RTC_PARM_2 + 2),#0x40
   0894 75*1F 04      [24] 2323 	mov	_Read_Bytes_From_DS1307_RTC_PARM_3,#0x04
   0897 75*20 00      [24] 2324 	mov	(_Read_Bytes_From_DS1307_RTC_PARM_3 + 1),#0x00
   089A 75 82 03      [24] 2325 	mov	dpl,#0x03
   089D 12r06r74      [24] 2326 	lcall	_Read_Bytes_From_DS1307_RTC
                           2327 ;	src/DS1307.c:238: Temp = pRTCArray[1];
                           2328 ;	src/DS1307.c:239: pRTCArray[1] = (Temp>>4)*10 + (Temp&0x0F);
   08A0 E5*13         [12] 2329 	mov	a,(_pRTCArray + 0x0001)
   08A2 F5*16         [12] 2330 	mov	_Temp,a
   08A4 C4            [12] 2331 	swap	a
   08A5 54 0F         [12] 2332 	anl	a,#0x0F
   08A7 75 F0 0A      [24] 2333 	mov	b,#0x0A
   08AA A4            [48] 2334 	mul	ab
   08AB FF            [12] 2335 	mov	r7,a
   08AC 74 0F         [12] 2336 	mov	a,#0x0F
   08AE 55*16         [12] 2337 	anl	a,_Temp
   08B0 2F            [12] 2338 	add	a,r7
   08B1 F5*13         [12] 2339 	mov	(_pRTCArray + 0x0001),a
                           2340 ;	src/DS1307.c:242: Temp = pRTCArray[2];
                           2341 ;	src/DS1307.c:243: pRTCArray[2] = (Temp>>4)*10 + (Temp&0x0F);
   08B3 E5*14         [12] 2342 	mov	a,(_pRTCArray + 0x0002)
   08B5 F5*16         [12] 2343 	mov	_Temp,a
   08B7 C4            [12] 2344 	swap	a
   08B8 54 0F         [12] 2345 	anl	a,#0x0F
   08BA 75 F0 0A      [24] 2346 	mov	b,#0x0A
   08BD A4            [48] 2347 	mul	ab
   08BE FF            [12] 2348 	mov	r7,a
   08BF 74 0F         [12] 2349 	mov	a,#0x0F
   08C1 55*16         [12] 2350 	anl	a,_Temp
   08C3 2F            [12] 2351 	add	a,r7
   08C4 F5*14         [12] 2352 	mov	(_pRTCArray + 0x0002),a
                           2353 ;	src/DS1307.c:246: Temp = pRTCArray[3];
                           2354 ;	src/DS1307.c:247: pRTCArray[3] = (Temp>>4)*10 + (Temp&0x0F);
   08C6 E5*15         [12] 2355 	mov	a,(_pRTCArray + 0x0003)
   08C8 F5*16         [12] 2356 	mov	_Temp,a
   08CA C4            [12] 2357 	swap	a
   08CB 54 0F         [12] 2358 	anl	a,#0x0F
   08CD 75 F0 0A      [24] 2359 	mov	b,#0x0A
   08D0 A4            [48] 2360 	mul	ab
   08D1 FF            [12] 2361 	mov	r7,a
   08D2 74 0F         [12] 2362 	mov	a,#0x0F
   08D4 55*16         [12] 2363 	anl	a,_Temp
   08D6 2F            [12] 2364 	add	a,r7
   08D7 F5*15         [12] 2365 	mov	(_pRTCArray + 0x0003),a
                           2366 ;	src/DS1307.c:249: return pRTCArray;
   08D9 90r00r12      [24] 2367 	mov	dptr,#_pRTCArray
   08DC 75 F0 40      [24] 2368 	mov	b,#0x40
   08DF 22            [24] 2369 	ret
                           2370 ;------------------------------------------------------------
                           2371 ;Allocation info for local variables in function 'main'
                           2372 ;------------------------------------------------------------
                           2373 ;	src/main.c:19: void main(){
                           2374 ;	-----------------------------------------
                           2375 ;	 function main
                           2376 ;	-----------------------------------------
   08E0                    2377 _main:
                           2378 ;	src/main.c:21: nVar = 0;
   08E0 E4            [12] 2379 	clr	a
   08E1 F5*2E         [12] 2380 	mov	_nVar,a
   08E3 F5*2F         [12] 2381 	mov	(_nVar + 1),a
                           2382 ;	src/main.c:26: if( beginScreen() ){
   08E5 12r03rFC      [24] 2383 	lcall	_beginScreen
   08E8 E5 82         [12] 2384 	mov	a,dpl
   08EA 85 83 F0      [24] 2385 	mov	b,dph
   08ED 45 F0         [12] 2386 	orl	a,b
   08EF 60 02         [24] 2387 	jz	00102$
                           2388 ;	src/main.c:27: PORTA_7 = HIGH; //pull an led HIGH to indicate failiure.
   08F1 D2 87         [12] 2389 	setb	_P0_7
   08F3                    2390 00102$:
                           2391 ;	src/main.c:33: splashImage();
   08F3 12r03r6A      [24] 2392 	lcall	_splashImage
                           2393 ;	src/main.c:36: delayms( 1000 );
   08F6 90 03 E8      [24] 2394 	mov	dptr,#0x03E8
   08F9 12r04r06      [24] 2395 	lcall	_delayms
                           2396 ;	src/main.c:39: clearGLCD();
   08FC 12r00r82      [24] 2397 	lcall	_clearGLCD
                           2398 ;	src/main.c:41: setGLCDCursor( 1, 1);
   08FF 75*10 01      [24] 2399 	mov	_setGLCDCursor_PARM_2,#0x01
   0902 75*11 00      [24] 2400 	mov	(_setGLCDCursor_PARM_2 + 1),#0x00
   0905 90 00 01      [24] 2401 	mov	dptr,#0x0001
   0908 12r02rED      [24] 2402 	lcall	_setGLCDCursor
                           2403 ;	src/main.c:43: writeLine( "Detecting clock." );
   090B 90r05r9B      [24] 2404 	mov	dptr,#__str_0
   090E 75 F0 80      [24] 2405 	mov	b,#0x80
   0911 12r00rDF      [24] 2406 	lcall	_writeLine
                           2407 ;	src/main.c:47: delayms( 1000 );
   0914 90 03 E8      [24] 2408 	mov	dptr,#0x03E8
   0917 12r04r06      [24] 2409 	lcall	_delayms
                           2410 ;	src/main.c:49: Set_DS1307_RTC_Time(PM_Time, 17, 15, 59);	
   091A 75*23 11      [24] 2411 	mov	_Set_DS1307_RTC_Time_PARM_2,#0x11
   091D 75*24 0F      [24] 2412 	mov	_Set_DS1307_RTC_Time_PARM_3,#0x0F
   0920 75*25 3B      [24] 2413 	mov	_Set_DS1307_RTC_Time_PARM_4,#0x3B
   0923 75 82 01      [24] 2414 	mov	dpl,#0x01
   0926 12r07r35      [24] 2415 	lcall	_Set_DS1307_RTC_Time
                           2416 ;	src/main.c:52: Set_DS1307_RTC_Date(1, 12, 13, Friday); 	
   0929 75*26 0C      [24] 2417 	mov	_Set_DS1307_RTC_Date_PARM_2,#0x0C
   092C 75*27 0D      [24] 2418 	mov	_Set_DS1307_RTC_Date_PARM_3,#0x0D
   092F 75*28 05      [24] 2419 	mov	_Set_DS1307_RTC_Date_PARM_4,#0x05
   0932 75 82 01      [24] 2420 	mov	dpl,#0x01
   0935 12r08r25      [24] 2421 	lcall	_Set_DS1307_RTC_Date
                           2422 ;	src/main.c:53: clearGLCD();
   0938 12r00r82      [24] 2423 	lcall	_clearGLCD
                           2424 ;	src/main.c:54: setGLCDCursor( 1, 2);
   093B 75*10 02      [24] 2425 	mov	_setGLCDCursor_PARM_2,#0x02
   093E 75*11 00      [24] 2426 	mov	(_setGLCDCursor_PARM_2 + 1),#0x00
   0941 90 00 01      [24] 2427 	mov	dptr,#0x0001
   0944 12r02rED      [24] 2428 	lcall	_setGLCDCursor
                           2429 ;	src/main.c:55: writeLine("In loop now.");
   0947 90r05rAC      [24] 2430 	mov	dptr,#__str_1
   094A 75 F0 80      [24] 2431 	mov	b,#0x80
   094D 12r00rDF      [24] 2432 	lcall	_writeLine
                           2433 ;	src/main.c:56: delayms( 2000 );
   0950 90 07 D0      [24] 2434 	mov	dptr,#0x07D0
   0953 12r04r06      [24] 2435 	lcall	_delayms
                           2436 ;	src/main.c:58: while( 1 ){
   0956                    2437 00104$:
                           2438 ;	src/main.c:60: clearGLCD();
   0956 12r00r82      [24] 2439 	lcall	_clearGLCD
                           2440 ;	src/main.c:61: setGLCDCursor( 0, 0);
   0959 E4            [12] 2441 	clr	a
   095A F5*10         [12] 2442 	mov	_setGLCDCursor_PARM_2,a
   095C F5*11         [12] 2443 	mov	(_setGLCDCursor_PARM_2 + 1),a
   095E F5 82         [12] 2444 	mov	dpl,a
   0960 F5 83         [12] 2445 	mov	dph,a
   0962 12r02rED      [24] 2446 	lcall	_setGLCDCursor
                           2447 ;	src/main.c:62: ch_CharCatch = Get_DS1307_RTC_Time();
   0965 12r07rA1      [24] 2448 	lcall	_Get_DS1307_RTC_Time
   0968 85 82*29      [24] 2449 	mov	_ch_CharCatch,dpl
   096B 85 83*2A      [24] 2450 	mov	(_ch_CharCatch + 1),dph
   096E 85 F0*2B      [24] 2451 	mov	(_ch_CharCatch + 2),b
                           2452 ;	src/main.c:63: nVar = (int) (ch_CharCatch[2]/10);
   0971 74 02         [12] 2453 	mov	a,#0x02
   0973 25*29         [12] 2454 	add	a,_ch_CharCatch
   0975 FD            [12] 2455 	mov	r5,a
   0976 E4            [12] 2456 	clr	a
   0977 35*2A         [12] 2457 	addc	a,(_ch_CharCatch + 1)
   0979 FE            [12] 2458 	mov	r6,a
   097A AF*2B         [24] 2459 	mov	r7,(_ch_CharCatch + 2)
   097C 8D 82         [24] 2460 	mov	dpl,r5
   097E 8E 83         [24] 2461 	mov	dph,r6
   0980 8F F0         [24] 2462 	mov	b,r7
   0982 12r00r00      [24] 2463 	lcall	__gptrget
   0985 75 F0 0A      [24] 2464 	mov	b,#0x0A
   0988 84            [48] 2465 	div	ab
   0989 FD            [12] 2466 	mov	r5,a
   098A 8D*2E         [24] 2467 	mov	_nVar,r5
   098C 75*2F 00      [24] 2468 	mov	(_nVar + 1),#0x00
                           2469 ;	src/main.c:64: printNumber( nVar );
   098F AC*2E         [24] 2470 	mov	r4,_nVar
   0991 E5*2F         [12] 2471 	mov	a,(_nVar + 1)
   0993 FD            [12] 2472 	mov	r5,a
   0994 33            [12] 2473 	rlc	a
   0995 95 E0         [12] 2474 	subb	a,acc
   0997 FE            [12] 2475 	mov	r6,a
   0998 8C 82         [24] 2476 	mov	dpl,r4
   099A 8D 83         [24] 2477 	mov	dph,r5
   099C 8E F0         [24] 2478 	mov	b,r6
   099E 12r02r27      [24] 2479 	lcall	_printNumber
                           2480 ;	src/main.c:65: nVar = (int) (ch_CharCatch[2]%10);
   09A1 74 02         [12] 2481 	mov	a,#0x02
   09A3 25*29         [12] 2482 	add	a,_ch_CharCatch
   09A5 FD            [12] 2483 	mov	r5,a
   09A6 E4            [12] 2484 	clr	a
   09A7 35*2A         [12] 2485 	addc	a,(_ch_CharCatch + 1)
   09A9 FE            [12] 2486 	mov	r6,a
   09AA AF*2B         [24] 2487 	mov	r7,(_ch_CharCatch + 2)
   09AC 8D 82         [24] 2488 	mov	dpl,r5
   09AE 8E 83         [24] 2489 	mov	dph,r6
   09B0 8F F0         [24] 2490 	mov	b,r7
   09B2 12r00r00      [24] 2491 	lcall	__gptrget
   09B5 75 F0 0A      [24] 2492 	mov	b,#0x0A
   09B8 84            [48] 2493 	div	ab
   09B9 AD F0         [24] 2494 	mov	r5,b
   09BB 8D*2E         [24] 2495 	mov	_nVar,r5
   09BD 75*2F 00      [24] 2496 	mov	(_nVar + 1),#0x00
                           2497 ;	src/main.c:66: printNumber( nVar );
   09C0 AC*2E         [24] 2498 	mov	r4,_nVar
   09C2 E5*2F         [12] 2499 	mov	a,(_nVar + 1)
   09C4 FD            [12] 2500 	mov	r5,a
   09C5 33            [12] 2501 	rlc	a
   09C6 95 E0         [12] 2502 	subb	a,acc
   09C8 FE            [12] 2503 	mov	r6,a
   09C9 8C 82         [24] 2504 	mov	dpl,r4
   09CB 8D 83         [24] 2505 	mov	dph,r5
   09CD 8E F0         [24] 2506 	mov	b,r6
   09CF 12r02r27      [24] 2507 	lcall	_printNumber
                           2508 ;	src/main.c:67: writeLine( ":" );
   09D2 90r05rB9      [24] 2509 	mov	dptr,#__str_2
   09D5 75 F0 80      [24] 2510 	mov	b,#0x80
   09D8 12r00rDF      [24] 2511 	lcall	_writeLine
                           2512 ;	src/main.c:69: nVar = (int) (ch_CharCatch[1]/10);
   09DB 74 01         [12] 2513 	mov	a,#0x01
   09DD 25*29         [12] 2514 	add	a,_ch_CharCatch
   09DF FD            [12] 2515 	mov	r5,a
   09E0 E4            [12] 2516 	clr	a
   09E1 35*2A         [12] 2517 	addc	a,(_ch_CharCatch + 1)
   09E3 FE            [12] 2518 	mov	r6,a
   09E4 AF*2B         [24] 2519 	mov	r7,(_ch_CharCatch + 2)
   09E6 8D 82         [24] 2520 	mov	dpl,r5
   09E8 8E 83         [24] 2521 	mov	dph,r6
   09EA 8F F0         [24] 2522 	mov	b,r7
   09EC 12r00r00      [24] 2523 	lcall	__gptrget
   09EF 75 F0 0A      [24] 2524 	mov	b,#0x0A
   09F2 84            [48] 2525 	div	ab
   09F3 FD            [12] 2526 	mov	r5,a
   09F4 8D*2E         [24] 2527 	mov	_nVar,r5
   09F6 75*2F 00      [24] 2528 	mov	(_nVar + 1),#0x00
                           2529 ;	src/main.c:70: printNumber( nVar );
   09F9 AC*2E         [24] 2530 	mov	r4,_nVar
   09FB E5*2F         [12] 2531 	mov	a,(_nVar + 1)
   09FD FD            [12] 2532 	mov	r5,a
   09FE 33            [12] 2533 	rlc	a
   09FF 95 E0         [12] 2534 	subb	a,acc
   0A01 FE            [12] 2535 	mov	r6,a
   0A02 8C 82         [24] 2536 	mov	dpl,r4
   0A04 8D 83         [24] 2537 	mov	dph,r5
   0A06 8E F0         [24] 2538 	mov	b,r6
   0A08 12r02r27      [24] 2539 	lcall	_printNumber
                           2540 ;	src/main.c:71: nVar = (int) (ch_CharCatch[1]%10);
   0A0B 74 01         [12] 2541 	mov	a,#0x01
   0A0D 25*29         [12] 2542 	add	a,_ch_CharCatch
   0A0F FD            [12] 2543 	mov	r5,a
   0A10 E4            [12] 2544 	clr	a
   0A11 35*2A         [12] 2545 	addc	a,(_ch_CharCatch + 1)
   0A13 FE            [12] 2546 	mov	r6,a
   0A14 AF*2B         [24] 2547 	mov	r7,(_ch_CharCatch + 2)
   0A16 8D 82         [24] 2548 	mov	dpl,r5
   0A18 8E 83         [24] 2549 	mov	dph,r6
   0A1A 8F F0         [24] 2550 	mov	b,r7
   0A1C 12r00r00      [24] 2551 	lcall	__gptrget
   0A1F 75 F0 0A      [24] 2552 	mov	b,#0x0A
   0A22 84            [48] 2553 	div	ab
   0A23 AD F0         [24] 2554 	mov	r5,b
   0A25 8D*2E         [24] 2555 	mov	_nVar,r5
   0A27 75*2F 00      [24] 2556 	mov	(_nVar + 1),#0x00
                           2557 ;	src/main.c:72: printNumber( nVar );
   0A2A AC*2E         [24] 2558 	mov	r4,_nVar
   0A2C E5*2F         [12] 2559 	mov	a,(_nVar + 1)
   0A2E FD            [12] 2560 	mov	r5,a
   0A2F 33            [12] 2561 	rlc	a
   0A30 95 E0         [12] 2562 	subb	a,acc
   0A32 FE            [12] 2563 	mov	r6,a
   0A33 8C 82         [24] 2564 	mov	dpl,r4
   0A35 8D 83         [24] 2565 	mov	dph,r5
   0A37 8E F0         [24] 2566 	mov	b,r6
   0A39 12r02r27      [24] 2567 	lcall	_printNumber
                           2568 ;	src/main.c:73: writeLine( ":" );
   0A3C 90r05rB9      [24] 2569 	mov	dptr,#__str_2
   0A3F 75 F0 80      [24] 2570 	mov	b,#0x80
   0A42 12r00rDF      [24] 2571 	lcall	_writeLine
                           2572 ;	src/main.c:74: nVar = (int) (ch_CharCatch[0]/10);
   0A45 AD*29         [24] 2573 	mov	r5,_ch_CharCatch
   0A47 AE*2A         [24] 2574 	mov	r6,(_ch_CharCatch + 1)
   0A49 AF*2B         [24] 2575 	mov	r7,(_ch_CharCatch + 2)
   0A4B 8D 82         [24] 2576 	mov	dpl,r5
   0A4D 8E 83         [24] 2577 	mov	dph,r6
   0A4F 8F F0         [24] 2578 	mov	b,r7
   0A51 12r00r00      [24] 2579 	lcall	__gptrget
   0A54 75 F0 0A      [24] 2580 	mov	b,#0x0A
   0A57 84            [48] 2581 	div	ab
   0A58 FD            [12] 2582 	mov	r5,a
   0A59 8D*2E         [24] 2583 	mov	_nVar,r5
   0A5B 75*2F 00      [24] 2584 	mov	(_nVar + 1),#0x00
                           2585 ;	src/main.c:75: printNumber( nVar );
   0A5E AC*2E         [24] 2586 	mov	r4,_nVar
   0A60 E5*2F         [12] 2587 	mov	a,(_nVar + 1)
   0A62 FD            [12] 2588 	mov	r5,a
   0A63 33            [12] 2589 	rlc	a
   0A64 95 E0         [12] 2590 	subb	a,acc
   0A66 FE            [12] 2591 	mov	r6,a
   0A67 8C 82         [24] 2592 	mov	dpl,r4
   0A69 8D 83         [24] 2593 	mov	dph,r5
   0A6B 8E F0         [24] 2594 	mov	b,r6
   0A6D 12r02r27      [24] 2595 	lcall	_printNumber
                           2596 ;	src/main.c:76: nVar = (int) (ch_CharCatch[0]%10);
   0A70 AD*29         [24] 2597 	mov	r5,_ch_CharCatch
   0A72 AE*2A         [24] 2598 	mov	r6,(_ch_CharCatch + 1)
   0A74 AF*2B         [24] 2599 	mov	r7,(_ch_CharCatch + 2)
   0A76 8D 82         [24] 2600 	mov	dpl,r5
   0A78 8E 83         [24] 2601 	mov	dph,r6
   0A7A 8F F0         [24] 2602 	mov	b,r7
   0A7C 12r00r00      [24] 2603 	lcall	__gptrget
   0A7F 75 F0 0A      [24] 2604 	mov	b,#0x0A
   0A82 84            [48] 2605 	div	ab
   0A83 AD F0         [24] 2606 	mov	r5,b
   0A85 8D*2E         [24] 2607 	mov	_nVar,r5
   0A87 75*2F 00      [24] 2608 	mov	(_nVar + 1),#0x00
                           2609 ;	src/main.c:77: printNumber( nVar );
   0A8A AC*2E         [24] 2610 	mov	r4,_nVar
   0A8C E5*2F         [12] 2611 	mov	a,(_nVar + 1)
   0A8E FD            [12] 2612 	mov	r5,a
   0A8F 33            [12] 2613 	rlc	a
   0A90 95 E0         [12] 2614 	subb	a,acc
   0A92 FE            [12] 2615 	mov	r6,a
   0A93 8C 82         [24] 2616 	mov	dpl,r4
   0A95 8D 83         [24] 2617 	mov	dph,r5
   0A97 8E F0         [24] 2618 	mov	b,r6
   0A99 12r02r27      [24] 2619 	lcall	_printNumber
                           2620 ;	src/main.c:79: setGLCDCursor( 0, 2 );
   0A9C 75*10 02      [24] 2621 	mov	_setGLCDCursor_PARM_2,#0x02
   0A9F 75*11 00      [24] 2622 	mov	(_setGLCDCursor_PARM_2 + 1),#0x00
   0AA2 90 00 00      [24] 2623 	mov	dptr,#0x0000
   0AA5 12r02rED      [24] 2624 	lcall	_setGLCDCursor
                           2625 ;	src/main.c:80: ch_CharCatch = Get_DS1307_RTC_Date();
   0AA8 12r08r8B      [24] 2626 	lcall	_Get_DS1307_RTC_Date
   0AAB 85 82*29      [24] 2627 	mov	_ch_CharCatch,dpl
   0AAE 85 83*2A      [24] 2628 	mov	(_ch_CharCatch + 1),dph
   0AB1 85 F0*2B      [24] 2629 	mov	(_ch_CharCatch + 2),b
                           2630 ;	src/main.c:81: nVar = (int) (ch_CharCatch[1]/10);
   0AB4 74 01         [12] 2631 	mov	a,#0x01
   0AB6 25*29         [12] 2632 	add	a,_ch_CharCatch
   0AB8 FD            [12] 2633 	mov	r5,a
   0AB9 E4            [12] 2634 	clr	a
   0ABA 35*2A         [12] 2635 	addc	a,(_ch_CharCatch + 1)
   0ABC FE            [12] 2636 	mov	r6,a
   0ABD AF*2B         [24] 2637 	mov	r7,(_ch_CharCatch + 2)
   0ABF 8D 82         [24] 2638 	mov	dpl,r5
   0AC1 8E 83         [24] 2639 	mov	dph,r6
   0AC3 8F F0         [24] 2640 	mov	b,r7
   0AC5 12r00r00      [24] 2641 	lcall	__gptrget
   0AC8 75 F0 0A      [24] 2642 	mov	b,#0x0A
   0ACB 84            [48] 2643 	div	ab
   0ACC FD            [12] 2644 	mov	r5,a
   0ACD 8D*2E         [24] 2645 	mov	_nVar,r5
   0ACF 75*2F 00      [24] 2646 	mov	(_nVar + 1),#0x00
                           2647 ;	src/main.c:82: printNumber( nVar );
   0AD2 AC*2E         [24] 2648 	mov	r4,_nVar
   0AD4 E5*2F         [12] 2649 	mov	a,(_nVar + 1)
   0AD6 FD            [12] 2650 	mov	r5,a
   0AD7 33            [12] 2651 	rlc	a
   0AD8 95 E0         [12] 2652 	subb	a,acc
   0ADA FE            [12] 2653 	mov	r6,a
   0ADB 8C 82         [24] 2654 	mov	dpl,r4
   0ADD 8D 83         [24] 2655 	mov	dph,r5
   0ADF 8E F0         [24] 2656 	mov	b,r6
   0AE1 12r02r27      [24] 2657 	lcall	_printNumber
                           2658 ;	src/main.c:83: nVar = (int) (ch_CharCatch[1]%10);
   0AE4 74 01         [12] 2659 	mov	a,#0x01
   0AE6 25*29         [12] 2660 	add	a,_ch_CharCatch
   0AE8 FD            [12] 2661 	mov	r5,a
   0AE9 E4            [12] 2662 	clr	a
   0AEA 35*2A         [12] 2663 	addc	a,(_ch_CharCatch + 1)
   0AEC FE            [12] 2664 	mov	r6,a
   0AED AF*2B         [24] 2665 	mov	r7,(_ch_CharCatch + 2)
   0AEF 8D 82         [24] 2666 	mov	dpl,r5
   0AF1 8E 83         [24] 2667 	mov	dph,r6
   0AF3 8F F0         [24] 2668 	mov	b,r7
   0AF5 12r00r00      [24] 2669 	lcall	__gptrget
   0AF8 75 F0 0A      [24] 2670 	mov	b,#0x0A
   0AFB 84            [48] 2671 	div	ab
   0AFC AD F0         [24] 2672 	mov	r5,b
   0AFE 8D*2E         [24] 2673 	mov	_nVar,r5
   0B00 75*2F 00      [24] 2674 	mov	(_nVar + 1),#0x00
                           2675 ;	src/main.c:84: printNumber( nVar );
   0B03 AC*2E         [24] 2676 	mov	r4,_nVar
   0B05 E5*2F         [12] 2677 	mov	a,(_nVar + 1)
   0B07 FD            [12] 2678 	mov	r5,a
   0B08 33            [12] 2679 	rlc	a
   0B09 95 E0         [12] 2680 	subb	a,acc
   0B0B FE            [12] 2681 	mov	r6,a
   0B0C 8C 82         [24] 2682 	mov	dpl,r4
   0B0E 8D 83         [24] 2683 	mov	dph,r5
   0B10 8E F0         [24] 2684 	mov	b,r6
   0B12 12r02r27      [24] 2685 	lcall	_printNumber
                           2686 ;	src/main.c:85: writeLine( ":" );		
   0B15 90r05rB9      [24] 2687 	mov	dptr,#__str_2
   0B18 75 F0 80      [24] 2688 	mov	b,#0x80
   0B1B 12r00rDF      [24] 2689 	lcall	_writeLine
                           2690 ;	src/main.c:86: nVar = (int) (ch_CharCatch[2]/10);
   0B1E 74 02         [12] 2691 	mov	a,#0x02
   0B20 25*29         [12] 2692 	add	a,_ch_CharCatch
   0B22 FD            [12] 2693 	mov	r5,a
   0B23 E4            [12] 2694 	clr	a
   0B24 35*2A         [12] 2695 	addc	a,(_ch_CharCatch + 1)
   0B26 FE            [12] 2696 	mov	r6,a
   0B27 AF*2B         [24] 2697 	mov	r7,(_ch_CharCatch + 2)
   0B29 8D 82         [24] 2698 	mov	dpl,r5
   0B2B 8E 83         [24] 2699 	mov	dph,r6
   0B2D 8F F0         [24] 2700 	mov	b,r7
   0B2F 12r00r00      [24] 2701 	lcall	__gptrget
   0B32 75 F0 0A      [24] 2702 	mov	b,#0x0A
   0B35 84            [48] 2703 	div	ab
   0B36 FD            [12] 2704 	mov	r5,a
   0B37 8D*2E         [24] 2705 	mov	_nVar,r5
   0B39 75*2F 00      [24] 2706 	mov	(_nVar + 1),#0x00
                           2707 ;	src/main.c:87: printNumber( nVar );
   0B3C AC*2E         [24] 2708 	mov	r4,_nVar
   0B3E E5*2F         [12] 2709 	mov	a,(_nVar + 1)
   0B40 FD            [12] 2710 	mov	r5,a
   0B41 33            [12] 2711 	rlc	a
   0B42 95 E0         [12] 2712 	subb	a,acc
   0B44 FE            [12] 2713 	mov	r6,a
   0B45 8C 82         [24] 2714 	mov	dpl,r4
   0B47 8D 83         [24] 2715 	mov	dph,r5
   0B49 8E F0         [24] 2716 	mov	b,r6
   0B4B 12r02r27      [24] 2717 	lcall	_printNumber
                           2718 ;	src/main.c:88: nVar = (int) (ch_CharCatch[2]%10);
   0B4E 74 02         [12] 2719 	mov	a,#0x02
   0B50 25*29         [12] 2720 	add	a,_ch_CharCatch
   0B52 FD            [12] 2721 	mov	r5,a
   0B53 E4            [12] 2722 	clr	a
   0B54 35*2A         [12] 2723 	addc	a,(_ch_CharCatch + 1)
   0B56 FE            [12] 2724 	mov	r6,a
   0B57 AF*2B         [24] 2725 	mov	r7,(_ch_CharCatch + 2)
   0B59 8D 82         [24] 2726 	mov	dpl,r5
   0B5B 8E 83         [24] 2727 	mov	dph,r6
   0B5D 8F F0         [24] 2728 	mov	b,r7
   0B5F 12r00r00      [24] 2729 	lcall	__gptrget
   0B62 75 F0 0A      [24] 2730 	mov	b,#0x0A
   0B65 84            [48] 2731 	div	ab
   0B66 AD F0         [24] 2732 	mov	r5,b
   0B68 8D*2E         [24] 2733 	mov	_nVar,r5
   0B6A 75*2F 00      [24] 2734 	mov	(_nVar + 1),#0x00
                           2735 ;	src/main.c:89: printNumber( nVar );
   0B6D AC*2E         [24] 2736 	mov	r4,_nVar
   0B6F E5*2F         [12] 2737 	mov	a,(_nVar + 1)
   0B71 FD            [12] 2738 	mov	r5,a
   0B72 33            [12] 2739 	rlc	a
   0B73 95 E0         [12] 2740 	subb	a,acc
   0B75 FE            [12] 2741 	mov	r6,a
   0B76 8C 82         [24] 2742 	mov	dpl,r4
   0B78 8D 83         [24] 2743 	mov	dph,r5
   0B7A 8E F0         [24] 2744 	mov	b,r6
   0B7C 12r02r27      [24] 2745 	lcall	_printNumber
                           2746 ;	src/main.c:90: writeLine( ":" );
   0B7F 90r05rB9      [24] 2747 	mov	dptr,#__str_2
   0B82 75 F0 80      [24] 2748 	mov	b,#0x80
   0B85 12r00rDF      [24] 2749 	lcall	_writeLine
                           2750 ;	src/main.c:91: nVar = (int) (ch_CharCatch[3]/10);
   0B88 74 03         [12] 2751 	mov	a,#0x03
   0B8A 25*29         [12] 2752 	add	a,_ch_CharCatch
   0B8C FD            [12] 2753 	mov	r5,a
   0B8D E4            [12] 2754 	clr	a
   0B8E 35*2A         [12] 2755 	addc	a,(_ch_CharCatch + 1)
   0B90 FE            [12] 2756 	mov	r6,a
   0B91 AF*2B         [24] 2757 	mov	r7,(_ch_CharCatch + 2)
   0B93 8D 82         [24] 2758 	mov	dpl,r5
   0B95 8E 83         [24] 2759 	mov	dph,r6
   0B97 8F F0         [24] 2760 	mov	b,r7
   0B99 12r00r00      [24] 2761 	lcall	__gptrget
   0B9C 75 F0 0A      [24] 2762 	mov	b,#0x0A
   0B9F 84            [48] 2763 	div	ab
   0BA0 FD            [12] 2764 	mov	r5,a
   0BA1 8D*2E         [24] 2765 	mov	_nVar,r5
   0BA3 75*2F 00      [24] 2766 	mov	(_nVar + 1),#0x00
                           2767 ;	src/main.c:92: printNumber( nVar );
   0BA6 AC*2E         [24] 2768 	mov	r4,_nVar
   0BA8 E5*2F         [12] 2769 	mov	a,(_nVar + 1)
   0BAA FD            [12] 2770 	mov	r5,a
   0BAB 33            [12] 2771 	rlc	a
   0BAC 95 E0         [12] 2772 	subb	a,acc
   0BAE FE            [12] 2773 	mov	r6,a
   0BAF 8C 82         [24] 2774 	mov	dpl,r4
   0BB1 8D 83         [24] 2775 	mov	dph,r5
   0BB3 8E F0         [24] 2776 	mov	b,r6
   0BB5 12r02r27      [24] 2777 	lcall	_printNumber
                           2778 ;	src/main.c:93: nVar = (int) (ch_CharCatch[3]%10);
   0BB8 74 03         [12] 2779 	mov	a,#0x03
   0BBA 25*29         [12] 2780 	add	a,_ch_CharCatch
   0BBC FD            [12] 2781 	mov	r5,a
   0BBD E4            [12] 2782 	clr	a
   0BBE 35*2A         [12] 2783 	addc	a,(_ch_CharCatch + 1)
   0BC0 FE            [12] 2784 	mov	r6,a
   0BC1 AF*2B         [24] 2785 	mov	r7,(_ch_CharCatch + 2)
   0BC3 8D 82         [24] 2786 	mov	dpl,r5
   0BC5 8E 83         [24] 2787 	mov	dph,r6
   0BC7 8F F0         [24] 2788 	mov	b,r7
   0BC9 12r00r00      [24] 2789 	lcall	__gptrget
   0BCC 75 F0 0A      [24] 2790 	mov	b,#0x0A
   0BCF 84            [48] 2791 	div	ab
   0BD0 AD F0         [24] 2792 	mov	r5,b
   0BD2 8D*2E         [24] 2793 	mov	_nVar,r5
   0BD4 75*2F 00      [24] 2794 	mov	(_nVar + 1),#0x00
                           2795 ;	src/main.c:94: printNumber( nVar );
   0BD7 AC*2E         [24] 2796 	mov	r4,_nVar
   0BD9 E5*2F         [12] 2797 	mov	a,(_nVar + 1)
   0BDB FD            [12] 2798 	mov	r5,a
   0BDC 33            [12] 2799 	rlc	a
   0BDD 95 E0         [12] 2800 	subb	a,acc
   0BDF FE            [12] 2801 	mov	r6,a
   0BE0 8C 82         [24] 2802 	mov	dpl,r4
   0BE2 8D 83         [24] 2803 	mov	dph,r5
   0BE4 8E F0         [24] 2804 	mov	b,r6
   0BE6 12r02r27      [24] 2805 	lcall	_printNumber
                           2806 ;	src/main.c:97: delayms( 1000 );
   0BE9 90 03 E8      [24] 2807 	mov	dptr,#0x03E8
   0BEC 12r04r06      [24] 2808 	lcall	_delayms
   0BEF 02r09r56      [24] 2809 	ljmp	00104$
                           2810 ;------------------------------------------------------------
                           2811 ;Allocation info for local variables in function 'getCharLen'
                           2812 ;------------------------------------------------------------
                           2813 ;chVal                     Allocated to registers r5 r6 r7 
                           2814 ;------------------------------------------------------------
                           2815 ;	src/main.c:101: int getCharLen( char * chVal ){
                           2816 ;	-----------------------------------------
                           2817 ;	 function getCharLen
                           2818 ;	-----------------------------------------
   0BF2                    2819 _getCharLen:
   0BF2 AD 82         [24] 2820 	mov	r5,dpl
   0BF4 AE 83         [24] 2821 	mov	r6,dph
   0BF6 AF F0         [24] 2822 	mov	r7,b
                           2823 ;	src/main.c:103: for( i = 1; chVal[i]!='\0'; i++){
   0BF8 75*2C 01      [24] 2824 	mov	_i,#0x01
   0BFB 75*2D 00      [24] 2825 	mov	(_i + 1),#0x00
   0BFE                    2826 00103$:
   0BFE E5*2C         [12] 2827 	mov	a,_i
   0C00 2D            [12] 2828 	add	a,r5
   0C01 FA            [12] 2829 	mov	r2,a
   0C02 E5*2D         [12] 2830 	mov	a,(_i + 1)
   0C04 3E            [12] 2831 	addc	a,r6
   0C05 FB            [12] 2832 	mov	r3,a
   0C06 8F 04         [24] 2833 	mov	ar4,r7
   0C08 8A 82         [24] 2834 	mov	dpl,r2
   0C0A 8B 83         [24] 2835 	mov	dph,r3
   0C0C 8C F0         [24] 2836 	mov	b,r4
   0C0E 12r00r00      [24] 2837 	lcall	__gptrget
   0C11 FA            [12] 2838 	mov	r2,a
   0C12 60 0A         [24] 2839 	jz	00101$
   0C14 05*2C         [12] 2840 	inc	_i
   0C16 E4            [12] 2841 	clr	a
   0C17 B5*2C E4      [24] 2842 	cjne	a,_i,00103$
   0C1A 05*2D         [12] 2843 	inc	(_i + 1)
   0C1C 80 E0         [24] 2844 	sjmp	00103$
   0C1E                    2845 00101$:
                           2846 ;	src/main.c:105: return i;
   0C1E 85*2C 82      [24] 2847 	mov	dpl,_i
   0C21 85*2D 83      [24] 2848 	mov	dph,(_i + 1)
   0C24 22            [24] 2849 	ret
                           2850 	.area CSEG    (CODE)
                           2851 	.area CONST   (CODE)
   0000                    2852 _glcdNumberSystemFont:
   0000 FF                 2853 	.db #0xFF	; 255
   0001 81                 2854 	.db #0x81	; 129
   0002 81                 2855 	.db #0x81	; 129
   0003 FF                 2856 	.db #0xFF	; 255
   0004 00                 2857 	.db #0x00	; 0
   0005 FF                 2858 	.db #0xFF	; 255
   0006 00                 2859 	.db #0x00	; 0
   0007 00                 2860 	.db #0x00	; 0
   0008 F9                 2861 	.db #0xF9	; 249
   0009 89                 2862 	.db #0x89	; 137
   000A 89                 2863 	.db #0x89	; 137
   000B 8F                 2864 	.db #0x8F	; 143
   000C 89                 2865 	.db #0x89	; 137
   000D 89                 2866 	.db #0x89	; 137
   000E 89                 2867 	.db #0x89	; 137
   000F FF                 2868 	.db #0xFF	; 255
   0010 0F                 2869 	.db #0x0F	; 15
   0011 08                 2870 	.db #0x08	; 8
   0012 08                 2871 	.db #0x08	; 8
   0013 FF                 2872 	.db #0xFF	; 255
   0014 8F                 2873 	.db #0x8F	; 143
   0015 89                 2874 	.db #0x89	; 137
   0016 89                 2875 	.db #0x89	; 137
   0017 F9                 2876 	.db #0xF9	; 249
   0018 FF                 2877 	.db #0xFF	; 255
   0019 89                 2878 	.db #0x89	; 137
   001A 89                 2879 	.db #0x89	; 137
   001B F9                 2880 	.db #0xF9	; 249
   001C 01                 2881 	.db #0x01	; 1
   001D 01                 2882 	.db #0x01	; 1
   001E 01                 2883 	.db #0x01	; 1
   001F FF                 2884 	.db #0xFF	; 255
   0020 FF                 2885 	.db #0xFF	; 255
   0021 89                 2886 	.db #0x89	; 137
   0022 89                 2887 	.db #0x89	; 137
   0023 FF                 2888 	.db #0xFF	; 255
   0024 9F                 2889 	.db #0x9F	; 159
   0025 91                 2890 	.db #0x91	; 145
   0026 91                 2891 	.db #0x91	; 145
   0027 FF                 2892 	.db #0xFF	; 255
   0028                    2893 _glcdCharSystemFont:
   0028 7C                 2894 	.db #0x7C	; 124
   0029 7E                 2895 	.db #0x7E	; 126
   002A 13                 2896 	.db #0x13	; 19
   002B 13                 2897 	.db #0x13	; 19
   002C 7E                 2898 	.db #0x7E	; 126
   002D 7C                 2899 	.db #0x7C	; 124
   002E 00                 2900 	.db #0x00	; 0
   002F 41                 2901 	.db #0x41	; 65	'A'
   0030 7F                 2902 	.db #0x7F	; 127
   0031 7F                 2903 	.db #0x7F	; 127
   0032 49                 2904 	.db #0x49	; 73	'I'
   0033 49                 2905 	.db #0x49	; 73	'I'
   0034 7F                 2906 	.db #0x7F	; 127
   0035 36                 2907 	.db #0x36	; 54	'6'
   0036 1C                 2908 	.db #0x1C	; 28
   0037 3E                 2909 	.db #0x3E	; 62
   0038 63                 2910 	.db #0x63	; 99	'c'
   0039 41                 2911 	.db #0x41	; 65	'A'
   003A 41                 2912 	.db #0x41	; 65	'A'
   003B 63                 2913 	.db #0x63	; 99	'c'
   003C 22                 2914 	.db #0x22	; 34
   003D 41                 2915 	.db #0x41	; 65	'A'
   003E 7F                 2916 	.db #0x7F	; 127
   003F 7F                 2917 	.db #0x7F	; 127
   0040 41                 2918 	.db #0x41	; 65	'A'
   0041 63                 2919 	.db #0x63	; 99	'c'
   0042 3E                 2920 	.db #0x3E	; 62
   0043 1C                 2921 	.db #0x1C	; 28
   0044 41                 2922 	.db #0x41	; 65	'A'
   0045 7F                 2923 	.db #0x7F	; 127
   0046 7F                 2924 	.db #0x7F	; 127
   0047 49                 2925 	.db #0x49	; 73	'I'
   0048 5D                 2926 	.db #0x5D	; 93
   0049 41                 2927 	.db #0x41	; 65	'A'
   004A 63                 2928 	.db #0x63	; 99	'c'
   004B 41                 2929 	.db #0x41	; 65	'A'
   004C 7F                 2930 	.db #0x7F	; 127
   004D 7F                 2931 	.db #0x7F	; 127
   004E 49                 2932 	.db #0x49	; 73	'I'
   004F 1D                 2933 	.db #0x1D	; 29
   0050 01                 2934 	.db #0x01	; 1
   0051 03                 2935 	.db #0x03	; 3
   0052 1C                 2936 	.db #0x1C	; 28
   0053 3E                 2937 	.db #0x3E	; 62
   0054 63                 2938 	.db #0x63	; 99	'c'
   0055 41                 2939 	.db #0x41	; 65	'A'
   0056 51                 2940 	.db #0x51	; 81	'Q'
   0057 73                 2941 	.db #0x73	; 115	's'
   0058 72                 2942 	.db #0x72	; 114	'r'
   0059 7F                 2943 	.db #0x7F	; 127
   005A 7F                 2944 	.db #0x7F	; 127
   005B 08                 2945 	.db #0x08	; 8
   005C 08                 2946 	.db #0x08	; 8
   005D 7F                 2947 	.db #0x7F	; 127
   005E 7F                 2948 	.db #0x7F	; 127
   005F 00                 2949 	.db #0x00	; 0
   0060 00                 2950 	.db #0x00	; 0
   0061 41                 2951 	.db #0x41	; 65	'A'
   0062 7F                 2952 	.db #0x7F	; 127
   0063 7F                 2953 	.db #0x7F	; 127
   0064 41                 2954 	.db #0x41	; 65	'A'
   0065 00                 2955 	.db #0x00	; 0
   0066 00                 2956 	.db #0x00	; 0
   0067 30                 2957 	.db #0x30	; 48	'0'
   0068 70                 2958 	.db #0x70	; 112	'p'
   0069 40                 2959 	.db #0x40	; 64
   006A 41                 2960 	.db #0x41	; 65	'A'
   006B 7F                 2961 	.db #0x7F	; 127
   006C 3F                 2962 	.db #0x3F	; 63
   006D 01                 2963 	.db #0x01	; 1
   006E 41                 2964 	.db #0x41	; 65	'A'
   006F 7F                 2965 	.db #0x7F	; 127
   0070 7F                 2966 	.db #0x7F	; 127
   0071 08                 2967 	.db #0x08	; 8
   0072 1C                 2968 	.db #0x1C	; 28
   0073 77                 2969 	.db #0x77	; 119	'w'
   0074 63                 2970 	.db #0x63	; 99	'c'
   0075 41                 2971 	.db #0x41	; 65	'A'
   0076 7F                 2972 	.db #0x7F	; 127
   0077 7F                 2973 	.db #0x7F	; 127
   0078 41                 2974 	.db #0x41	; 65	'A'
   0079 40                 2975 	.db #0x40	; 64
   007A 60                 2976 	.db #0x60	; 96
   007B 70                 2977 	.db #0x70	; 112	'p'
   007C 7F                 2978 	.db #0x7F	; 127
   007D 7F                 2979 	.db #0x7F	; 127
   007E 0E                 2980 	.db #0x0E	; 14
   007F 1C                 2981 	.db #0x1C	; 28
   0080 0E                 2982 	.db #0x0E	; 14
   0081 7F                 2983 	.db #0x7F	; 127
   0082 7F                 2984 	.db #0x7F	; 127
   0083 7F                 2985 	.db #0x7F	; 127
   0084 7F                 2986 	.db #0x7F	; 127
   0085 06                 2987 	.db #0x06	; 6
   0086 0C                 2988 	.db #0x0C	; 12
   0087 18                 2989 	.db #0x18	; 24
   0088 7F                 2990 	.db #0x7F	; 127
   0089 7F                 2991 	.db #0x7F	; 127
   008A 1C                 2992 	.db #0x1C	; 28
   008B 3E                 2993 	.db #0x3E	; 62
   008C 63                 2994 	.db #0x63	; 99	'c'
   008D 41                 2995 	.db #0x41	; 65	'A'
   008E 63                 2996 	.db #0x63	; 99	'c'
   008F 3E                 2997 	.db #0x3E	; 62
   0090 1C                 2998 	.db #0x1C	; 28
   0091 41                 2999 	.db #0x41	; 65	'A'
   0092 7F                 3000 	.db #0x7F	; 127
   0093 7F                 3001 	.db #0x7F	; 127
   0094 49                 3002 	.db #0x49	; 73	'I'
   0095 09                 3003 	.db #0x09	; 9
   0096 0F                 3004 	.db #0x0F	; 15
   0097 06                 3005 	.db #0x06	; 6
   0098 1E                 3006 	.db #0x1E	; 30
   0099 3F                 3007 	.db #0x3F	; 63
   009A 21                 3008 	.db #0x21	; 33
   009B 71                 3009 	.db #0x71	; 113	'q'
   009C 7F                 3010 	.db #0x7F	; 127
   009D 5E                 3011 	.db #0x5E	; 94
   009E 00                 3012 	.db #0x00	; 0
   009F 41                 3013 	.db #0x41	; 65	'A'
   00A0 7F                 3014 	.db #0x7F	; 127
   00A1 7F                 3015 	.db #0x7F	; 127
   00A2 09                 3016 	.db #0x09	; 9
   00A3 19                 3017 	.db #0x19	; 25
   00A4 7F                 3018 	.db #0x7F	; 127
   00A5 66                 3019 	.db #0x66	; 102	'f'
   00A6 26                 3020 	.db #0x26	; 38
   00A7 6F                 3021 	.db #0x6F	; 111	'o'
   00A8 4D                 3022 	.db #0x4D	; 77	'M'
   00A9 59                 3023 	.db #0x59	; 89	'Y'
   00AA 73                 3024 	.db #0x73	; 115	's'
   00AB 32                 3025 	.db #0x32	; 50	'2'
   00AC 00                 3026 	.db #0x00	; 0
   00AD 03                 3027 	.db #0x03	; 3
   00AE 41                 3028 	.db #0x41	; 65	'A'
   00AF 7F                 3029 	.db #0x7F	; 127
   00B0 7F                 3030 	.db #0x7F	; 127
   00B1 41                 3031 	.db #0x41	; 65	'A'
   00B2 03                 3032 	.db #0x03	; 3
   00B3 00                 3033 	.db #0x00	; 0
   00B4 7F                 3034 	.db #0x7F	; 127
   00B5 7F                 3035 	.db #0x7F	; 127
   00B6 40                 3036 	.db #0x40	; 64
   00B7 40                 3037 	.db #0x40	; 64
   00B8 7F                 3038 	.db #0x7F	; 127
   00B9 7F                 3039 	.db #0x7F	; 127
   00BA 00                 3040 	.db #0x00	; 0
   00BB 1F                 3041 	.db #0x1F	; 31
   00BC 3F                 3042 	.db #0x3F	; 63
   00BD 60                 3043 	.db #0x60	; 96
   00BE 60                 3044 	.db #0x60	; 96
   00BF 3F                 3045 	.db #0x3F	; 63
   00C0 1F                 3046 	.db #0x1F	; 31
   00C1 00                 3047 	.db #0x00	; 0
   00C2 7F                 3048 	.db #0x7F	; 127
   00C3 7F                 3049 	.db #0x7F	; 127
   00C4 30                 3050 	.db #0x30	; 48	'0'
   00C5 18                 3051 	.db #0x18	; 24
   00C6 30                 3052 	.db #0x30	; 48	'0'
   00C7 7F                 3053 	.db #0x7F	; 127
   00C8 7F                 3054 	.db #0x7F	; 127
   00C9 43                 3055 	.db #0x43	; 67	'C'
   00CA 67                 3056 	.db #0x67	; 103	'g'
   00CB 3C                 3057 	.db #0x3C	; 60
   00CC 18                 3058 	.db #0x18	; 24
   00CD 3C                 3059 	.db #0x3C	; 60
   00CE 67                 3060 	.db #0x67	; 103	'g'
   00CF 43                 3061 	.db #0x43	; 67	'C'
   00D0 07                 3062 	.db #0x07	; 7
   00D1 4F                 3063 	.db #0x4F	; 79	'O'
   00D2 78                 3064 	.db #0x78	; 120	'x'
   00D3 78                 3065 	.db #0x78	; 120	'x'
   00D4 4F                 3066 	.db #0x4F	; 79	'O'
   00D5 07                 3067 	.db #0x07	; 7
   00D6 00                 3068 	.db #0x00	; 0
   00D7 47                 3069 	.db #0x47	; 71	'G'
   00D8 63                 3070 	.db #0x63	; 99	'c'
   00D9 71                 3071 	.db #0x71	; 113	'q'
   00DA 59                 3072 	.db #0x59	; 89	'Y'
   00DB 4D                 3073 	.db #0x4D	; 77	'M'
   00DC 67                 3074 	.db #0x67	; 103	'g'
   00DD 73                 3075 	.db #0x73	; 115	's'
   00DE                    3076 _glcdSmallCharSystemFont:
   00DE 74                 3077 	.db #0x74	; 116	't'
   00DF 54                 3078 	.db #0x54	; 84	'T'
   00E0 54                 3079 	.db #0x54	; 84	'T'
   00E1 7C                 3080 	.db #0x7C	; 124
   00E2 00                 3081 	.db #0x00	; 0
   00E3 00                 3082 	.db #0x00	; 0
   00E4 00                 3083 	.db #0x00	; 0
   00E5 00                 3084 	.db #0x00	; 0
   00E6 7F                 3085 	.db #0x7F	; 127
   00E7 44                 3086 	.db #0x44	; 68	'D'
   00E8 44                 3087 	.db #0x44	; 68	'D'
   00E9 38                 3088 	.db #0x38	; 56	'8'
   00EA 00                 3089 	.db #0x00	; 0
   00EB 00                 3090 	.db #0x00	; 0
   00EC 00                 3091 	.db #0x00	; 0
   00ED 38                 3092 	.db #0x38	; 56	'8'
   00EE 44                 3093 	.db #0x44	; 68	'D'
   00EF 44                 3094 	.db #0x44	; 68	'D'
   00F0 44                 3095 	.db #0x44	; 68	'D'
   00F1 00                 3096 	.db #0x00	; 0
   00F2 00                 3097 	.db #0x00	; 0
   00F3 00                 3098 	.db #0x00	; 0
   00F4 38                 3099 	.db #0x38	; 56	'8'
   00F5 44                 3100 	.db #0x44	; 68	'D'
   00F6 44                 3101 	.db #0x44	; 68	'D'
   00F7 7F                 3102 	.db #0x7F	; 127
   00F8 00                 3103 	.db #0x00	; 0
   00F9 00                 3104 	.db #0x00	; 0
   00FA 00                 3105 	.db #0x00	; 0
   00FB 3C                 3106 	.db #0x3C	; 60
   00FC 52                 3107 	.db #0x52	; 82	'R'
   00FD 52                 3108 	.db #0x52	; 82	'R'
   00FE 4C                 3109 	.db #0x4C	; 76	'L'
   00FF 00                 3110 	.db #0x00	; 0
   0100 00                 3111 	.db #0x00	; 0
   0101 04                 3112 	.db #0x04	; 4
   0102 7F                 3113 	.db #0x7F	; 127
   0103 05                 3114 	.db #0x05	; 5
   0104 01                 3115 	.db #0x01	; 1
   0105 00                 3116 	.db #0x00	; 0
   0106 00                 3117 	.db #0x00	; 0
   0107 00                 3118 	.db #0x00	; 0
   0108 7E                 3119 	.db #0x7E	; 126
   0109 4A                 3120 	.db #0x4A	; 74	'J'
   010A 4A                 3121 	.db #0x4A	; 74	'J'
   010B 6E                 3122 	.db #0x6E	; 110	'n'
   010C 02                 3123 	.db #0x02	; 2
   010D 00                 3124 	.db #0x00	; 0
   010E 00                 3125 	.db #0x00	; 0
   010F 00                 3126 	.db #0x00	; 0
   0110 7F                 3127 	.db #0x7F	; 127
   0111 04                 3128 	.db #0x04	; 4
   0112 04                 3129 	.db #0x04	; 4
   0113 78                 3130 	.db #0x78	; 120	'x'
   0114 00                 3131 	.db #0x00	; 0
   0115 00                 3132 	.db #0x00	; 0
   0116 00                 3133 	.db #0x00	; 0
   0117 7D                 3134 	.db #0x7D	; 125
   0118 00                 3135 	.db #0x00	; 0
   0119 00                 3136 	.db #0x00	; 0
   011A 00                 3137 	.db #0x00	; 0
   011B 00                 3138 	.db #0x00	; 0
   011C 00                 3139 	.db #0x00	; 0
   011D 00                 3140 	.db #0x00	; 0
   011E 80                 3141 	.db #0x80	; 128
   011F 80                 3142 	.db #0x80	; 128
   0120 7D                 3143 	.db #0x7D	; 125
   0121 00                 3144 	.db #0x00	; 0
   0122 00                 3145 	.db #0x00	; 0
   0123 00                 3146 	.db #0x00	; 0
   0124 00                 3147 	.db #0x00	; 0
   0125 7F                 3148 	.db #0x7F	; 127
   0126 10                 3149 	.db #0x10	; 16
   0127 28                 3150 	.db #0x28	; 40
   0128 44                 3151 	.db #0x44	; 68	'D'
   0129 00                 3152 	.db #0x00	; 0
   012A 00                 3153 	.db #0x00	; 0
   012B 00                 3154 	.db #0x00	; 0
   012C 00                 3155 	.db #0x00	; 0
   012D 41                 3156 	.db #0x41	; 65	'A'
   012E 7F                 3157 	.db #0x7F	; 127
   012F 40                 3158 	.db #0x40	; 64
   0130 60                 3159 	.db #0x60	; 96
   0131 00                 3160 	.db #0x00	; 0
   0132 7C                 3161 	.db #0x7C	; 124
   0133 04                 3162 	.db #0x04	; 4
   0134 04                 3163 	.db #0x04	; 4
   0135 7C                 3164 	.db #0x7C	; 124
   0136 04                 3165 	.db #0x04	; 4
   0137 04                 3166 	.db #0x04	; 4
   0138 7C                 3167 	.db #0x7C	; 124
   0139 00                 3168 	.db #0x00	; 0
   013A 7C                 3169 	.db #0x7C	; 124
   013B 04                 3170 	.db #0x04	; 4
   013C 04                 3171 	.db #0x04	; 4
   013D 7C                 3172 	.db #0x7C	; 124
   013E 00                 3173 	.db #0x00	; 0
   013F 00                 3174 	.db #0x00	; 0
   0140 00                 3175 	.db #0x00	; 0
   0141 7C                 3176 	.db #0x7C	; 124
   0142 44                 3177 	.db #0x44	; 68	'D'
   0143 44                 3178 	.db #0x44	; 68	'D'
   0144 7C                 3179 	.db #0x7C	; 124
   0145 00                 3180 	.db #0x00	; 0
   0146 00                 3181 	.db #0x00	; 0
   0147 81                 3182 	.db #0x81	; 129
   0148 FF                 3183 	.db #0xFF	; 255
   0149 92                 3184 	.db #0x92	; 146
   014A 12                 3185 	.db #0x12	; 18
   014B 0C                 3186 	.db #0x0C	; 12
   014C 00                 3187 	.db #0x00	; 0
   014D 00                 3188 	.db #0x00	; 0
   014E 00                 3189 	.db #0x00	; 0
   014F 0E                 3190 	.db #0x0E	; 14
   0150 11                 3191 	.db #0x11	; 17
   0151 91                 3192 	.db #0x91	; 145
   0152 F1                 3193 	.db #0xF1	; 241
   0153 FF                 3194 	.db #0xFF	; 255
   0154 81                 3195 	.db #0x81	; 129
   0155 00                 3196 	.db #0x00	; 0
   0156 7C                 3197 	.db #0x7C	; 124
   0157 04                 3198 	.db #0x04	; 4
   0158 04                 3199 	.db #0x04	; 4
   0159 00                 3200 	.db #0x00	; 0
   015A 00                 3201 	.db #0x00	; 0
   015B 00                 3202 	.db #0x00	; 0
   015C 4C                 3203 	.db #0x4C	; 76	'L'
   015D 54                 3204 	.db #0x54	; 84	'T'
   015E 74                 3205 	.db #0x74	; 116	't'
   015F 00                 3206 	.db #0x00	; 0
   0160 00                 3207 	.db #0x00	; 0
   0161 00                 3208 	.db #0x00	; 0
   0162 00                 3209 	.db #0x00	; 0
   0163 04                 3210 	.db #0x04	; 4
   0164 7E                 3211 	.db #0x7E	; 126
   0165 44                 3212 	.db #0x44	; 68	'D'
   0166 00                 3213 	.db #0x00	; 0
   0167 00                 3214 	.db #0x00	; 0
   0168 00                 3215 	.db #0x00	; 0
   0169 00                 3216 	.db #0x00	; 0
   016A 00                 3217 	.db #0x00	; 0
   016B 7C                 3218 	.db #0x7C	; 124
   016C 40                 3219 	.db #0x40	; 64
   016D 40                 3220 	.db #0x40	; 64
   016E 7C                 3221 	.db #0x7C	; 124
   016F 00                 3222 	.db #0x00	; 0
   0170 00                 3223 	.db #0x00	; 0
   0171 04                 3224 	.db #0x04	; 4
   0172 18                 3225 	.db #0x18	; 24
   0173 60                 3226 	.db #0x60	; 96
   0174 62                 3227 	.db #0x62	; 98	'b'
   0175 1C                 3228 	.db #0x1C	; 28
   0176 00                 3229 	.db #0x00	; 0
   0177 00                 3230 	.db #0x00	; 0
   0178 04                 3231 	.db #0x04	; 4
   0179 38                 3232 	.db #0x38	; 56	'8'
   017A 60                 3233 	.db #0x60	; 96
   017B 3C                 3234 	.db #0x3C	; 60
   017C 3C                 3235 	.db #0x3C	; 60
   017D 61                 3236 	.db #0x61	; 97	'a'
   017E 3E                 3237 	.db #0x3E	; 62
   017F 00                 3238 	.db #0x00	; 0
   0180 44                 3239 	.db #0x44	; 68	'D'
   0181 38                 3240 	.db #0x38	; 56	'8'
   0182 38                 3241 	.db #0x38	; 56	'8'
   0183 44                 3242 	.db #0x44	; 68	'D'
   0184 00                 3243 	.db #0x00	; 0
   0185 00                 3244 	.db #0x00	; 0
   0186 42                 3245 	.db #0x42	; 66	'B'
   0187 8C                 3246 	.db #0x8C	; 140
   0188 70                 3247 	.db #0x70	; 112	'p'
   0189 0C                 3248 	.db #0x0C	; 12
   018A 02                 3249 	.db #0x02	; 2
   018B 00                 3250 	.db #0x00	; 0
   018C 00                 3251 	.db #0x00	; 0
   018D 64                 3252 	.db #0x64	; 100	'd'
   018E 74                 3253 	.db #0x74	; 116	't'
   018F 5C                 3254 	.db #0x5C	; 92
   0190 44                 3255 	.db #0x44	; 68	'D'
   0191 00                 3256 	.db #0x00	; 0
   0192 00                 3257 	.db #0x00	; 0
   0193 00                 3258 	.db #0x00	; 0
   0194 00                 3259 	.db #0x00	; 0
   0195 0C                 3260 	.db #0x0C	; 12
   0196 0C                 3261 	.db #0x0C	; 12
   0197 00                 3262 	.db #0x00	; 0
   0198 0C                 3263 	.db #0x0C	; 12
   0199 0C                 3264 	.db #0x0C	; 12
   019A 00                 3265 	.db #0x00	; 0
   019B                    3266 _welcomeScreenImage:
   019B 00                 3267 	.db #0x00	; 0
   019C 00                 3268 	.db #0x00	; 0
   019D 00                 3269 	.db #0x00	; 0
   019E 00                 3270 	.db #0x00	; 0
   019F 00                 3271 	.db #0x00	; 0
   01A0 00                 3272 	.db #0x00	; 0
   01A1 00                 3273 	.db #0x00	; 0
   01A2 00                 3274 	.db #0x00	; 0
   01A3 00                 3275 	.db #0x00	; 0
   01A4 00                 3276 	.db #0x00	; 0
   01A5 00                 3277 	.db #0x00	; 0
   01A6 00                 3278 	.db #0x00	; 0
   01A7 00                 3279 	.db #0x00	; 0
   01A8 00                 3280 	.db #0x00	; 0
   01A9 00                 3281 	.db #0x00	; 0
   01AA 00                 3282 	.db #0x00	; 0
   01AB 00                 3283 	.db #0x00	; 0
   01AC 00                 3284 	.db #0x00	; 0
   01AD 00                 3285 	.db #0x00	; 0
   01AE 00                 3286 	.db #0x00	; 0
   01AF 00                 3287 	.db #0x00	; 0
   01B0 00                 3288 	.db #0x00	; 0
   01B1 00                 3289 	.db #0x00	; 0
   01B2 00                 3290 	.db #0x00	; 0
   01B3 00                 3291 	.db #0x00	; 0
   01B4 00                 3292 	.db #0x00	; 0
   01B5 00                 3293 	.db #0x00	; 0
   01B6 00                 3294 	.db #0x00	; 0
   01B7 00                 3295 	.db #0x00	; 0
   01B8 00                 3296 	.db #0x00	; 0
   01B9 00                 3297 	.db #0x00	; 0
   01BA 00                 3298 	.db #0x00	; 0
   01BB 00                 3299 	.db #0x00	; 0
   01BC 00                 3300 	.db #0x00	; 0
   01BD 00                 3301 	.db #0x00	; 0
   01BE 00                 3302 	.db #0x00	; 0
   01BF 00                 3303 	.db #0x00	; 0
   01C0 00                 3304 	.db #0x00	; 0
   01C1 00                 3305 	.db #0x00	; 0
   01C2 00                 3306 	.db #0x00	; 0
   01C3 00                 3307 	.db #0x00	; 0
   01C4 00                 3308 	.db #0x00	; 0
   01C5 00                 3309 	.db #0x00	; 0
   01C6 00                 3310 	.db #0x00	; 0
   01C7 00                 3311 	.db #0x00	; 0
   01C8 00                 3312 	.db #0x00	; 0
   01C9 00                 3313 	.db #0x00	; 0
   01CA 00                 3314 	.db #0x00	; 0
   01CB 00                 3315 	.db #0x00	; 0
   01CC 00                 3316 	.db #0x00	; 0
   01CD 00                 3317 	.db #0x00	; 0
   01CE 00                 3318 	.db #0x00	; 0
   01CF 00                 3319 	.db #0x00	; 0
   01D0 00                 3320 	.db #0x00	; 0
   01D1 00                 3321 	.db #0x00	; 0
   01D2 00                 3322 	.db #0x00	; 0
   01D3 00                 3323 	.db #0x00	; 0
   01D4 00                 3324 	.db #0x00	; 0
   01D5 00                 3325 	.db #0x00	; 0
   01D6 00                 3326 	.db #0x00	; 0
   01D7 00                 3327 	.db #0x00	; 0
   01D8 00                 3328 	.db #0x00	; 0
   01D9 00                 3329 	.db #0x00	; 0
   01DA 00                 3330 	.db #0x00	; 0
   01DB 00                 3331 	.db #0x00	; 0
   01DC 00                 3332 	.db #0x00	; 0
   01DD 00                 3333 	.db #0x00	; 0
   01DE 00                 3334 	.db #0x00	; 0
   01DF 00                 3335 	.db #0x00	; 0
   01E0 00                 3336 	.db #0x00	; 0
   01E1 00                 3337 	.db #0x00	; 0
   01E2 00                 3338 	.db #0x00	; 0
   01E3 00                 3339 	.db #0x00	; 0
   01E4 00                 3340 	.db #0x00	; 0
   01E5 00                 3341 	.db #0x00	; 0
   01E6 00                 3342 	.db #0x00	; 0
   01E7 00                 3343 	.db #0x00	; 0
   01E8 00                 3344 	.db #0x00	; 0
   01E9 00                 3345 	.db #0x00	; 0
   01EA 00                 3346 	.db #0x00	; 0
   01EB 00                 3347 	.db #0x00	; 0
   01EC 00                 3348 	.db #0x00	; 0
   01ED 00                 3349 	.db #0x00	; 0
   01EE 00                 3350 	.db #0x00	; 0
   01EF 00                 3351 	.db #0x00	; 0
   01F0 00                 3352 	.db #0x00	; 0
   01F1 00                 3353 	.db #0x00	; 0
   01F2 00                 3354 	.db #0x00	; 0
   01F3 00                 3355 	.db #0x00	; 0
   01F4 00                 3356 	.db #0x00	; 0
   01F5 00                 3357 	.db #0x00	; 0
   01F6 00                 3358 	.db #0x00	; 0
   01F7 00                 3359 	.db #0x00	; 0
   01F8 00                 3360 	.db #0x00	; 0
   01F9 00                 3361 	.db #0x00	; 0
   01FA 00                 3362 	.db #0x00	; 0
   01FB 00                 3363 	.db #0x00	; 0
   01FC 00                 3364 	.db #0x00	; 0
   01FD 00                 3365 	.db #0x00	; 0
   01FE 00                 3366 	.db #0x00	; 0
   01FF 00                 3367 	.db #0x00	; 0
   0200 00                 3368 	.db #0x00	; 0
   0201 00                 3369 	.db #0x00	; 0
   0202 00                 3370 	.db #0x00	; 0
   0203 00                 3371 	.db #0x00	; 0
   0204 00                 3372 	.db #0x00	; 0
   0205 00                 3373 	.db #0x00	; 0
   0206 00                 3374 	.db #0x00	; 0
   0207 00                 3375 	.db #0x00	; 0
   0208 00                 3376 	.db #0x00	; 0
   0209 00                 3377 	.db #0x00	; 0
   020A 00                 3378 	.db #0x00	; 0
   020B 00                 3379 	.db #0x00	; 0
   020C 00                 3380 	.db #0x00	; 0
   020D 00                 3381 	.db #0x00	; 0
   020E 00                 3382 	.db #0x00	; 0
   020F 00                 3383 	.db #0x00	; 0
   0210 00                 3384 	.db #0x00	; 0
   0211 00                 3385 	.db #0x00	; 0
   0212 00                 3386 	.db #0x00	; 0
   0213 00                 3387 	.db #0x00	; 0
   0214 00                 3388 	.db #0x00	; 0
   0215 00                 3389 	.db #0x00	; 0
   0216 00                 3390 	.db #0x00	; 0
   0217 00                 3391 	.db #0x00	; 0
   0218 00                 3392 	.db #0x00	; 0
   0219 00                 3393 	.db #0x00	; 0
   021A 00                 3394 	.db #0x00	; 0
   021B 00                 3395 	.db #0x00	; 0
   021C 00                 3396 	.db #0x00	; 0
   021D 00                 3397 	.db #0x00	; 0
   021E 00                 3398 	.db #0x00	; 0
   021F 00                 3399 	.db #0x00	; 0
   0220 C0                 3400 	.db #0xC0	; 192
   0221 E0                 3401 	.db #0xE0	; 224
   0222 E0                 3402 	.db #0xE0	; 224
   0223 F0                 3403 	.db #0xF0	; 240
   0224 70                 3404 	.db #0x70	; 112	'p'
   0225 70                 3405 	.db #0x70	; 112	'p'
   0226 70                 3406 	.db #0x70	; 112	'p'
   0227 70                 3407 	.db #0x70	; 112	'p'
   0228 70                 3408 	.db #0x70	; 112	'p'
   0229 E0                 3409 	.db #0xE0	; 224
   022A E0                 3410 	.db #0xE0	; 224
   022B 00                 3411 	.db #0x00	; 0
   022C 00                 3412 	.db #0x00	; 0
   022D 00                 3413 	.db #0x00	; 0
   022E 00                 3414 	.db #0x00	; 0
   022F 00                 3415 	.db #0x00	; 0
   0230 00                 3416 	.db #0x00	; 0
   0231 00                 3417 	.db #0x00	; 0
   0232 00                 3418 	.db #0x00	; 0
   0233 00                 3419 	.db #0x00	; 0
   0234 00                 3420 	.db #0x00	; 0
   0235 00                 3421 	.db #0x00	; 0
   0236 00                 3422 	.db #0x00	; 0
   0237 00                 3423 	.db #0x00	; 0
   0238 00                 3424 	.db #0x00	; 0
   0239 00                 3425 	.db #0x00	; 0
   023A 00                 3426 	.db #0x00	; 0
   023B 00                 3427 	.db #0x00	; 0
   023C 00                 3428 	.db #0x00	; 0
   023D 00                 3429 	.db #0x00	; 0
   023E 00                 3430 	.db #0x00	; 0
   023F 00                 3431 	.db #0x00	; 0
   0240 00                 3432 	.db #0x00	; 0
   0241 E0                 3433 	.db #0xE0	; 224
   0242 F8                 3434 	.db #0xF8	; 248
   0243 F8                 3435 	.db #0xF8	; 248
   0244 7C                 3436 	.db #0x7C	; 124
   0245 1C                 3437 	.db #0x1C	; 28
   0246 1C                 3438 	.db #0x1C	; 28
   0247 1C                 3439 	.db #0x1C	; 28
   0248 1C                 3440 	.db #0x1C	; 28
   0249 00                 3441 	.db #0x00	; 0
   024A 00                 3442 	.db #0x00	; 0
   024B E0                 3443 	.db #0xE0	; 224
   024C E0                 3444 	.db #0xE0	; 224
   024D E0                 3445 	.db #0xE0	; 224
   024E 60                 3446 	.db #0x60	; 96
   024F 00                 3447 	.db #0x00	; 0
   0250 00                 3448 	.db #0x00	; 0
   0251 00                 3449 	.db #0x00	; 0
   0252 00                 3450 	.db #0x00	; 0
   0253 00                 3451 	.db #0x00	; 0
   0254 00                 3452 	.db #0x00	; 0
   0255 00                 3453 	.db #0x00	; 0
   0256 00                 3454 	.db #0x00	; 0
   0257 00                 3455 	.db #0x00	; 0
   0258 00                 3456 	.db #0x00	; 0
   0259 00                 3457 	.db #0x00	; 0
   025A 00                 3458 	.db #0x00	; 0
   025B 00                 3459 	.db #0x00	; 0
   025C C0                 3460 	.db #0xC0	; 192
   025D F0                 3461 	.db #0xF0	; 240
   025E F0                 3462 	.db #0xF0	; 240
   025F F0                 3463 	.db #0xF0	; 240
   0260 70                 3464 	.db #0x70	; 112	'p'
   0261 70                 3465 	.db #0x70	; 112	'p'
   0262 70                 3466 	.db #0x70	; 112	'p'
   0263 70                 3467 	.db #0x70	; 112	'p'
   0264 F0                 3468 	.db #0xF0	; 240
   0265 F0                 3469 	.db #0xF0	; 240
   0266 E0                 3470 	.db #0xE0	; 224
   0267 E0                 3471 	.db #0xE0	; 224
   0268 C0                 3472 	.db #0xC0	; 192
   0269 00                 3473 	.db #0x00	; 0
   026A 00                 3474 	.db #0x00	; 0
   026B 00                 3475 	.db #0x00	; 0
   026C 00                 3476 	.db #0x00	; 0
   026D C0                 3477 	.db #0xC0	; 192
   026E F0                 3478 	.db #0xF0	; 240
   026F F0                 3479 	.db #0xF0	; 240
   0270 F0                 3480 	.db #0xF0	; 240
   0271 70                 3481 	.db #0x70	; 112	'p'
   0272 70                 3482 	.db #0x70	; 112	'p'
   0273 70                 3483 	.db #0x70	; 112	'p'
   0274 70                 3484 	.db #0x70	; 112	'p'
   0275 70                 3485 	.db #0x70	; 112	'p'
   0276 F0                 3486 	.db #0xF0	; 240
   0277 F0                 3487 	.db #0xF0	; 240
   0278 E0                 3488 	.db #0xE0	; 224
   0279 E0                 3489 	.db #0xE0	; 224
   027A C0                 3490 	.db #0xC0	; 192
   027B 80                 3491 	.db #0x80	; 128
   027C 00                 3492 	.db #0x00	; 0
   027D 00                 3493 	.db #0x00	; 0
   027E 00                 3494 	.db #0x00	; 0
   027F 00                 3495 	.db #0x00	; 0
   0280 00                 3496 	.db #0x00	; 0
   0281 00                 3497 	.db #0x00	; 0
   0282 00                 3498 	.db #0x00	; 0
   0283 00                 3499 	.db #0x00	; 0
   0284 00                 3500 	.db #0x00	; 0
   0285 C0                 3501 	.db #0xC0	; 192
   0286 E0                 3502 	.db #0xE0	; 224
   0287 F0                 3503 	.db #0xF0	; 240
   0288 F0                 3504 	.db #0xF0	; 240
   0289 F0                 3505 	.db #0xF0	; 240
   028A F0                 3506 	.db #0xF0	; 240
   028B F0                 3507 	.db #0xF0	; 240
   028C 00                 3508 	.db #0x00	; 0
   028D 00                 3509 	.db #0x00	; 0
   028E 00                 3510 	.db #0x00	; 0
   028F 00                 3511 	.db #0x00	; 0
   0290 00                 3512 	.db #0x00	; 0
   0291 00                 3513 	.db #0x00	; 0
   0292 00                 3514 	.db #0x00	; 0
   0293 00                 3515 	.db #0x00	; 0
   0294 00                 3516 	.db #0x00	; 0
   0295 00                 3517 	.db #0x00	; 0
   0296 00                 3518 	.db #0x00	; 0
   0297 00                 3519 	.db #0x00	; 0
   0298 00                 3520 	.db #0x00	; 0
   0299 00                 3521 	.db #0x00	; 0
   029A 00                 3522 	.db #0x00	; 0
   029B 00                 3523 	.db #0x00	; 0
   029C 00                 3524 	.db #0x00	; 0
   029D 00                 3525 	.db #0x00	; 0
   029E 00                 3526 	.db #0x00	; 0
   029F 1F                 3527 	.db #0x1F	; 31
   02A0 3F                 3528 	.db #0x3F	; 63
   02A1 3F                 3529 	.db #0x3F	; 63
   02A2 7F                 3530 	.db #0x7F	; 127
   02A3 F8                 3531 	.db #0xF8	; 248
   02A4 F0                 3532 	.db #0xF0	; 240
   02A5 F0                 3533 	.db #0xF0	; 240
   02A6 E0                 3534 	.db #0xE0	; 224
   02A7 E0                 3535 	.db #0xE0	; 224
   02A8 C0                 3536 	.db #0xC0	; 192
   02A9 00                 3537 	.db #0x00	; 0
   02AA 00                 3538 	.db #0x00	; 0
   02AB 00                 3539 	.db #0x00	; 0
   02AC 80                 3540 	.db #0x80	; 128
   02AD E0                 3541 	.db #0xE0	; 224
   02AE F0                 3542 	.db #0xF0	; 240
   02AF F8                 3543 	.db #0xF8	; 248
   02B0 7C                 3544 	.db #0x7C	; 124
   02B1 1C                 3545 	.db #0x1C	; 28
   02B2 1E                 3546 	.db #0x1E	; 30
   02B3 0E                 3547 	.db #0x0E	; 14
   02B4 0E                 3548 	.db #0x0E	; 14
   02B5 0E                 3549 	.db #0x0E	; 14
   02B6 1E                 3550 	.db #0x1E	; 30
   02B7 FE                 3551 	.db #0xFE	; 254
   02B8 FC                 3552 	.db #0xFC	; 252
   02B9 FC                 3553 	.db #0xFC	; 252
   02BA F0                 3554 	.db #0xF0	; 240
   02BB 00                 3555 	.db #0x00	; 0
   02BC 00                 3556 	.db #0x00	; 0
   02BD 00                 3557 	.db #0x00	; 0
   02BE 0E                 3558 	.db #0x0E	; 14
   02BF EE                 3559 	.db #0xEE	; 238
   02C0 FF                 3560 	.db #0xFF	; 255
   02C1 FF                 3561 	.db #0xFF	; 255
   02C2 FF                 3562 	.db #0xFF	; 255
   02C3 0F                 3563 	.db #0x0F	; 15
   02C4 0E                 3564 	.db #0x0E	; 14
   02C5 0E                 3565 	.db #0x0E	; 14
   02C6 0E                 3566 	.db #0x0E	; 14
   02C7 00                 3567 	.db #0x00	; 0
   02C8 0E                 3568 	.db #0x0E	; 14
   02C9 EE                 3569 	.db #0xEE	; 238
   02CA FF                 3570 	.db #0xFF	; 255
   02CB FF                 3571 	.db #0xFF	; 255
   02CC FF                 3572 	.db #0xFF	; 255
   02CD 0F                 3573 	.db #0x0F	; 15
   02CE 0E                 3574 	.db #0x0E	; 14
   02CF 0E                 3575 	.db #0x0E	; 14
   02D0 0E                 3576 	.db #0x0E	; 14
   02D1 02                 3577 	.db #0x02	; 2
   02D2 00                 3578 	.db #0x00	; 0
   02D3 00                 3579 	.db #0x00	; 0
   02D4 00                 3580 	.db #0x00	; 0
   02D5 00                 3581 	.db #0x00	; 0
   02D6 00                 3582 	.db #0x00	; 0
   02D7 00                 3583 	.db #0x00	; 0
   02D8 00                 3584 	.db #0x00	; 0
   02D9 00                 3585 	.db #0x00	; 0
   02DA 00                 3586 	.db #0x00	; 0
   02DB F8                 3587 	.db #0xF8	; 248
   02DC FF                 3588 	.db #0xFF	; 255
   02DD FF                 3589 	.db #0xFF	; 255
   02DE FF                 3590 	.db #0xFF	; 255
   02DF C3                 3591 	.db #0xC3	; 195
   02E0 C0                 3592 	.db #0xC0	; 192
   02E1 C0                 3593 	.db #0xC0	; 192
   02E2 C0                 3594 	.db #0xC0	; 192
   02E3 E0                 3595 	.db #0xE0	; 224
   02E4 F0                 3596 	.db #0xF0	; 240
   02E5 FF                 3597 	.db #0xFF	; 255
   02E6 7F                 3598 	.db #0x7F	; 127
   02E7 3F                 3599 	.db #0x3F	; 63
   02E8 1F                 3600 	.db #0x1F	; 31
   02E9 00                 3601 	.db #0x00	; 0
   02EA 00                 3602 	.db #0x00	; 0
   02EB 00                 3603 	.db #0x00	; 0
   02EC F8                 3604 	.db #0xF8	; 248
   02ED FF                 3605 	.db #0xFF	; 255
   02EE FF                 3606 	.db #0xFF	; 255
   02EF 7F                 3607 	.db #0x7F	; 127
   02F0 03                 3608 	.db #0x03	; 3
   02F1 00                 3609 	.db #0x00	; 0
   02F2 00                 3610 	.db #0x00	; 0
   02F3 00                 3611 	.db #0x00	; 0
   02F4 00                 3612 	.db #0x00	; 0
   02F5 00                 3613 	.db #0x00	; 0
   02F6 00                 3614 	.db #0x00	; 0
   02F7 00                 3615 	.db #0x00	; 0
   02F8 FF                 3616 	.db #0xFF	; 255
   02F9 FF                 3617 	.db #0xFF	; 255
   02FA FF                 3618 	.db #0xFF	; 255
   02FB FF                 3619 	.db #0xFF	; 255
   02FC 1C                 3620 	.db #0x1C	; 28
   02FD 00                 3621 	.db #0x00	; 0
   02FE 00                 3622 	.db #0x00	; 0
   02FF 00                 3623 	.db #0x00	; 0
   0300 80                 3624 	.db #0x80	; 128
   0301 E0                 3625 	.db #0xE0	; 224
   0302 F0                 3626 	.db #0xF0	; 240
   0303 FC                 3627 	.db #0xFC	; 252
   0304 7F                 3628 	.db #0x7F	; 127
   0305 1F                 3629 	.db #0x1F	; 31
   0306 07                 3630 	.db #0x07	; 7
   0307 01                 3631 	.db #0x01	; 1
   0308 01                 3632 	.db #0x01	; 1
   0309 7F                 3633 	.db #0x7F	; 127
   030A FF                 3634 	.db #0xFF	; 255
   030B FF                 3635 	.db #0xFF	; 255
   030C FC                 3636 	.db #0xFC	; 252
   030D 00                 3637 	.db #0x00	; 0
   030E 00                 3638 	.db #0x00	; 0
   030F 00                 3639 	.db #0x00	; 0
   0310 00                 3640 	.db #0x00	; 0
   0311 00                 3641 	.db #0x00	; 0
   0312 00                 3642 	.db #0x00	; 0
   0313 00                 3643 	.db #0x00	; 0
   0314 00                 3644 	.db #0x00	; 0
   0315 00                 3645 	.db #0x00	; 0
   0316 00                 3646 	.db #0x00	; 0
   0317 00                 3647 	.db #0x00	; 0
   0318 00                 3648 	.db #0x00	; 0
   0319 00                 3649 	.db #0x00	; 0
   031A 00                 3650 	.db #0x00	; 0
   031B 00                 3651 	.db #0x00	; 0
   031C 70                 3652 	.db #0x70	; 112	'p'
   031D 78                 3653 	.db #0x78	; 120	'x'
   031E F0                 3654 	.db #0xF0	; 240
   031F E0                 3655 	.db #0xE0	; 224
   0320 E0                 3656 	.db #0xE0	; 224
   0321 E0                 3657 	.db #0xE0	; 224
   0322 E0                 3658 	.db #0xE0	; 224
   0323 E0                 3659 	.db #0xE0	; 224
   0324 F0                 3660 	.db #0xF0	; 240
   0325 7F                 3661 	.db #0x7F	; 127
   0326 7F                 3662 	.db #0x7F	; 127
   0327 3F                 3663 	.db #0x3F	; 63
   0328 1F                 3664 	.db #0x1F	; 31
   0329 07                 3665 	.db #0x07	; 7
   032A 00                 3666 	.db #0x00	; 0
   032B 00                 3667 	.db #0x00	; 0
   032C 1F                 3668 	.db #0x1F	; 31
   032D 7F                 3669 	.db #0x7F	; 127
   032E 7F                 3670 	.db #0x7F	; 127
   032F FF                 3671 	.db #0xFF	; 255
   0330 F0                 3672 	.db #0xF0	; 240
   0331 E0                 3673 	.db #0xE0	; 224
   0332 E0                 3674 	.db #0xE0	; 224
   0333 E0                 3675 	.db #0xE0	; 224
   0334 F0                 3676 	.db #0xF0	; 240
   0335 70                 3677 	.db #0x70	; 112	'p'
   0336 7C                 3678 	.db #0x7C	; 124
   0337 3F                 3679 	.db #0x3F	; 63
   0338 1F                 3680 	.db #0x1F	; 31
   0339 0F                 3681 	.db #0x0F	; 15
   033A 03                 3682 	.db #0x03	; 3
   033B 00                 3683 	.db #0x00	; 0
   033C 00                 3684 	.db #0x00	; 0
   033D 80                 3685 	.db #0x80	; 128
   033E FC                 3686 	.db #0xFC	; 252
   033F FF                 3687 	.db #0xFF	; 255
   0340 FF                 3688 	.db #0xFF	; 255
   0341 3F                 3689 	.db #0x3F	; 63
   0342 01                 3690 	.db #0x01	; 1
   0343 00                 3691 	.db #0x00	; 0
   0344 00                 3692 	.db #0x00	; 0
   0345 00                 3693 	.db #0x00	; 0
   0346 00                 3694 	.db #0x00	; 0
   0347 00                 3695 	.db #0x00	; 0
   0348 7C                 3696 	.db #0x7C	; 124
   0349 FF                 3697 	.db #0xFF	; 255
   034A FF                 3698 	.db #0xFF	; 255
   034B FF                 3699 	.db #0xFF	; 255
   034C E1                 3700 	.db #0xE1	; 225
   034D E0                 3701 	.db #0xE0	; 224
   034E 60                 3702 	.db #0x60	; 96
   034F 00                 3703 	.db #0x00	; 0
   0350 00                 3704 	.db #0x00	; 0
   0351 00                 3705 	.db #0x00	; 0
   0352 00                 3706 	.db #0x00	; 0
   0353 00                 3707 	.db #0x00	; 0
   0354 00                 3708 	.db #0x00	; 0
   0355 00                 3709 	.db #0x00	; 0
   0356 00                 3710 	.db #0x00	; 0
   0357 00                 3711 	.db #0x00	; 0
   0358 00                 3712 	.db #0x00	; 0
   0359 E0                 3713 	.db #0xE0	; 224
   035A FF                 3714 	.db #0xFF	; 255
   035B FF                 3715 	.db #0xFF	; 255
   035C FF                 3716 	.db #0xFF	; 255
   035D 0F                 3717 	.db #0x0F	; 15
   035E 01                 3718 	.db #0x01	; 1
   035F 01                 3719 	.db #0x01	; 1
   0360 01                 3720 	.db #0x01	; 1
   0361 01                 3721 	.db #0x01	; 1
   0362 01                 3722 	.db #0x01	; 1
   0363 01                 3723 	.db #0x01	; 1
   0364 00                 3724 	.db #0x00	; 0
   0365 00                 3725 	.db #0x00	; 0
   0366 00                 3726 	.db #0x00	; 0
   0367 00                 3727 	.db #0x00	; 0
   0368 00                 3728 	.db #0x00	; 0
   0369 00                 3729 	.db #0x00	; 0
   036A E0                 3730 	.db #0xE0	; 224
   036B FF                 3731 	.db #0xFF	; 255
   036C FF                 3732 	.db #0xFF	; 255
   036D FF                 3733 	.db #0xFF	; 255
   036E EF                 3734 	.db #0xEF	; 239
   036F E0                 3735 	.db #0xE0	; 224
   0370 E0                 3736 	.db #0xE0	; 224
   0371 E0                 3737 	.db #0xE0	; 224
   0372 E0                 3738 	.db #0xE0	; 224
   0373 E0                 3739 	.db #0xE0	; 224
   0374 70                 3740 	.db #0x70	; 112	'p'
   0375 78                 3741 	.db #0x78	; 120	'x'
   0376 7C                 3742 	.db #0x7C	; 124
   0377 3E                 3743 	.db #0x3E	; 62
   0378 1F                 3744 	.db #0x1F	; 31
   0379 0F                 3745 	.db #0x0F	; 15
   037A 07                 3746 	.db #0x07	; 7
   037B 01                 3747 	.db #0x01	; 1
   037C C0                 3748 	.db #0xC0	; 192
   037D E0                 3749 	.db #0xE0	; 224
   037E F8                 3750 	.db #0xF8	; 248
   037F FE                 3751 	.db #0xFE	; 254
   0380 7F                 3752 	.db #0x7F	; 127
   0381 1F                 3753 	.db #0x1F	; 31
   0382 07                 3754 	.db #0x07	; 7
   0383 07                 3755 	.db #0x07	; 7
   0384 07                 3756 	.db #0x07	; 7
   0385 07                 3757 	.db #0x07	; 7
   0386 07                 3758 	.db #0x07	; 7
   0387 07                 3759 	.db #0x07	; 7
   0388 07                 3760 	.db #0x07	; 7
   0389 07                 3761 	.db #0x07	; 7
   038A FF                 3762 	.db #0xFF	; 255
   038B FF                 3763 	.db #0xFF	; 255
   038C FF                 3764 	.db #0xFF	; 255
   038D FE                 3765 	.db #0xFE	; 254
   038E 00                 3766 	.db #0x00	; 0
   038F 00                 3767 	.db #0x00	; 0
   0390 00                 3768 	.db #0x00	; 0
   0391 00                 3769 	.db #0x00	; 0
   0392 00                 3770 	.db #0x00	; 0
   0393 00                 3771 	.db #0x00	; 0
   0394 00                 3772 	.db #0x00	; 0
   0395 00                 3773 	.db #0x00	; 0
   0396 00                 3774 	.db #0x00	; 0
   0397 00                 3775 	.db #0x00	; 0
   0398 00                 3776 	.db #0x00	; 0
   0399 00                 3777 	.db #0x00	; 0
   039A 00                 3778 	.db #0x00	; 0
   039B 00                 3779 	.db #0x00	; 0
   039C 00                 3780 	.db #0x00	; 0
   039D 80                 3781 	.db #0x80	; 128
   039E F0                 3782 	.db #0xF0	; 240
   039F 80                 3783 	.db #0x80	; 128
   03A0 80                 3784 	.db #0x80	; 128
   03A1 80                 3785 	.db #0x80	; 128
   03A2 00                 3786 	.db #0x00	; 0
   03A3 00                 3787 	.db #0x00	; 0
   03A4 80                 3788 	.db #0x80	; 128
   03A5 00                 3789 	.db #0x00	; 0
   03A6 00                 3790 	.db #0x00	; 0
   03A7 00                 3791 	.db #0x00	; 0
   03A8 80                 3792 	.db #0x80	; 128
   03A9 00                 3793 	.db #0x00	; 0
   03AA 00                 3794 	.db #0x00	; 0
   03AB 00                 3795 	.db #0x00	; 0
   03AC 00                 3796 	.db #0x00	; 0
   03AD 00                 3797 	.db #0x00	; 0
   03AE 00                 3798 	.db #0x00	; 0
   03AF 00                 3799 	.db #0x00	; 0
   03B0 00                 3800 	.db #0x00	; 0
   03B1 00                 3801 	.db #0x00	; 0
   03B2 00                 3802 	.db #0x00	; 0
   03B3 00                 3803 	.db #0x00	; 0
   03B4 00                 3804 	.db #0x00	; 0
   03B5 00                 3805 	.db #0x00	; 0
   03B6 00                 3806 	.db #0x00	; 0
   03B7 00                 3807 	.db #0x00	; 0
   03B8 00                 3808 	.db #0x00	; 0
   03B9 30                 3809 	.db #0x30	; 48	'0'
   03BA 38                 3810 	.db #0x38	; 56	'8'
   03BB 38                 3811 	.db #0x38	; 56	'8'
   03BC 3C                 3812 	.db #0x3C	; 60
   03BD 3F                 3813 	.db #0x3F	; 63
   03BE 1F                 3814 	.db #0x1F	; 31
   03BF 0F                 3815 	.db #0x0F	; 15
   03C0 03                 3816 	.db #0x03	; 3
   03C1 00                 3817 	.db #0x00	; 0
   03C2 00                 3818 	.db #0x00	; 0
   03C3 00                 3819 	.db #0x00	; 0
   03C4 00                 3820 	.db #0x00	; 0
   03C5 00                 3821 	.db #0x00	; 0
   03C6 00                 3822 	.db #0x00	; 0
   03C7 00                 3823 	.db #0x00	; 0
   03C8 00                 3824 	.db #0x00	; 0
   03C9 00                 3825 	.db #0x00	; 0
   03CA 00                 3826 	.db #0x00	; 0
   03CB 00                 3827 	.db #0x00	; 0
   03CC 00                 3828 	.db #0x00	; 0
   03CD 00                 3829 	.db #0x00	; 0
   03CE 00                 3830 	.db #0x00	; 0
   03CF 00                 3831 	.db #0x00	; 0
   03D0 00                 3832 	.db #0x00	; 0
   03D1 00                 3833 	.db #0x00	; 0
   03D2 00                 3834 	.db #0x00	; 0
   03D3 00                 3835 	.db #0x00	; 0
   03D4 00                 3836 	.db #0x00	; 0
   03D5 00                 3837 	.db #0x00	; 0
   03D6 00                 3838 	.db #0x00	; 0
   03D7 00                 3839 	.db #0x00	; 0
   03D8 00                 3840 	.db #0x00	; 0
   03D9 00                 3841 	.db #0x00	; 0
   03DA 00                 3842 	.db #0x00	; 0
   03DB 00                 3843 	.db #0x00	; 0
   03DC 00                 3844 	.db #0x00	; 0
   03DD 00                 3845 	.db #0x00	; 0
   03DE 00                 3846 	.db #0x00	; 0
   03DF 00                 3847 	.db #0x00	; 0
   03E0 00                 3848 	.db #0x00	; 0
   03E1 00                 3849 	.db #0x00	; 0
   03E2 00                 3850 	.db #0x00	; 0
   03E3 00                 3851 	.db #0x00	; 0
   03E4 00                 3852 	.db #0x00	; 0
   03E5 00                 3853 	.db #0x00	; 0
   03E6 00                 3854 	.db #0x00	; 0
   03E7 00                 3855 	.db #0x00	; 0
   03E8 00                 3856 	.db #0x00	; 0
   03E9 00                 3857 	.db #0x00	; 0
   03EA 00                 3858 	.db #0x00	; 0
   03EB 00                 3859 	.db #0x00	; 0
   03EC 00                 3860 	.db #0x00	; 0
   03ED 00                 3861 	.db #0x00	; 0
   03EE 00                 3862 	.db #0x00	; 0
   03EF 00                 3863 	.db #0x00	; 0
   03F0 00                 3864 	.db #0x00	; 0
   03F1 00                 3865 	.db #0x00	; 0
   03F2 00                 3866 	.db #0x00	; 0
   03F3 00                 3867 	.db #0x00	; 0
   03F4 00                 3868 	.db #0x00	; 0
   03F5 00                 3869 	.db #0x00	; 0
   03F6 00                 3870 	.db #0x00	; 0
   03F7 00                 3871 	.db #0x00	; 0
   03F8 00                 3872 	.db #0x00	; 0
   03F9 00                 3873 	.db #0x00	; 0
   03FA 00                 3874 	.db #0x00	; 0
   03FB 00                 3875 	.db #0x00	; 0
   03FC 00                 3876 	.db #0x00	; 0
   03FD 00                 3877 	.db #0x00	; 0
   03FE 00                 3878 	.db #0x00	; 0
   03FF 00                 3879 	.db #0x00	; 0
   0400 00                 3880 	.db #0x00	; 0
   0401 00                 3881 	.db #0x00	; 0
   0402 00                 3882 	.db #0x00	; 0
   0403 00                 3883 	.db #0x00	; 0
   0404 00                 3884 	.db #0x00	; 0
   0405 00                 3885 	.db #0x00	; 0
   0406 00                 3886 	.db #0x00	; 0
   0407 00                 3887 	.db #0x00	; 0
   0408 00                 3888 	.db #0x00	; 0
   0409 00                 3889 	.db #0x00	; 0
   040A 00                 3890 	.db #0x00	; 0
   040B 00                 3891 	.db #0x00	; 0
   040C 00                 3892 	.db #0x00	; 0
   040D 00                 3893 	.db #0x00	; 0
   040E 00                 3894 	.db #0x00	; 0
   040F 00                 3895 	.db #0x00	; 0
   0410 00                 3896 	.db #0x00	; 0
   0411 00                 3897 	.db #0x00	; 0
   0412 00                 3898 	.db #0x00	; 0
   0413 00                 3899 	.db #0x00	; 0
   0414 00                 3900 	.db #0x00	; 0
   0415 00                 3901 	.db #0x00	; 0
   0416 00                 3902 	.db #0x00	; 0
   0417 00                 3903 	.db #0x00	; 0
   0418 00                 3904 	.db #0x00	; 0
   0419 00                 3905 	.db #0x00	; 0
   041A 00                 3906 	.db #0x00	; 0
   041B 00                 3907 	.db #0x00	; 0
   041C 10                 3908 	.db #0x10	; 16
   041D 1F                 3909 	.db #0x1F	; 31
   041E 11                 3910 	.db #0x11	; 17
   041F 10                 3911 	.db #0x10	; 16
   0420 18                 3912 	.db #0x18	; 24
   0421 0F                 3913 	.db #0x0F	; 15
   0422 00                 3914 	.db #0x00	; 0
   0423 40                 3915 	.db #0x40	; 64
   0424 67                 3916 	.db #0x67	; 103	'g'
   0425 3E                 3917 	.db #0x3E	; 62
   0426 1C                 3918 	.db #0x1C	; 28
   0427 07                 3919 	.db #0x07	; 7
   0428 01                 3920 	.db #0x01	; 1
   0429 00                 3921 	.db #0x00	; 0
   042A 00                 3922 	.db #0x00	; 0
   042B 00                 3923 	.db #0x00	; 0
   042C 00                 3924 	.db #0x00	; 0
   042D 00                 3925 	.db #0x00	; 0
   042E 00                 3926 	.db #0x00	; 0
   042F 80                 3927 	.db #0x80	; 128
   0430 C0                 3928 	.db #0xC0	; 192
   0431 C0                 3929 	.db #0xC0	; 192
   0432 C0                 3930 	.db #0xC0	; 192
   0433 00                 3931 	.db #0x00	; 0
   0434 00                 3932 	.db #0x00	; 0
   0435 00                 3933 	.db #0x00	; 0
   0436 00                 3934 	.db #0x00	; 0
   0437 00                 3935 	.db #0x00	; 0
   0438 00                 3936 	.db #0x00	; 0
   0439 00                 3937 	.db #0x00	; 0
   043A 00                 3938 	.db #0x00	; 0
   043B 00                 3939 	.db #0x00	; 0
   043C 00                 3940 	.db #0x00	; 0
   043D 00                 3941 	.db #0x00	; 0
   043E 00                 3942 	.db #0x00	; 0
   043F 00                 3943 	.db #0x00	; 0
   0440 00                 3944 	.db #0x00	; 0
   0441 00                 3945 	.db #0x00	; 0
   0442 00                 3946 	.db #0x00	; 0
   0443 00                 3947 	.db #0x00	; 0
   0444 00                 3948 	.db #0x00	; 0
   0445 00                 3949 	.db #0x00	; 0
   0446 00                 3950 	.db #0x00	; 0
   0447 C0                 3951 	.db #0xC0	; 192
   0448 C0                 3952 	.db #0xC0	; 192
   0449 00                 3953 	.db #0x00	; 0
   044A 00                 3954 	.db #0x00	; 0
   044B 00                 3955 	.db #0x00	; 0
   044C 00                 3956 	.db #0x00	; 0
   044D 00                 3957 	.db #0x00	; 0
   044E 00                 3958 	.db #0x00	; 0
   044F 00                 3959 	.db #0x00	; 0
   0450 00                 3960 	.db #0x00	; 0
   0451 00                 3961 	.db #0x00	; 0
   0452 00                 3962 	.db #0x00	; 0
   0453 00                 3963 	.db #0x00	; 0
   0454 00                 3964 	.db #0x00	; 0
   0455 00                 3965 	.db #0x00	; 0
   0456 00                 3966 	.db #0x00	; 0
   0457 00                 3967 	.db #0x00	; 0
   0458 00                 3968 	.db #0x00	; 0
   0459 00                 3969 	.db #0x00	; 0
   045A 00                 3970 	.db #0x00	; 0
   045B 00                 3971 	.db #0x00	; 0
   045C C0                 3972 	.db #0xC0	; 192
   045D C0                 3973 	.db #0xC0	; 192
   045E C0                 3974 	.db #0xC0	; 192
   045F C0                 3975 	.db #0xC0	; 192
   0460 C0                 3976 	.db #0xC0	; 192
   0461 C0                 3977 	.db #0xC0	; 192
   0462 80                 3978 	.db #0x80	; 128
   0463 00                 3979 	.db #0x00	; 0
   0464 00                 3980 	.db #0x00	; 0
   0465 00                 3981 	.db #0x00	; 0
   0466 00                 3982 	.db #0x00	; 0
   0467 00                 3983 	.db #0x00	; 0
   0468 00                 3984 	.db #0x00	; 0
   0469 00                 3985 	.db #0x00	; 0
   046A 00                 3986 	.db #0x00	; 0
   046B 00                 3987 	.db #0x00	; 0
   046C 00                 3988 	.db #0x00	; 0
   046D 00                 3989 	.db #0x00	; 0
   046E 00                 3990 	.db #0x00	; 0
   046F 00                 3991 	.db #0x00	; 0
   0470 00                 3992 	.db #0x00	; 0
   0471 00                 3993 	.db #0x00	; 0
   0472 00                 3994 	.db #0x00	; 0
   0473 00                 3995 	.db #0x00	; 0
   0474 00                 3996 	.db #0x00	; 0
   0475 00                 3997 	.db #0x00	; 0
   0476 00                 3998 	.db #0x00	; 0
   0477 00                 3999 	.db #0x00	; 0
   0478 00                 4000 	.db #0x00	; 0
   0479 00                 4001 	.db #0x00	; 0
   047A 00                 4002 	.db #0x00	; 0
   047B 00                 4003 	.db #0x00	; 0
   047C 00                 4004 	.db #0x00	; 0
   047D 00                 4005 	.db #0x00	; 0
   047E 00                 4006 	.db #0x00	; 0
   047F 00                 4007 	.db #0x00	; 0
   0480 00                 4008 	.db #0x00	; 0
   0481 00                 4009 	.db #0x00	; 0
   0482 00                 4010 	.db #0x00	; 0
   0483 C0                 4011 	.db #0xC0	; 192
   0484 C0                 4012 	.db #0xC0	; 192
   0485 00                 4013 	.db #0x00	; 0
   0486 00                 4014 	.db #0x00	; 0
   0487 00                 4015 	.db #0x00	; 0
   0488 00                 4016 	.db #0x00	; 0
   0489 00                 4017 	.db #0x00	; 0
   048A 00                 4018 	.db #0x00	; 0
   048B 00                 4019 	.db #0x00	; 0
   048C 00                 4020 	.db #0x00	; 0
   048D 00                 4021 	.db #0x00	; 0
   048E 00                 4022 	.db #0x00	; 0
   048F 00                 4023 	.db #0x00	; 0
   0490 00                 4024 	.db #0x00	; 0
   0491 00                 4025 	.db #0x00	; 0
   0492 00                 4026 	.db #0x00	; 0
   0493 00                 4027 	.db #0x00	; 0
   0494 00                 4028 	.db #0x00	; 0
   0495 00                 4029 	.db #0x00	; 0
   0496 00                 4030 	.db #0x00	; 0
   0497 00                 4031 	.db #0x00	; 0
   0498 00                 4032 	.db #0x00	; 0
   0499 00                 4033 	.db #0x00	; 0
   049A 00                 4034 	.db #0x00	; 0
   049B 00                 4035 	.db #0x00	; 0
   049C 00                 4036 	.db #0x00	; 0
   049D 00                 4037 	.db #0x00	; 0
   049E 00                 4038 	.db #0x00	; 0
   049F 00                 4039 	.db #0x00	; 0
   04A0 00                 4040 	.db #0x00	; 0
   04A1 00                 4041 	.db #0x00	; 0
   04A2 00                 4042 	.db #0x00	; 0
   04A3 00                 4043 	.db #0x00	; 0
   04A4 00                 4044 	.db #0x00	; 0
   04A5 00                 4045 	.db #0x00	; 0
   04A6 00                 4046 	.db #0x00	; 0
   04A7 00                 4047 	.db #0x00	; 0
   04A8 00                 4048 	.db #0x00	; 0
   04A9 00                 4049 	.db #0x00	; 0
   04AA 00                 4050 	.db #0x00	; 0
   04AB C0                 4051 	.db #0xC0	; 192
   04AC F0                 4052 	.db #0xF0	; 240
   04AD 38                 4053 	.db #0x38	; 56	'8'
   04AE 3E                 4054 	.db #0x3E	; 62
   04AF 33                 4055 	.db #0x33	; 51	'3'
   04B0 31                 4056 	.db #0x31	; 49	'1'
   04B1 37                 4057 	.db #0x37	; 55	'7'
   04B2 FF                 4058 	.db #0xFF	; 255
   04B3 F0                 4059 	.db #0xF0	; 240
   04B4 00                 4060 	.db #0x00	; 0
   04B5 80                 4061 	.db #0x80	; 128
   04B6 F8                 4062 	.db #0xF8	; 248
   04B7 3E                 4063 	.db #0x3E	; 62
   04B8 0C                 4064 	.db #0x0C	; 12
   04B9 06                 4065 	.db #0x06	; 6
   04BA E6                 4066 	.db #0xE6	; 230
   04BB FE                 4067 	.db #0xFE	; 254
   04BC 0C                 4068 	.db #0x0C	; 12
   04BD 80                 4069 	.db #0x80	; 128
   04BE F8                 4070 	.db #0xF8	; 248
   04BF 3E                 4071 	.db #0x3E	; 62
   04C0 0C                 4072 	.db #0x0C	; 12
   04C1 06                 4073 	.db #0x06	; 6
   04C2 E6                 4074 	.db #0xE6	; 230
   04C3 FE                 4075 	.db #0xFE	; 254
   04C4 0C                 4076 	.db #0x0C	; 12
   04C5 80                 4077 	.db #0x80	; 128
   04C6 FC                 4078 	.db #0xFC	; 252
   04C7 3E                 4079 	.db #0x3E	; 62
   04C8 00                 4080 	.db #0x00	; 0
   04C9 80                 4081 	.db #0x80	; 128
   04CA F8                 4082 	.db #0xF8	; 248
   04CB 3E                 4083 	.db #0x3E	; 62
   04CC 0C                 4084 	.db #0x0C	; 12
   04CD 06                 4085 	.db #0x06	; 6
   04CE E6                 4086 	.db #0xE6	; 230
   04CF FE                 4087 	.db #0xFE	; 254
   04D0 0C                 4088 	.db #0x0C	; 12
   04D1 04                 4089 	.db #0x04	; 4
   04D2 86                 4090 	.db #0x86	; 134
   04D3 FE                 4091 	.db #0xFE	; 254
   04D4 3E                 4092 	.db #0x3E	; 62
   04D5 00                 4093 	.db #0x00	; 0
   04D6 00                 4094 	.db #0x00	; 0
   04D7 00                 4095 	.db #0x00	; 0
   04D8 00                 4096 	.db #0x00	; 0
   04D9 00                 4097 	.db #0x00	; 0
   04DA 00                 4098 	.db #0x00	; 0
   04DB F8                 4099 	.db #0xF8	; 248
   04DC FF                 4100 	.db #0xFF	; 255
   04DD CF                 4101 	.db #0xCF	; 207
   04DE CC                 4102 	.db #0xCC	; 204
   04DF CC                 4103 	.db #0xCC	; 204
   04E0 7E                 4104 	.db #0x7E	; 126
   04E1 7B                 4105 	.db #0x7B	; 123
   04E2 01                 4106 	.db #0x01	; 1
   04E3 00                 4107 	.db #0x00	; 0
   04E4 FC                 4108 	.db #0xFC	; 252
   04E5 CC                 4109 	.db #0xCC	; 204
   04E6 C6                 4110 	.db #0xC6	; 198
   04E7 46                 4111 	.db #0x46	; 70	'F'
   04E8 FE                 4112 	.db #0xFE	; 254
   04E9 7E                 4113 	.db #0x7E	; 126
   04EA 02                 4114 	.db #0x02	; 2
   04EB 80                 4115 	.db #0x80	; 128
   04EC F8                 4116 	.db #0xF8	; 248
   04ED 3E                 4117 	.db #0x3E	; 62
   04EE 0C                 4118 	.db #0x0C	; 12
   04EF 06                 4119 	.db #0x06	; 6
   04F0 E6                 4120 	.db #0xE6	; 230
   04F1 FE                 4121 	.db #0xFE	; 254
   04F2 0C                 4122 	.db #0x0C	; 12
   04F3 00                 4123 	.db #0x00	; 0
   04F4 F8                 4124 	.db #0xF8	; 248
   04F5 DC                 4125 	.db #0xDC	; 220
   04F6 D6                 4126 	.db #0xD6	; 214
   04F7 D6                 4127 	.db #0xD6	; 214
   04F8 D6                 4128 	.db #0xD6	; 214
   04F9 4E                 4129 	.db #0x4E	; 78	'N'
   04FA 0C                 4130 	.db #0x0C	; 12
   04FB 80                 4131 	.db #0x80	; 128
   04FC FC                 4132 	.db #0xFC	; 252
   04FD 3E                 4133 	.db #0x3E	; 62
   04FE 0C                 4134 	.db #0x0C	; 12
   04FF 06                 4135 	.db #0x06	; 6
   0500 06                 4136 	.db #0x06	; 6
   0501 00                 4137 	.db #0x00	; 0
   0502 F8                 4138 	.db #0xF8	; 248
   0503 7E                 4139 	.db #0x7E	; 126
   0504 00                 4140 	.db #0x00	; 0
   0505 00                 4141 	.db #0x00	; 0
   0506 F8                 4142 	.db #0xF8	; 248
   0507 DC                 4143 	.db #0xDC	; 220
   0508 D6                 4144 	.db #0xD6	; 214
   0509 D6                 4145 	.db #0xD6	; 214
   050A D6                 4146 	.db #0xD6	; 214
   050B 4E                 4147 	.db #0x4E	; 78	'N'
   050C 0C                 4148 	.db #0x0C	; 12
   050D 00                 4149 	.db #0x00	; 0
   050E F8                 4150 	.db #0xF8	; 248
   050F DC                 4151 	.db #0xDC	; 220
   0510 D6                 4152 	.db #0xD6	; 214
   0511 D6                 4153 	.db #0xD6	; 214
   0512 D6                 4154 	.db #0xD6	; 214
   0513 4E                 4155 	.db #0x4E	; 78	'N'
   0514 0C                 4156 	.db #0x0C	; 12
   0515 00                 4157 	.db #0x00	; 0
   0516 00                 4158 	.db #0x00	; 0
   0517 00                 4159 	.db #0x00	; 0
   0518 00                 4160 	.db #0x00	; 0
   0519 00                 4161 	.db #0x00	; 0
   051A 00                 4162 	.db #0x00	; 0
   051B 00                 4163 	.db #0x00	; 0
   051C 00                 4164 	.db #0x00	; 0
   051D 00                 4165 	.db #0x00	; 0
   051E 00                 4166 	.db #0x00	; 0
   051F 00                 4167 	.db #0x00	; 0
   0520 00                 4168 	.db #0x00	; 0
   0521 00                 4169 	.db #0x00	; 0
   0522 00                 4170 	.db #0x00	; 0
   0523 00                 4171 	.db #0x00	; 0
   0524 00                 4172 	.db #0x00	; 0
   0525 00                 4173 	.db #0x00	; 0
   0526 00                 4174 	.db #0x00	; 0
   0527 00                 4175 	.db #0x00	; 0
   0528 00                 4176 	.db #0x00	; 0
   0529 00                 4177 	.db #0x00	; 0
   052A 00                 4178 	.db #0x00	; 0
   052B 00                 4179 	.db #0x00	; 0
   052C 00                 4180 	.db #0x00	; 0
   052D 00                 4181 	.db #0x00	; 0
   052E 00                 4182 	.db #0x00	; 0
   052F 00                 4183 	.db #0x00	; 0
   0530 00                 4184 	.db #0x00	; 0
   0531 00                 4185 	.db #0x00	; 0
   0532 00                 4186 	.db #0x00	; 0
   0533 00                 4187 	.db #0x00	; 0
   0534 00                 4188 	.db #0x00	; 0
   0535 00                 4189 	.db #0x00	; 0
   0536 00                 4190 	.db #0x00	; 0
   0537 00                 4191 	.db #0x00	; 0
   0538 00                 4192 	.db #0x00	; 0
   0539 00                 4193 	.db #0x00	; 0
   053A 00                 4194 	.db #0x00	; 0
   053B 00                 4195 	.db #0x00	; 0
   053C 00                 4196 	.db #0x00	; 0
   053D 00                 4197 	.db #0x00	; 0
   053E 00                 4198 	.db #0x00	; 0
   053F 00                 4199 	.db #0x00	; 0
   0540 00                 4200 	.db #0x00	; 0
   0541 00                 4201 	.db #0x00	; 0
   0542 00                 4202 	.db #0x00	; 0
   0543 00                 4203 	.db #0x00	; 0
   0544 00                 4204 	.db #0x00	; 0
   0545 00                 4205 	.db #0x00	; 0
   0546 00                 4206 	.db #0x00	; 0
   0547 00                 4207 	.db #0x00	; 0
   0548 00                 4208 	.db #0x00	; 0
   0549 00                 4209 	.db #0x00	; 0
   054A 00                 4210 	.db #0x00	; 0
   054B 00                 4211 	.db #0x00	; 0
   054C 00                 4212 	.db #0x00	; 0
   054D 00                 4213 	.db #0x00	; 0
   054E 00                 4214 	.db #0x00	; 0
   054F 00                 4215 	.db #0x00	; 0
   0550 00                 4216 	.db #0x00	; 0
   0551 00                 4217 	.db #0x00	; 0
   0552 00                 4218 	.db #0x00	; 0
   0553 00                 4219 	.db #0x00	; 0
   0554 00                 4220 	.db #0x00	; 0
   0555 00                 4221 	.db #0x00	; 0
   0556 00                 4222 	.db #0x00	; 0
   0557 00                 4223 	.db #0x00	; 0
   0558 00                 4224 	.db #0x00	; 0
   0559 00                 4225 	.db #0x00	; 0
   055A 00                 4226 	.db #0x00	; 0
   055B 00                 4227 	.db #0x00	; 0
   055C 00                 4228 	.db #0x00	; 0
   055D 00                 4229 	.db #0x00	; 0
   055E 00                 4230 	.db #0x00	; 0
   055F 00                 4231 	.db #0x00	; 0
   0560 00                 4232 	.db #0x00	; 0
   0561 00                 4233 	.db #0x00	; 0
   0562 00                 4234 	.db #0x00	; 0
   0563 00                 4235 	.db #0x00	; 0
   0564 00                 4236 	.db #0x00	; 0
   0565 00                 4237 	.db #0x00	; 0
   0566 00                 4238 	.db #0x00	; 0
   0567 00                 4239 	.db #0x00	; 0
   0568 00                 4240 	.db #0x00	; 0
   0569 00                 4241 	.db #0x00	; 0
   056A 00                 4242 	.db #0x00	; 0
   056B 00                 4243 	.db #0x00	; 0
   056C 00                 4244 	.db #0x00	; 0
   056D 00                 4245 	.db #0x00	; 0
   056E 00                 4246 	.db #0x00	; 0
   056F 00                 4247 	.db #0x00	; 0
   0570 00                 4248 	.db #0x00	; 0
   0571 00                 4249 	.db #0x00	; 0
   0572 00                 4250 	.db #0x00	; 0
   0573 00                 4251 	.db #0x00	; 0
   0574 00                 4252 	.db #0x00	; 0
   0575 00                 4253 	.db #0x00	; 0
   0576 00                 4254 	.db #0x00	; 0
   0577 00                 4255 	.db #0x00	; 0
   0578 00                 4256 	.db #0x00	; 0
   0579 00                 4257 	.db #0x00	; 0
   057A 00                 4258 	.db #0x00	; 0
   057B 00                 4259 	.db #0x00	; 0
   057C 00                 4260 	.db #0x00	; 0
   057D 00                 4261 	.db #0x00	; 0
   057E 00                 4262 	.db #0x00	; 0
   057F 00                 4263 	.db #0x00	; 0
   0580 06                 4264 	.db #0x06	; 6
   0581 07                 4265 	.db #0x07	; 7
   0582 03                 4266 	.db #0x03	; 3
   0583 00                 4267 	.db #0x00	; 0
   0584 00                 4268 	.db #0x00	; 0
   0585 00                 4269 	.db #0x00	; 0
   0586 00                 4270 	.db #0x00	; 0
   0587 00                 4271 	.db #0x00	; 0
   0588 00                 4272 	.db #0x00	; 0
   0589 00                 4273 	.db #0x00	; 0
   058A 00                 4274 	.db #0x00	; 0
   058B 00                 4275 	.db #0x00	; 0
   058C 00                 4276 	.db #0x00	; 0
   058D 00                 4277 	.db #0x00	; 0
   058E 00                 4278 	.db #0x00	; 0
   058F 00                 4279 	.db #0x00	; 0
   0590 00                 4280 	.db #0x00	; 0
   0591 00                 4281 	.db #0x00	; 0
   0592 00                 4282 	.db #0x00	; 0
   0593 00                 4283 	.db #0x00	; 0
   0594 00                 4284 	.db #0x00	; 0
   0595 00                 4285 	.db #0x00	; 0
   0596 00                 4286 	.db #0x00	; 0
   0597 00                 4287 	.db #0x00	; 0
   0598 00                 4288 	.db #0x00	; 0
   0599 00                 4289 	.db #0x00	; 0
   059A 00                 4290 	.db #0x00	; 0
   059B                    4291 __str_0:
   059B 44 65 74 65 63 74  4292 	.ascii "Detecting clock."
        69 6E 67 20 63 6C
        6F 63 6B 2E
   05AB 00                 4293 	.db 0x00
   05AC                    4294 __str_1:
   05AC 49 6E 20 6C 6F 6F  4295 	.ascii "In loop now."
        70 20 6E 6F 77 2E
   05B8 00                 4296 	.db 0x00
   05B9                    4297 __str_2:
   05B9 3A                 4298 	.ascii ":"
   05BA 00                 4299 	.db 0x00
                           4300 	.area XINIT   (CODE)
                           4301 	.area CABS    (ABS,CODE)
